{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/avatar.jpg","path":"avatar/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/kumamon.jpg","path":"avatar/kumamon.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404.jpg","path":"intro/404.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/about-bg-walle.jpg","path":"assets/img/about-bg-walle.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/home-bg-geek.jpg","path":"assets/img/home-bg-geek.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/icon_wechat.png","path":"assets/img/icon_wechat.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/home-bg-art.jpg","path":"assets/img/home-bg-art.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/home-bg-o.jpg","path":"assets/img/home-bg-o.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-alibaba.jpg","path":"assets/img/post-bg-alibaba.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-android.jpg","path":"assets/img/post-bg-android.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-apple-event-2015.jpg","path":"assets/img/post-bg-apple-event-2015.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-digital-native.jpg","path":"assets/img/post-bg-digital-native.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-ios9-web.jpg","path":"assets/img/post-bg-ios9-web.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-js-module.jpg","path":"assets/img/post-bg-js-module.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-js-version.jpg","path":"assets/img/post-bg-js-version.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-kuaidi.jpg","path":"assets/img/post-bg-kuaidi.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-miui-ux.jpg","path":"assets/img/post-bg-miui-ux.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-miui6.jpg","path":"assets/img/post-bg-miui6.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-nextgen-web-pwa.jpg","path":"assets/img/post-bg-nextgen-web-pwa.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-rwd.jpg","path":"assets/img/post-bg-rwd.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/tag-bg.jpg","path":"assets/img/tag-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-sample-image.jpg","path":"assets/img/post-sample-image.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/about-bg-o.jpg","path":"assets/img/about-bg-o.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/404-bg.jpg","path":"assets/img/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-alitrip.jpg","path":"assets/img/post-bg-alitrip.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-2015.jpg","path":"assets/img/post-bg-2015.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-e2e-ux.jpg","path":"assets/img/post-bg-e2e-ux.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-os-metro.jpg","path":"assets/img/post-bg-os-metro.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-re-vs-ng2.jpg","path":"assets/img/post-bg-re-vs-ng2.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-see-u-ali.jpg","path":"assets/img/post-bg-see-u-ali.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-universe.jpg","path":"assets/img/post-bg-universe.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/post-bg-unix-linux.jpg","path":"assets/img/post-bg-unix-linux.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-page.jpg","path":"intro/about-page.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/contact-bg.jpg","path":"assets/img/contact-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/home-bg.jpg","path":"assets/img/home-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/open-source-license.png","path":"assets/img/in-post/open-source-license.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-c-u-ali-079717.png","path":"assets/img/in-post/post-c-u-ali-079717.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-kuaidi-2.jpg","path":"assets/img/in-post/post-kuaidi-2.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/intro-desktop.jpg","path":"intro/intro-desktop.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/forcify.jpg","path":"assets/img/in-post/forcify.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-kuaidi-1.jpg","path":"assets/img/in-post/post-kuaidi-1.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-metro-ui.jpg","path":"assets/img/in-post/post-metro-ui.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-metro-panorama.jpg","path":"assets/img/in-post/post-metro-panorama.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/Lighthouse-before.png","path":"assets/img/in-post/post-eleme-pwa/Lighthouse-before.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/Lighthouse-after.png","path":"assets/img/in-post/post-eleme-pwa/Lighthouse-after.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-js-version/keep-calm-and-learn-javascript.png","path":"assets/img/in-post/post-js-version/keep-calm-and-learn-javascript.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/PWAR-007.jpeg","path":"assets/img/in-post/post-nextgen-web-pwa/PWAR-007.jpeg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/PWAR-014+PWA.jpeg","path":"assets/img/in-post/post-nextgen-web-pwa/PWAR-014+PWA.jpeg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-metro-real.jpg","path":"assets/img/in-post/post-metro-real.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/sw-lifecycle.png","path":"assets/img/in-post/post-nextgen-web-pwa/sw-lifecycle.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.013.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.013.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.014.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.014.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.016.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.016.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.019.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.019.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.020.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.020.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.021.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.021.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.026.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.026.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.023.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.023.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.028.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.028.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.030.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.030.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-c-u-ali-memo.jpg","path":"assets/img/in-post/post-c-u-ali-memo.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.029.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.029.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/msite-After-Optim.png","path":"assets/img/in-post/post-eleme-pwa/msite-After-Optim.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/msite-Before-Optim.png","path":"assets/img/in-post/post-eleme-pwa/msite-Before-Optim.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/nextTick-&-Load.png","path":"assets/img/in-post/post-eleme-pwa/nextTick-&-Load.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/thisTick-&-Load.png","path":"assets/img/in-post/post-eleme-pwa/thisTick-&-Load.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-js-version/javascript-java.jpg","path":"assets/img/in-post/post-js-version/javascript-java.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/ios2-a2hs.gif","path":"assets/img/in-post/post-nextgen-web-pwa/ios2-a2hs.gif","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/flipkart-1.jpeg","path":"assets/img/in-post/post-nextgen-web-pwa/flipkart-1.jpeg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/flipkart-2.jpeg","path":"assets/img/in-post/post-nextgen-web-pwa/flipkart-2.jpeg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/flipkart-3.jpeg","path":"assets/img/in-post/post-nextgen-web-pwa/flipkart-3.jpeg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/qcon-trend.png","path":"assets/img/in-post/post-nextgen-web-pwa/qcon-trend.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/qcon-hybridzation.png","path":"assets/img/in-post/post-nextgen-web-pwa/qcon-hybridzation.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/sw-sw.png","path":"assets/img/in-post/post-nextgen-web-pwa/sw-sw.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.031.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.031.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/before-skeleton.jpg","path":"assets/img/in-post/post-eleme-pwa/before-skeleton.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/after-skeleton.jpg","path":"assets/img/in-post/post-eleme-pwa/after-skeleton.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/sw-race.png","path":"assets/img/in-post/post-nextgen-web-pwa/sw-race.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.018.jpg","path":"assets/img/in-post/post-alitrip-pd/post-alitrip-pd.018.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/eleme-at-io.jpg","path":"assets/img/in-post/post-eleme-pwa/eleme-at-io.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/PUSH-link-rel-preload.jpg","path":"assets/img/in-post/post-eleme-pwa/PUSH-link-rel-preload.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/Architecture.png","path":"assets/img/in-post/post-eleme-pwa/Architecture.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/PRECACHE-future-routes.jpg","path":"assets/img/in-post/post-eleme-pwa/PRECACHE-future-routes.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/img/in-post/post-c-u-ali-team.png","path":"assets/img/in-post/post-c-u-ali-team.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/archer/.gitignore","hash":"7e11730466038f7d81c67afdb7fb3c19bc4c0cc0","modified":1543555001860},{"_id":"source/CNAME","hash":"f662bb4520cc143f3bfd10d9aded79b859934562","modified":1543664196929},{"_id":"source/404.md","hash":"17657585e818d245e2000306cb66d0ce8dedb022","modified":1543555001848},{"_id":"themes/archer/.jsbeautifyrc","hash":"7d797e4dc0fa9faca4cd77e93b5e8c84b0eaa491","modified":1543555001861},{"_id":"themes/archer/LICENSE","hash":"2e2aa5592465de2760a6977ae88cca23f70f849e","modified":1543555001862},{"_id":"themes/archer/README.md","hash":"16d0e4312cd774e93646742bb9c8b7bc18d37841","modified":1543555001864},{"_id":"themes/archer/gulpfile.js","hash":"e3c30805d519bc0bdc0d88c7b647624e49cdba7c","modified":1543555001871},{"_id":"themes/archer/package.json","hash":"8a7f628e53b084a8d4a768776dc6bccee4fbba48","modified":1543555001904},{"_id":"themes/archer/_config.yml","hash":"114990d0833765c1c213287cea8191f726337f55","modified":1544416739054},{"_id":"source/_posts/2015-09-22-js-version.md","hash":"81f59ce431aec54758736656450fa347fb85635e","modified":1543555001850},{"_id":"source/_posts/JavaScript-modules.md","hash":"d3c86d5cbdf51f58f79c87c9a1059fd7368394c9","modified":1543555001852},{"_id":"source/_posts/Vuex.md","hash":"3d19abe7d1563c6d6fab2670b60f3872f0ef3e7a","modified":1543555001853},{"_id":"source/_posts/DayJs.md","hash":"2af73fcad4dc80af53a7adb2fef52f8d3bf7b468","modified":1543572141891},{"_id":"source/_posts/Webpack.md","hash":"0c5ba7f825eb4e25c6df615cc000db3699895e7e","modified":1543555001854},{"_id":"source/_posts/eslint-vscode-setting.md","hash":"ee7b0638779fddea2324053449fbf7ffccbe97d3","modified":1543572166237},{"_id":"source/_posts/typora.md","hash":"2402867c947a0f2252559c40a01a52506d4492cf","modified":1543555001855},{"_id":"source/about/index.md","hash":"6b0bd4d9442433ef505c95bcfc533739b9cf7da0","modified":1543555001858},{"_id":"source/_posts/vueqr-new.md","hash":"015eec3de1a924fd678fac73e9057591e8522a1c","modified":1543555001856},{"_id":"themes/archer/docs/develop-guide.md","hash":"7e50673866875ae0e8a7d5a68f5d1d038d1b1a11","modified":1543555001868},{"_id":"themes/archer/docs/README-en.md","hash":"0ac281e28afc21f1785820f6123d49c557079307","modified":1543555001867},{"_id":"themes/archer/layout/about.ejs","hash":"6140f862282edfbfb8eeb7c64e62e1a85be0c507","modified":1543664196935},{"_id":"themes/archer/layout/404.ejs","hash":"3e8374a5ee4ddabf0346726b9d30e778db9f4986","modified":1543555001873},{"_id":"themes/archer/layout/layout.ejs","hash":"e18a6f7427e211801305b776cf7a3c865c90a44d","modified":1543555001902},{"_id":"themes/archer/layout/post.ejs","hash":"e6a19599075e452e296f3d0914cd03f60679b617","modified":1543555001903},{"_id":"themes/archer/layout/js-info.ejs","hash":"d2cd348c5676cfe4981a07b5efead65f17bad4ef","modified":1543555001901},{"_id":"themes/archer/layout/index.ejs","hash":"0ba62a2809286c855cce578cd8525d9f918cc9ed","modified":1543555001900},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"174c00eb0e1d32a31262413859f19a1abfa33f43","modified":1543555001877},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"fc7288cf6ad4efe2af8ae614f7eab4052c344e83","modified":1543555001875},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"af76b1a18a63934e83b078bf5f9f886e972a0ceb","modified":1543555001879},{"_id":"themes/archer/layout/_partial/base-qr-box.ejs","hash":"0ddf3d9231d914f9e768d7b5c972f2296815c4ea","modified":1543555001881},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"d31ecb5e851397bd9ea8125ec3e0ac7ba71e54b7","modified":1543555001878},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"938cf6ca00782f9ac27c43bff7739fe1e0bbcb31","modified":1543555001881},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"80560ab8c262d0997fb2fb03a7163b94e727a7c8","modified":1543555001884},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"9bdf0fb5de8e89235149cccbfc8d14b279dd0b86","modified":1543555001885},{"_id":"themes/archer/layout/_partial/base-share.ejs","hash":"593398145ff712f3c01fff9fe2d2b38bfa8bb20b","modified":1543555001882},{"_id":"themes/archer/source/assets/favicon.ico","hash":"ba0db0cdbb8c05d884e318e5bbcefe14189ddfd3","modified":1543664196941},{"_id":"themes/archer/source/assets/loading.svg","hash":"d77439be54c0b3a5e96791aad5f352939cd5a2f4","modified":1543555002108},{"_id":"themes/archer/source-src/js/init.js","hash":"3dede6ca9ed7de62360591aeb6a32657bd7d86ae","modified":1543555001908},{"_id":"themes/archer/source-src/js/browser.js","hash":"1f0adfd9d0048974c540095e656205ebcc3b8f0f","modified":1543555001907},{"_id":"themes/archer/source-src/js/mobile.js","hash":"7c37036cd8b450debae5b0de167dbd9fab5f677b","modified":1543555001913},{"_id":"themes/archer/source-src/js/main.js","hash":"3233f25240de0b56b49d3a4211b75f939993b73a","modified":1543555001912},{"_id":"themes/archer/source-src/js/sidebar.js","hash":"a1044a412236e4d45a249896585b9ebf4b12651f","modified":1543555001915},{"_id":"themes/archer/source-src/js/tag.js","hash":"b5898d81e66424c94cd747071a4b488588b1b8f4","modified":1543555001917},{"_id":"themes/archer/source-src/js/util.js","hash":"2bd88998565e29a1d6262e9a79c27d3c5247a61c","modified":1543555001918},{"_id":"themes/archer/source-src/js/scroll.js","hash":"262bedb088ca4ee75875902cfd8108eca4cc6d29","modified":1543555001914},{"_id":"themes/archer/source-src/scss/_mixin.scss","hash":"1e1a42d90fd2dd1460d330c7cbde4eb2143d587c","modified":1543555001921},{"_id":"themes/archer/source-src/scss/_normalize.scss","hash":"9123aa118cc636b4bfe718b87274d0b9732d8e89","modified":1543555001924},{"_id":"themes/archer/source-src/scss/_common.scss","hash":"e523b3d2ec2003310b1d5bb3933c92839a64a868","modified":1543555001919},{"_id":"themes/archer/source-src/scss/_mobile.scss","hash":"6be15b8f8dc8738d65c63da75bba683419cef129","modified":1543555001922},{"_id":"themes/archer/source-src/scss/_variables.scss","hash":"50bb0cfd41c11fec581228fcda1699e1e985ca2f","modified":1543555001950},{"_id":"themes/archer/source-src/scss/style.css","hash":"24bedb5693259a6daf0bbe8fcbf0363300b075c0","modified":1543664196940},{"_id":"themes/archer/source-src/scss/style.scss","hash":"99da2d5449ba53f8081f3e2eccfc6ad68658cd19","modified":1543555001954},{"_id":"themes/archer/source-src/scss/style.css.map","hash":"ccbbf99e5dd99d14d3f9ee0b1e0dfbb1147d832c","modified":1543555001953},{"_id":"themes/archer/source/css/style.css","hash":"a62ebce6afe3c1273e7fd420c7f2daa33a080016","modified":1543555002113},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1543664196982},{"_id":"themes/archer/source/avatar/avatar.jpg","hash":"31f88e9f01cb534295db44a66f416f6db3661ed7","modified":1544413722641},{"_id":"themes/archer/source/avatar/kumamon.jpg","hash":"dbe69dc8e9125014d6cf2295769756e23ab5c820","modified":1543664196982},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1543664196984},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1543664196984},{"_id":"themes/archer/source/scripts/main.js","hash":"7374a2d1722c8b6acbea18c812f42966a9e5caff","modified":1543664196989},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1543664196934},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1543664196984},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1543664196985},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1543664196984},{"_id":"themes/archer/source/intro/404.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1543664196985},{"_id":"themes/archer/docs/snap.png","hash":"5b148488065b036424b4f39ce1fc91269be4425e","modified":1543664196932},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cfdb15116abe89f4b54f7bb18a0b23a597c47a60","modified":1543555001889},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"c043a98e33252b9a628bfd31c4a3b2883dce2b99","modified":1543555001890},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"60189b4c02a1b886ecfdc758c55c9a24fa7d36af","modified":1543555001886},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"a6acb5d7778ade98ba5b6932e38a585460513f49","modified":1543555001892},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archive.ejs","hash":"7d956ab0164f4142f1e21b8e03bbbcd482865a9f","modified":1543555001896},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"35c4dd6c7cb25c836a50bbffe2d49f61bac882b2","modified":1543555001894},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"483c07212879b116b772f428547c9962be96d2ce","modified":1543555001893},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"8840ccec3c06f8808230294e9c70061d7e6577de","modified":1543555001897},{"_id":"themes/archer/source/assets/img/about-bg-walle.jpg","hash":"23e7e02ad063ed8d5eaba97f7a8183c92a26976f","modified":1543664196942},{"_id":"themes/archer/source/assets/img/home-bg-geek.jpg","hash":"79760dd9fcf9598f32eafa921d6d64b2e25fb03a","modified":1543664196943},{"_id":"themes/archer/source/assets/img/icon_wechat.png","hash":"f876ce68b3197206add0fa20045a972684530526","modified":1543664196945},{"_id":"themes/archer/source/assets/img/home-bg-art.jpg","hash":"ab3c20d91c5924635b6ff51893d88636dfba9709","modified":1543664196943},{"_id":"themes/archer/source/assets/img/home-bg-o.jpg","hash":"1913754f35f457f09671268baf63a8921318ae32","modified":1543664196944},{"_id":"themes/archer/source/assets/img/post-bg-alibaba.jpg","hash":"415fdb209979e27e168b2801216658477c82df76","modified":1543664196975},{"_id":"themes/archer/source/assets/img/post-bg-android.jpg","hash":"118c59a132aa1ea0c4d2da52111d802291f9c1c2","modified":1543664196976},{"_id":"themes/archer/source/assets/img/post-bg-apple-event-2015.jpg","hash":"28888e02952d9a4711d9762a66a76f5e9b90b52c","modified":1543664196976},{"_id":"themes/archer/source/assets/img/post-bg-digital-native.jpg","hash":"3252f472aa32b85d77b9b122cc050b0af074136f","modified":1543664196976},{"_id":"themes/archer/source/assets/img/post-bg-ios9-web.jpg","hash":"c7dfbf9c6cc54522cce8a411a583dd051f9e2001","modified":1543664196977},{"_id":"themes/archer/source/assets/img/post-bg-js-module.jpg","hash":"ffb9671f899ff5637e57b3450cbbc5a623d65ff0","modified":1543664196977},{"_id":"themes/archer/source/assets/img/post-bg-js-version.jpg","hash":"d47c74c973773a8f9bf93a4bb1d08ee8c3cec92d","modified":1543664196978},{"_id":"themes/archer/source/assets/img/post-bg-kuaidi.jpg","hash":"ce64b8985ddcacd95e503cdde250db1fadbc2002","modified":1543664196978},{"_id":"themes/archer/source/assets/img/post-bg-miui-ux.jpg","hash":"fad81037a695a7ec0668ee00feac019f05b0d22b","modified":1543664196978},{"_id":"themes/archer/source/assets/img/post-bg-miui6.jpg","hash":"9c2231b88efbc52a9f578007c558ae1c8a114917","modified":1543664196978},{"_id":"themes/archer/source/assets/img/post-bg-nextgen-web-pwa.jpg","hash":"951356e5a687126b2b6a8bd9de5e632b89b6e44f","modified":1543664196979},{"_id":"themes/archer/source/assets/img/post-bg-rwd.jpg","hash":"44b54178a961d6e0c3f28453b06f8760400ed93f","modified":1543664196980},{"_id":"themes/archer/source-src/scss/_partial/_about.scss","hash":"4b2a43585481be66f528d6881a847b84cf03ced1","modified":1543555001927},{"_id":"themes/archer/source/assets/img/tag-bg.jpg","hash":"005b999f293d71ce570ad32eb281e6aa6a28482f","modified":1543664196982},{"_id":"themes/archer/source/assets/img/post-sample-image.jpg","hash":"4c7357bb32bee28c269ff19cae4e88a184dfd7b9","modified":1543664196981},{"_id":"themes/archer/source-src/scss/_partial/_404.scss","hash":"dbc728d4c19826dc4dfa2fdb9cf330af1761e011","modified":1543555001926},{"_id":"themes/archer/source-src/scss/_partial/_index-page.scss","hash":"c2f2325554863c04facb7f396f2d9f39390d5770","modified":1543555001929},{"_id":"themes/archer/source-src/scss/_partial/_post-page.scss","hash":"443ea297673c3cc3e427ed5120f0e13313f89d84","modified":1543555001943},{"_id":"themes/archer/source/assets/img/about-bg-o.jpg","hash":"dfc934ecf8ef879152f5e84dd02607acecfeeb74","modified":1543664196942},{"_id":"themes/archer/source/assets/img/404-bg.jpg","hash":"d0b39d9359528ab82c62ca148966f054ccdcefe6","modified":1543664196941},{"_id":"themes/archer/source/assets/img/post-bg-alitrip.jpg","hash":"85ed57fcc37b72e63b222bb660dd64a13797d069","modified":1543664196976},{"_id":"themes/archer/source/assets/img/post-bg-2015.jpg","hash":"e5d68d31f507de3b0879143851211c851b9de203","modified":1543664196975},{"_id":"themes/archer/source/assets/img/post-bg-e2e-ux.jpg","hash":"582b0858909926b686da00c87e8dfe1dd34d16c8","modified":1543664196977},{"_id":"themes/archer/source/assets/img/post-bg-os-metro.jpg","hash":"99ac866d9b175dc291f1a5424615f1115b5fa212","modified":1543664196979},{"_id":"themes/archer/source/assets/img/post-bg-re-vs-ng2.jpg","hash":"37b2997d6c867612ef4f69397dcc61f8ac50b0a0","modified":1543664196979},{"_id":"themes/archer/source/assets/img/post-bg-see-u-ali.jpg","hash":"1480d5e8560f9c5b96e3d57367f7d4e3c3461c1b","modified":1543664196980},{"_id":"themes/archer/source/assets/img/post-bg-universe.jpg","hash":"c4211a26db1de13ad0f79279597d1a49f544382a","modified":1543664196981},{"_id":"themes/archer/source/assets/img/post-bg-unix-linux.jpg","hash":"2e7229df40b47937c5a16a6f1230ce173a044ad4","modified":1543664196981},{"_id":"themes/archer/source-src/js/lib/jquery.min.js","hash":"dacc1f76630a9708add066819b1aabf8dce01056","modified":1543555001911},{"_id":"themes/archer/source/intro/about-page.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1543664196987},{"_id":"themes/archer/source/assets/img/contact-bg.jpg","hash":"2c925277b1d405774a8351d1896b6011049136ae","modified":1543664196943},{"_id":"themes/archer/source/assets/img/home-bg.jpg","hash":"5cd7098815eff29e373f485bd8a45092911cee7e","modified":1543664196944},{"_id":"themes/archer/source/assets/img/in-post/open-source-license.png","hash":"140f114850c37c18ae9b0421a720ce2ce14d7ed0","modified":1543664196945},{"_id":"themes/archer/source/assets/img/in-post/post-c-u-ali-079717.png","hash":"7bd36357821dee7cecee84071c1089abe2b2bb63","modified":1543664196954},{"_id":"themes/archer/source/assets/img/in-post/post-kuaidi-2.jpg","hash":"3f77fab7a4f0866591f73ba9866bcce9d53fe49d","modified":1543664196968},{"_id":"themes/archer/source-src/scss/_partial/_partial/_header.scss","hash":"ecaeeb414bb9dfdf6293e329d57e598102a83591","modified":1543555001932},{"_id":"themes/archer/source-src/scss/_partial/_partial/_footer.scss","hash":"aa402674eae02fcf011beabdc6bd070fc9762ed8","modified":1543555001931},{"_id":"themes/archer/source-src/scss/_partial/_partial/_intro.scss","hash":"bc76b3f1a777a58bd91e38e4b6faa70e71ee6cbf","modified":1543555001934},{"_id":"themes/archer/source-src/scss/_partial/_partial/_paginator.scss","hash":"ccfa3eb0b6282b2075ecd29c62b3988d384750fd","modified":1543555001935},{"_id":"themes/archer/source-src/scss/_partial/_partial/_profile.scss","hash":"5da6013c20d2d47a0b186ff0d14a6d3852c2cf2d","modified":1543555001937},{"_id":"themes/archer/source-src/scss/_partial/_partial/_scrollbar.scss","hash":"1c4ac1b8e67cfa5f394011ac81b093f9b29debe1","modified":1543555001941},{"_id":"themes/archer/source-src/scss/_partial/_partial/_qr.scss","hash":"e11ef69f55e497f05e7675e85588ff79009f548a","modified":1543555001939},{"_id":"themes/archer/source-src/scss/_partial/_post/_code.scss","hash":"fc324f636838bf86bfa999cbae9ce292d284f42f","modified":1543555001945},{"_id":"themes/archer/source-src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"22a6e9f08c60b86414de247dcd359ab0fe2f65fe","modified":1543555001947},{"_id":"themes/archer/source-src/scss/_partial/_sidebar/_sidebar.scss","hash":"0607b70856ddd7244fe1bae81bc1c5c996544ae3","modified":1543555001949},{"_id":"themes/archer/source-src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"667e1072184c67d6c9ce22f7d6d94fa869ddc474","modified":1543555001948},{"_id":"themes/archer/source/intro/intro-desktop.jpg","hash":"878b8818b36e8eb00a49458a16e0d0c3c020d0b7","modified":1543664196987},{"_id":"themes/archer/source/assets/img/in-post/forcify.jpg","hash":"5f9e1cc26bdea213b08b85fb22081a5601a8f525","modified":1543664196945},{"_id":"themes/archer/source/assets/img/in-post/post-kuaidi-1.jpg","hash":"54cbc6a834ee29448959c3f466393c8e39370072","modified":1543664196967},{"_id":"themes/archer/source/assets/img/in-post/post-metro-ui.jpg","hash":"48eae1424da4f171abcf4bc0e2875b2e89c79f1b","modified":1543664196969},{"_id":"themes/archer/source/assets/img/in-post/post-metro-panorama.jpg","hash":"42c695afc4477743ab628bd9c2298382361437ca","modified":1543664196968},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/Lighthouse-before.png","hash":"df4f875f175b7398620f9471b9366e0536c39a21","modified":1543664196958},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/Lighthouse-after.png","hash":"4f54cc6667d4687a974f48c96a8100582d55fc50","modified":1543664196958},{"_id":"themes/archer/source/assets/img/in-post/post-js-version/keep-calm-and-learn-javascript.png","hash":"49ea101b92ce5e136a19e6b11162f8f4126fe01f","modified":1543664196967},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/PWAR-007.jpeg","hash":"33247bc1905a4652c4f0f21a8aebf2d57a8a9f0f","modified":1543664196969},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/PWAR-014+PWA.jpeg","hash":"d0b0a334794836ec0f5b24756ce62e3f97b62a36","modified":1543664196970},{"_id":"themes/archer/source/assets/img/in-post/post-metro-real.jpg","hash":"995f04b56698842817783ad91144b34c782c27e2","modified":1543664196968},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/sw-lifecycle.png","hash":"0ff408ffc69db8eafa13739adf187d55e21e9ad1","modified":1543664196973},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.013.jpg","hash":"d2581bc91cfd0493565829a7a2b3a4bee2ca9d1b","modified":1543664196946},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.014.jpg","hash":"271305705f265b34a530ff7d2fc42f17846342b4","modified":1543664196946},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.016.jpg","hash":"3a645f517c0792d85b8b1de351bca2cc5e421270","modified":1543664196947},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.019.jpg","hash":"27d1caa6f3a673b537f15a2dd17740a50667859f","modified":1543664196949},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.020.jpg","hash":"d813311dde22ffdaaed0f8099860ec2e1ca84965","modified":1543664196949},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.021.jpg","hash":"97c14902278cbd0d00ea32783e872af4156b8e14","modified":1543664196950},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.026.jpg","hash":"42c8082cf1b99e487dff31f8cd9c1fddab52a1e3","modified":1543664196951},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.023.jpg","hash":"4a94fbc9f8070a5ceb717e32f25a8fa74abaed76","modified":1543664196950},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.028.jpg","hash":"6b65fc4114c2e06860f7a2495933e087d42a5911","modified":1543664196951},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.030.jpg","hash":"a1ecf1f2c5c1506eb55c005bcd034683f72cc943","modified":1543664196952},{"_id":"themes/archer/source/assets/img/in-post/post-c-u-ali-memo.jpg","hash":"49089db9f705e793c59f6d46603110553781d89c","modified":1543664196954},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.029.jpg","hash":"479225bfc517d1e04707f6b6c4af35646c1b4246","modified":1543664196952},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/msite-After-Optim.png","hash":"489bf8fc9e37f6dca0d0490c6b6c509350279ea6","modified":1543664196964},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/msite-Before-Optim.png","hash":"9fa61e09e87cccd5d191cd1ee2a7e7817bb58ad9","modified":1543664196965},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/nextTick-&-Load.png","hash":"0c71affe16b4798a18a8f80a756c884f6162173f","modified":1543664196965},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/thisTick-&-Load.png","hash":"1bbdaf058920c7fe6eaca300197773ad0c21e5ec","modified":1543664196966},{"_id":"themes/archer/source/assets/img/in-post/post-js-version/javascript-java.jpg","hash":"881e35e241a8be40f3c4e3a6f57d5402247c1eb3","modified":1543664196967},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/ios2-a2hs.gif","hash":"7c11cdf130fd6d40e5b606970673a3b387cd61d9","modified":1543664196972},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/flipkart-1.jpeg","hash":"40ac18cdb7f99a53025a60fd4600282b8fd46b72","modified":1543664196970},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/flipkart-2.jpeg","hash":"02a8f2abd319953312d4db97553acd26761d352d","modified":1543664196971},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/flipkart-3.jpeg","hash":"f3863c39b36175e85114baf4febd0cfe4ce4c3c2","modified":1543664196971},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/qcon-trend.png","hash":"7e35d1d3949302bee2fd7b1f27881a0778993c32","modified":1543664196973},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/qcon-hybridzation.png","hash":"64c38590980057897f81ee3bd37094f618c5f5d3","modified":1543664196972},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/sw-sw.png","hash":"f5545b4f1de410b0b79349229d525d1c1e938a11","modified":1543664196975},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.031.jpg","hash":"8204a2c4b75402f6cecfc48e311f20074066c6d7","modified":1543664196953},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/before-skeleton.jpg","hash":"acc2ece7ea328791bc8c5b2c00addbb6771306e9","modified":1543664196963},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/after-skeleton.jpg","hash":"1857707c74fcc77da176b6b4ddfdf3c896a4d14c","modified":1543664196962},{"_id":"themes/archer/source/assets/img/in-post/post-nextgen-web-pwa/sw-race.png","hash":"6b1a64c0c1190428a09c683626355252b1f1f8d8","modified":1543664196974},{"_id":"themes/archer/source/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.018.jpg","hash":"b57e838b68544a49086df589819f23234ab0bbe6","modified":1543664196948},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/eleme-at-io.jpg","hash":"10d854075895fd37bcd53a9669abed92f0b77ce2","modified":1543664196964},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/PUSH-link-rel-preload.jpg","hash":"5360f20d14743bfd7da5b246aa887a0254b931c6","modified":1543664196961},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/Architecture.png","hash":"ea0213e2081aa8b0f6722f1d03536b01c84f0a8a","modified":1543664196958},{"_id":"themes/archer/source/assets/img/in-post/post-eleme-pwa/PRECACHE-future-routes.jpg","hash":"eb5f856dca01a517cd92639f927002e6c502a59c","modified":1543664196960},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"0b34239a890ef5945f78bf204bba8c29d8828c8e","modified":1543664196989},{"_id":"themes/archer/source/assets/img/in-post/post-c-u-ali-team.png","hash":"9241826a0b593304c3e87f0950a4e090a89bbcc7","modified":1543664196956},{"_id":"public/about/index.html","hash":"4aaa37e119c37adc59292cf634258e7a1a904e35","modified":1544416836545},{"_id":"public/404.html","hash":"bbab2ce52e8752649f47f40eb4edc8bcf837752c","modified":1544416836546},{"_id":"public/content.json","hash":"ff946e6db2cb12a8efae28be1a4d2eff3a84fef5","modified":1544416836313},{"_id":"public/archives/2015/index.html","hash":"81db7c2331c285f2923e117bbe0261fb642d5a46","modified":1544416836546},{"_id":"public/archives/2015/09/index.html","hash":"81db7c2331c285f2923e117bbe0261fb642d5a46","modified":1544416836546},{"_id":"public/archives/2017/index.html","hash":"8bee6d252079ef481877c58299c8a544e1b61976","modified":1544416836546},{"_id":"public/archives/2017/12/index.html","hash":"8bee6d252079ef481877c58299c8a544e1b61976","modified":1544416836546},{"_id":"public/archives/2018/11/index.html","hash":"80bc13acbf40e84ce1afda5869db1e7636810c10","modified":1544416836546},{"_id":"public/tags/模块化/index.html","hash":"f4473b473020160e3d448c43f8b41bbe1d0947aa","modified":1544416836546},{"_id":"public/tags/规范/index.html","hash":"f4473b473020160e3d448c43f8b41bbe1d0947aa","modified":1544416836546},{"_id":"public/tags/翻译/index.html","hash":"81db7c2331c285f2923e117bbe0261fb642d5a46","modified":1544416836546},{"_id":"public/tags/JS时间处理/index.html","hash":"6329e502217b82d2e28ad52cb745d0db21a9a07e","modified":1544416836546},{"_id":"public/tags/语法/index.html","hash":"3f679225b97616b0de7c366f24919dd7242f6733","modified":1544416836546},{"_id":"public/tags/Webpack3-10/index.html","hash":"3f679225b97616b0de7c366f24919dd7242f6733","modified":1544416836546},{"_id":"public/tags/vue/index.html","hash":"4358f36ca4781c8c80392c5b9e75109ffdd51311","modified":1544416836547},{"_id":"public/tags/Markdown/index.html","hash":"94b358e6c5d9f497acfc2be52553ccdf539c59f1","modified":1544416836547},{"_id":"public/tags/vuex/index.html","hash":"4358f36ca4781c8c80392c5b9e75109ffdd51311","modified":1544416836547},{"_id":"public/tags/ESLint/index.html","hash":"4020c1bff145bef832896a21c5bf6a80f8f63a52","modified":1544416836547},{"_id":"public/tags/Vue/index.html","hash":"f431184f432c4d16f106d21c633b1dbb2f56d59e","modified":1544416836547},{"_id":"public/tags/VSCode/index.html","hash":"4020c1bff145bef832896a21c5bf6a80f8f63a52","modified":1544416836547},{"_id":"public/2018/11/30/eslint-vscode-setting/index.html","hash":"d68bfe0d31e4157bda217555cfac73d5005b3b7c","modified":1544416836548},{"_id":"public/2018/03/12/typora/index.html","hash":"e180372c9b827d71f18e63e52c8c8c5a40b2ac4e","modified":1544416836548},{"_id":"public/2018/03/12/vueqr-new/index.html","hash":"330f0637014b5d055eada3b87e1c5da222118fec","modified":1544416836548},{"_id":"public/2018/11/30/DayJs/index.html","hash":"8197c9334e97420352fe550782fc4b6c5b9395ff","modified":1544416836547},{"_id":"public/2018/03/12/Vuex/index.html","hash":"f31a47f0ae96ef90cbd1cb5ef33dbe0de7f1a4cf","modified":1544416836548},{"_id":"public/2017/12/29/JavaScript-modules/index.html","hash":"a44f1c83efb721e95a1bf3887128616cf78d7225","modified":1544416836548},{"_id":"public/2017/12/29/Webpack/index.html","hash":"f61ad3f69bd65ddb5a9994da05341efb4929e66b","modified":1544416836548},{"_id":"public/2015/09/22/2015-09-22-js-version/index.html","hash":"7d5731e7142403b1a110f7ad95daf4eb1e169ee0","modified":1544416836548},{"_id":"public/archives/index.html","hash":"09da6593552e645c9626d15675a6d9205494a5f5","modified":1544416836548},{"_id":"public/archives/2018/index.html","hash":"7004b36eb6cb31c6a6f1cbd942d93bcaca525a05","modified":1544416836548},{"_id":"public/archives/2018/03/index.html","hash":"c9809de084889e1d14ea88338e9984b8d2b265e4","modified":1544416836548},{"_id":"public/categories/JavaScript/index.html","hash":"534cae064ace650cc204c950020e06b7dde8a2e6","modified":1544416836548},{"_id":"public/index.html","hash":"c1a55c2d17fb5df10b0376ef5988ae1dd1bfad96","modified":1544416836548},{"_id":"public/tags/前端开发/index.html","hash":"3037448560b099a00ec4b0dc0f317129d9a26964","modified":1544416836549},{"_id":"public/tags/JS/index.html","hash":"534cae064ace650cc204c950020e06b7dde8a2e6","modified":1544416836548},{"_id":"public/tags/JavaScript/index.html","hash":"397ba629b0f042836f9102243dfe6c8f8288622e","modified":1544416836548},{"_id":"public/CNAME","hash":"f662bb4520cc143f3bfd10d9aded79b859934562","modified":1544416836549},{"_id":"public/assets/favicon.ico","hash":"ba0db0cdbb8c05d884e318e5bbcefe14189ddfd3","modified":1544416836549},{"_id":"public/assets/loading.svg","hash":"d77439be54c0b3a5e96791aad5f352939cd5a2f4","modified":1544416836549},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1544416836549},{"_id":"public/avatar/kumamon.jpg","hash":"dbe69dc8e9125014d6cf2295769756e23ab5c820","modified":1544416836549},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1544416836549},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1544416836549},{"_id":"public/assets/img/about-bg-walle.jpg","hash":"23e7e02ad063ed8d5eaba97f7a8183c92a26976f","modified":1544416836549},{"_id":"public/assets/img/icon_wechat.png","hash":"f876ce68b3197206add0fa20045a972684530526","modified":1544416836549},{"_id":"public/assets/img/home-bg-geek.jpg","hash":"79760dd9fcf9598f32eafa921d6d64b2e25fb03a","modified":1544416836549},{"_id":"public/assets/img/home-bg-art.jpg","hash":"ab3c20d91c5924635b6ff51893d88636dfba9709","modified":1544416836549},{"_id":"public/assets/img/home-bg-o.jpg","hash":"1913754f35f457f09671268baf63a8921318ae32","modified":1544416836549},{"_id":"public/assets/img/post-bg-alibaba.jpg","hash":"415fdb209979e27e168b2801216658477c82df76","modified":1544416836549},{"_id":"public/assets/img/post-bg-apple-event-2015.jpg","hash":"28888e02952d9a4711d9762a66a76f5e9b90b52c","modified":1544416836549},{"_id":"public/assets/img/post-bg-android.jpg","hash":"118c59a132aa1ea0c4d2da52111d802291f9c1c2","modified":1544416836550},{"_id":"public/assets/img/post-bg-digital-native.jpg","hash":"3252f472aa32b85d77b9b122cc050b0af074136f","modified":1544416836550},{"_id":"public/assets/img/post-bg-ios9-web.jpg","hash":"c7dfbf9c6cc54522cce8a411a583dd051f9e2001","modified":1544416836550},{"_id":"public/assets/img/post-bg-js-version.jpg","hash":"d47c74c973773a8f9bf93a4bb1d08ee8c3cec92d","modified":1544416836550},{"_id":"public/assets/img/post-bg-js-module.jpg","hash":"ffb9671f899ff5637e57b3450cbbc5a623d65ff0","modified":1544416836550},{"_id":"public/assets/img/post-bg-kuaidi.jpg","hash":"ce64b8985ddcacd95e503cdde250db1fadbc2002","modified":1544416836550},{"_id":"public/assets/img/post-bg-miui6.jpg","hash":"9c2231b88efbc52a9f578007c558ae1c8a114917","modified":1544416836550},{"_id":"public/assets/img/post-bg-miui-ux.jpg","hash":"fad81037a695a7ec0668ee00feac019f05b0d22b","modified":1544416836550},{"_id":"public/assets/img/post-bg-rwd.jpg","hash":"44b54178a961d6e0c3f28453b06f8760400ed93f","modified":1544416836550},{"_id":"public/assets/img/tag-bg.jpg","hash":"005b999f293d71ce570ad32eb281e6aa6a28482f","modified":1544416836550},{"_id":"public/assets/img/post-bg-nextgen-web-pwa.jpg","hash":"951356e5a687126b2b6a8bd9de5e632b89b6e44f","modified":1544416836550},{"_id":"public/assets/img/post-sample-image.jpg","hash":"4c7357bb32bee28c269ff19cae4e88a184dfd7b9","modified":1544416836550},{"_id":"public/assets/img/in-post/open-source-license.png","hash":"140f114850c37c18ae9b0421a720ce2ce14d7ed0","modified":1544416836551},{"_id":"public/assets/img/in-post/post-kuaidi-2.jpg","hash":"3f77fab7a4f0866591f73ba9866bcce9d53fe49d","modified":1544416836551},{"_id":"public/assets/img/in-post/post-c-u-ali-079717.png","hash":"7bd36357821dee7cecee84071c1089abe2b2bb63","modified":1544416836551},{"_id":"public/assets/img/in-post/post-eleme-pwa/Lighthouse-before.png","hash":"df4f875f175b7398620f9471b9366e0536c39a21","modified":1544416836551},{"_id":"public/assets/img/in-post/post-eleme-pwa/Lighthouse-after.png","hash":"4f54cc6667d4687a974f48c96a8100582d55fc50","modified":1544416836551},{"_id":"public/assets/img/in-post/post-js-version/keep-calm-and-learn-javascript.png","hash":"49ea101b92ce5e136a19e6b11162f8f4126fe01f","modified":1544416836551},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/PWAR-014+PWA.jpeg","hash":"d0b0a334794836ec0f5b24756ce62e3f97b62a36","modified":1544416836551},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/PWAR-007.jpeg","hash":"33247bc1905a4652c4f0f21a8aebf2d57a8a9f0f","modified":1544416836551},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/sw-lifecycle.png","hash":"0ff408ffc69db8eafa13739adf187d55e21e9ad1","modified":1544416836551},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1544416836584},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1544416836585},{"_id":"public/intro/404.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1544416836585},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1544416836585},{"_id":"public/assets/img/about-bg-o.jpg","hash":"dfc934ecf8ef879152f5e84dd02607acecfeeb74","modified":1544416836585},{"_id":"public/assets/img/post-bg-alitrip.jpg","hash":"85ed57fcc37b72e63b222bb660dd64a13797d069","modified":1544416836585},{"_id":"public/assets/img/404-bg.jpg","hash":"d0b39d9359528ab82c62ca148966f054ccdcefe6","modified":1544416836585},{"_id":"public/assets/img/post-bg-2015.jpg","hash":"e5d68d31f507de3b0879143851211c851b9de203","modified":1544416836586},{"_id":"public/assets/img/post-bg-os-metro.jpg","hash":"99ac866d9b175dc291f1a5424615f1115b5fa212","modified":1544416836586},{"_id":"public/assets/img/post-bg-e2e-ux.jpg","hash":"582b0858909926b686da00c87e8dfe1dd34d16c8","modified":1544416836586},{"_id":"public/assets/img/post-bg-re-vs-ng2.jpg","hash":"37b2997d6c867612ef4f69397dcc61f8ac50b0a0","modified":1544416836586},{"_id":"public/assets/img/post-bg-see-u-ali.jpg","hash":"1480d5e8560f9c5b96e3d57367f7d4e3c3461c1b","modified":1544416836586},{"_id":"public/assets/img/post-bg-universe.jpg","hash":"c4211a26db1de13ad0f79279597d1a49f544382a","modified":1544416836586},{"_id":"public/assets/img/post-bg-unix-linux.jpg","hash":"2e7229df40b47937c5a16a6f1230ce173a044ad4","modified":1544416836586},{"_id":"public/assets/img/in-post/forcify.jpg","hash":"5f9e1cc26bdea213b08b85fb22081a5601a8f525","modified":1544416836586},{"_id":"public/assets/img/in-post/post-kuaidi-1.jpg","hash":"54cbc6a834ee29448959c3f466393c8e39370072","modified":1544416836586},{"_id":"public/assets/img/in-post/post-metro-panorama.jpg","hash":"42c695afc4477743ab628bd9c2298382361437ca","modified":1544416836586},{"_id":"public/assets/img/in-post/post-metro-ui.jpg","hash":"48eae1424da4f171abcf4bc0e2875b2e89c79f1b","modified":1544416836586},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.013.jpg","hash":"d2581bc91cfd0493565829a7a2b3a4bee2ca9d1b","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.016.jpg","hash":"3a645f517c0792d85b8b1de351bca2cc5e421270","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.014.jpg","hash":"271305705f265b34a530ff7d2fc42f17846342b4","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.019.jpg","hash":"27d1caa6f3a673b537f15a2dd17740a50667859f","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.021.jpg","hash":"97c14902278cbd0d00ea32783e872af4156b8e14","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.020.jpg","hash":"d813311dde22ffdaaed0f8099860ec2e1ca84965","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.023.jpg","hash":"4a94fbc9f8070a5ceb717e32f25a8fa74abaed76","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.026.jpg","hash":"42c8082cf1b99e487dff31f8cd9c1fddab52a1e3","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.028.jpg","hash":"6b65fc4114c2e06860f7a2495933e087d42a5911","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.030.jpg","hash":"a1ecf1f2c5c1506eb55c005bcd034683f72cc943","modified":1544416836587},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.029.jpg","hash":"479225bfc517d1e04707f6b6c4af35646c1b4246","modified":1544416836587},{"_id":"public/assets/img/in-post/post-eleme-pwa/msite-After-Optim.png","hash":"489bf8fc9e37f6dca0d0490c6b6c509350279ea6","modified":1544416836587},{"_id":"public/assets/img/in-post/post-eleme-pwa/msite-Before-Optim.png","hash":"9fa61e09e87cccd5d191cd1ee2a7e7817bb58ad9","modified":1544416836588},{"_id":"public/assets/img/in-post/post-eleme-pwa/nextTick-&-Load.png","hash":"0c71affe16b4798a18a8f80a756c884f6162173f","modified":1544416836588},{"_id":"public/assets/img/in-post/post-js-version/javascript-java.jpg","hash":"881e35e241a8be40f3c4e3a6f57d5402247c1eb3","modified":1544416836588},{"_id":"public/assets/img/in-post/post-eleme-pwa/thisTick-&-Load.png","hash":"1bbdaf058920c7fe6eaca300197773ad0c21e5ec","modified":1544416836588},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/flipkart-1.jpeg","hash":"40ac18cdb7f99a53025a60fd4600282b8fd46b72","modified":1544416836588},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/ios2-a2hs.gif","hash":"7c11cdf130fd6d40e5b606970673a3b387cd61d9","modified":1544416836588},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/flipkart-2.jpeg","hash":"02a8f2abd319953312d4db97553acd26761d352d","modified":1544416836588},{"_id":"public/scripts/main.js","hash":"7374a2d1722c8b6acbea18c812f42966a9e5caff","modified":1544416836594},{"_id":"public/css/style.css","hash":"67e23442837c5815a016c5a4e511c0b70face18f","modified":1544416836594},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/flipkart-3.jpeg","hash":"f3863c39b36175e85114baf4febd0cfe4ce4c3c2","modified":1544416836594},{"_id":"public/assets/img/contact-bg.jpg","hash":"2c925277b1d405774a8351d1896b6011049136ae","modified":1544416836594},{"_id":"public/assets/img/home-bg.jpg","hash":"5cd7098815eff29e373f485bd8a45092911cee7e","modified":1544416836594},{"_id":"public/assets/img/in-post/post-metro-real.jpg","hash":"995f04b56698842817783ad91144b34c782c27e2","modified":1544416836595},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/qcon-trend.png","hash":"7e35d1d3949302bee2fd7b1f27881a0778993c32","modified":1544416836595},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/qcon-hybridzation.png","hash":"64c38590980057897f81ee3bd37094f618c5f5d3","modified":1544416836595},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/sw-sw.png","hash":"f5545b4f1de410b0b79349229d525d1c1e938a11","modified":1544416836595},{"_id":"public/intro/about-page.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1544416836598},{"_id":"public/assets/img/in-post/post-c-u-ali-memo.jpg","hash":"49089db9f705e793c59f6d46603110553781d89c","modified":1544416836598},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.031.jpg","hash":"8204a2c4b75402f6cecfc48e311f20074066c6d7","modified":1544416836598},{"_id":"public/assets/img/in-post/post-eleme-pwa/before-skeleton.jpg","hash":"acc2ece7ea328791bc8c5b2c00addbb6771306e9","modified":1544416836598},{"_id":"public/assets/img/in-post/post-eleme-pwa/after-skeleton.jpg","hash":"1857707c74fcc77da176b6b4ddfdf3c896a4d14c","modified":1544416836599},{"_id":"public/assets/img/in-post/post-nextgen-web-pwa/sw-race.png","hash":"6b1a64c0c1190428a09c683626355252b1f1f8d8","modified":1544416836599},{"_id":"public/avatar/avatar.jpg","hash":"31f88e9f01cb534295db44a66f416f6db3661ed7","modified":1544416836603},{"_id":"public/intro/intro-desktop.jpg","hash":"878b8818b36e8eb00a49458a16e0d0c3c020d0b7","modified":1544416836603},{"_id":"public/assets/img/in-post/post-eleme-pwa/eleme-at-io.jpg","hash":"10d854075895fd37bcd53a9669abed92f0b77ce2","modified":1544416836603},{"_id":"public/assets/img/in-post/post-alitrip-pd/post-alitrip-pd.018.jpg","hash":"b57e838b68544a49086df589819f23234ab0bbe6","modified":1544416836603},{"_id":"public/assets/img/in-post/post-eleme-pwa/PUSH-link-rel-preload.jpg","hash":"5360f20d14743bfd7da5b246aa887a0254b931c6","modified":1544416836614},{"_id":"public/assets/img/in-post/post-eleme-pwa/PRECACHE-future-routes.jpg","hash":"eb5f856dca01a517cd92639f927002e6c502a59c","modified":1544416836639},{"_id":"public/assets/img/in-post/post-eleme-pwa/Architecture.png","hash":"ea0213e2081aa8b0f6722f1d03536b01c84f0a8a","modified":1544416836639},{"_id":"public/intro/post-bg.jpg","hash":"0b34239a890ef5945f78bf204bba8c29d8828c8e","modified":1544416836801},{"_id":"public/assets/img/in-post/post-c-u-ali-team.png","hash":"9241826a0b593304c3e87f0950a4e090a89bbcc7","modified":1544416836802}],"Category":[{"name":"JavaScript","_id":"cjp5ezme20004hks27966ww12"}],"Data":[],"Page":[{"layout":"404","title":"[404]","description":"May the Force be with you :&#41;","_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: \"[404]\"\ndescription: \"May the Force be with you :&#41;\"\n---","date":"2018-11-30T05:16:41.848Z","updated":"2018-11-30T05:16:41.848Z","path":"404.html","_id":"cjp5ezmde0000hks2j47abfjc","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"This is my self introduction.","layout":"about","_content":"\nThis is my self introduction.\n","source":"about/index.md","raw":"---\ntitle: This is my self introduction.\nlayout: about\n---\n\nThis is my self introduction.\n","date":"2018-11-30T05:16:41.858Z","updated":"2018-11-30T05:16:41.858Z","path":"about/index.html","_id":"cjp5ezmdz0002hks2iakbocgl","comments":1,"content":"<p>This is my self introduction.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is my self introduction.</p>\n"}],"Post":[{"title":"JavaScript模块化语法总结","date":"2017-12-28T16:28:16.000Z","description":"服务端模块化规范","_content":"\n# CommonJS 服务端模块化规范\n\n# AMD/CMD 浏览器（客户端）模块化规范\n\n```javascript\nvar math = require('math')\n\nmath.add(2, 3)\n```\n\n第二行 math.add(2, 3)，在第一行 require('math')之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n\n这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是 AMD 规范诞生的背景。\n\n### AMD 规范的模块化插件（require.js 和 curl.js）\n\n使用的是 require 导入模块\n\n```javascript\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n\n　　　　// some code here\n\n　　});\nrequire会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；\n\n\n//指定路径\n\nrequire.config({\n       baseUrl:'js/lib',//放置公共路径\n　　　　paths: {\n\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n\n　　　　}\n\n　　});\n```\n\n### AMD 模块规范写法\n\n- 五、AMD 模块的写法\n\nrequire.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。\n\n具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在`define()`函数之中。\n\n假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：\n\n```javascript\n　　// math.js\n\n　　define(function (){\n\n　　　　var add = function (x,y){\n\n　　　　　　return x+y;\n\n　　　　};\n\n　　　　return {\n\n　　　　　　add: add\n　　　　};\n\n　　});\n\n加载方法如下：\n\n　　// main.js\n\n　　require(['math'], function (math){\n\n　　　　alert(math.add(1,1));\n\n　　});\n```\n","source":"_posts/JavaScript-modules.md","raw":"---\ntitle: JavaScript模块化语法总结 #文章页面上的显示名称，一般是中文\ndate: 2017-12-29 00:28:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: JavaScript #分类\ntags: [模块化, 规范, JS] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 服务端模块化规范 #附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面\n---\n\n# CommonJS 服务端模块化规范\n\n# AMD/CMD 浏览器（客户端）模块化规范\n\n```javascript\nvar math = require('math')\n\nmath.add(2, 3)\n```\n\n第二行 math.add(2, 3)，在第一行 require('math')之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n\n这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是 AMD 规范诞生的背景。\n\n### AMD 规范的模块化插件（require.js 和 curl.js）\n\n使用的是 require 导入模块\n\n```javascript\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n\n　　　　// some code here\n\n　　});\nrequire会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；\n\n\n//指定路径\n\nrequire.config({\n       baseUrl:'js/lib',//放置公共路径\n　　　　paths: {\n\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n\n　　　　}\n\n　　});\n```\n\n### AMD 模块规范写法\n\n- 五、AMD 模块的写法\n\nrequire.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。\n\n具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在`define()`函数之中。\n\n假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：\n\n```javascript\n　　// math.js\n\n　　define(function (){\n\n　　　　var add = function (x,y){\n\n　　　　　　return x+y;\n\n　　　　};\n\n　　　　return {\n\n　　　　　　add: add\n　　　　};\n\n　　});\n\n加载方法如下：\n\n　　// main.js\n\n　　require(['math'], function (math){\n\n　　　　alert(math.add(1,1));\n\n　　});\n```\n","slug":"JavaScript-modules","published":1,"updated":"2018-11-30T05:16:41.852Z","_id":"cjp5ezmdx0001hks2a7xx3wum","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CommonJS-服务端模块化规范\"><a href=\"#CommonJS-服务端模块化规范\" class=\"headerlink\" title=\"CommonJS 服务端模块化规范\"></a>CommonJS 服务端模块化规范</h1><h1 id=\"AMD-CMD-浏览器（客户端）模块化规范\"><a href=\"#AMD-CMD-浏览器（客户端）模块化规范\" class=\"headerlink\" title=\"AMD/CMD 浏览器（客户端）模块化规范\"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>\n<h3 id=\"AMD-规范的模块化插件（require-js-和-curl-js）\"><a href=\"#AMD-规范的模块化插件（require-js-和-curl-js）\" class=\"headerlink\" title=\"AMD 规范的模块化插件（require.js 和 curl.js）\"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>, <span class=\"string\">'backbone'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _, Backbone</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">       baseUrl:<span class=\"string\">'js/lib'</span>,<span class=\"comment\">//放置公共路径</span></span><br><span class=\"line\">　　　　paths: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jquery.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"underscore\"</span>: <span class=\"string\">\"underscore.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"backbone\"</span>: <span class=\"string\">\"backbone.min\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"AMD-模块规范写法\"><a href=\"#AMD-模块规范写法\" class=\"headerlink\" title=\"AMD 模块规范写法\"></a>AMD 模块规范写法</h3><ul>\n<li>五、AMD 模块的写法</li>\n</ul>\n<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>\n<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>\n<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"comment\">// math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　add: add</span><br><span class=\"line\">　　　　&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">加载方法如下：</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">require</span>([<span class=\"string\">'math'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">math</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　alert(math.add(<span class=\"number\">1</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CommonJS-服务端模块化规范\"><a href=\"#CommonJS-服务端模块化规范\" class=\"headerlink\" title=\"CommonJS 服务端模块化规范\"></a>CommonJS 服务端模块化规范</h1><h1 id=\"AMD-CMD-浏览器（客户端）模块化规范\"><a href=\"#AMD-CMD-浏览器（客户端）模块化规范\" class=\"headerlink\" title=\"AMD/CMD 浏览器（客户端）模块化规范\"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">'math'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>\n<h3 id=\"AMD-规范的模块化插件（require-js-和-curl-js）\"><a href=\"#AMD-规范的模块化插件（require-js-和-curl-js）\" class=\"headerlink\" title=\"AMD 规范的模块化插件（require.js 和 curl.js）\"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>, <span class=\"string\">'backbone'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _, Backbone</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">       baseUrl:<span class=\"string\">'js/lib'</span>,<span class=\"comment\">//放置公共路径</span></span><br><span class=\"line\">　　　　paths: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jquery.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"underscore\"</span>: <span class=\"string\">\"underscore.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"backbone\"</span>: <span class=\"string\">\"backbone.min\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"AMD-模块规范写法\"><a href=\"#AMD-模块规范写法\" class=\"headerlink\" title=\"AMD 模块规范写法\"></a>AMD 模块规范写法</h3><ul>\n<li>五、AMD 模块的写法</li>\n</ul>\n<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>\n<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>\n<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　<span class=\"comment\">// math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　define(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x,y</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"keyword\">return</span> x+y;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　add: add</span><br><span class=\"line\">　　　　&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">加载方法如下：</span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"built_in\">require</span>([<span class=\"string\">'math'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">math</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　alert(math.add(<span class=\"number\">1</span>,<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」","subtitle":"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?","date":"2015-09-21T16:00:00.000Z","author":"Hux","header-img":"img/post-bg-js-version.jpg","_content":"\nJavaScript 有着很奇怪的命名史。\n\n1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript _（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）_\n\n![java-javascript](/assets/img/in-post/post-js-version/javascript-java.jpg)\n<small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small>\n\n> 译者注：[wikipedia 的 JavaScript 词条](https://en.wikipedia.org/wiki/JavaScript#History) 更详细的叙述了这段历史\n\n1996 年，网景将 JavaScript 提交给 [ECMA International（欧洲计算机制造商协会）](http://www.ecma-international.org/) 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。\n\n> 术语（译者注）：\n>\n> - _标准（Standard）_： 用于定义与其他事物区别的一套规则\n> - _实现（Implementation）_： 某个标准的具体实施/真实实践\n\n不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。\n\n> 译者注：[ECMAScript 第四版草案](https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29)由于太过激进而被抛弃，Adobe 的 [ActionScript 3.0](https://en.wikipedia.org/wiki/ActionScript) 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）\n\n到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）\n\n目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 [decorators（装饰者）](https://github.com/wycats/javascript-decorators)，[async-await（async-await 异步编程模型）](https://github.com/lukehoban/ecmascript-asyncawait) 和 [static class properties（静态类属性）](https://github.com/jeffmo/es-class-properties)。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 [Babel 的官网](https://babeljs.io/docs/usage/experimental/) 上查看各个提案目前都在哪个阶段了。\n\n所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：\n\n- **ECMAScript**：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。\n- **JavaScript**：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。\n- **ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。\n- **ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅[这张兼容性表](http://kangax.github.io/compat-table/es6/)来查看不同浏览器和工具的实现情况。\n- **ECMAScript 2016**：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定\n- **ECMAScript Proposals**：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。\n\n在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。\n\n#### 一些资源\n\n- TC39 的 [Github 仓库](https://github.com/tc39/ecma262)上可以看到所有目前公开的提案\n- 如果你还不熟悉 ES6，Babel 有一个[很不错的特性概览](https://babeljs.io/docs/learn-es2015/)\n- 如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 [Exploring ES6](http://exploringjs.com/)和 Nicholas Zakas 的 [Understanding ECMAScript 6](https://leanpub.com/understandinges6)。Axel 的博客 [2ality](http://www.2ality.com/) 也是很不错的 ES6 资源\n\n<img class=\"shadow\" width=\"320\" src=\"/assets/img/in-post/post-js-version/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n#### 著作权声明\n\n本文译自 [ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?](http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/)\n译者 [黄玄](http://weibo.com/huxpro)，首次发布于 [Hux Blog](http://huangxuan.me)，转载请保留以上链接\n","source":"_posts/2015-09-22-js-version.md","raw":"---\nlayout: post\ntitle: 'ES5, ES6, ES2016, ES.Next: JavaScript 的版本是怎么回事？「译」'\nsubtitle: \"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?\"\ndate: 2015-09-22\nauthor: 'Hux'\nheader-img: 'img/post-bg-js-version.jpg'\ntags:\n  - 前端开发\n  - JavaScript\n  - 翻译\n---\n\nJavaScript 有着很奇怪的命名史。\n\n1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript _（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）_\n\n![java-javascript](/assets/img/in-post/post-js-version/javascript-java.jpg)\n<small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small>\n\n> 译者注：[wikipedia 的 JavaScript 词条](https://en.wikipedia.org/wiki/JavaScript#History) 更详细的叙述了这段历史\n\n1996 年，网景将 JavaScript 提交给 [ECMA International（欧洲计算机制造商协会）](http://www.ecma-international.org/) 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。\n\n> 术语（译者注）：\n>\n> - _标准（Standard）_： 用于定义与其他事物区别的一套规则\n> - _实现（Implementation）_： 某个标准的具体实施/真实实践\n\n不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。\n\n> 译者注：[ECMAScript 第四版草案](https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29)由于太过激进而被抛弃，Adobe 的 [ActionScript 3.0](https://en.wikipedia.org/wiki/ActionScript) 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）\n\n到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）\n\n目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 [decorators（装饰者）](https://github.com/wycats/javascript-decorators)，[async-await（async-await 异步编程模型）](https://github.com/lukehoban/ecmascript-asyncawait) 和 [static class properties（静态类属性）](https://github.com/jeffmo/es-class-properties)。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 [Babel 的官网](https://babeljs.io/docs/usage/experimental/) 上查看各个提案目前都在哪个阶段了。\n\n所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：\n\n- **ECMAScript**：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。\n- **JavaScript**：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。\n- **ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。\n- **ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅[这张兼容性表](http://kangax.github.io/compat-table/es6/)来查看不同浏览器和工具的实现情况。\n- **ECMAScript 2016**：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定\n- **ECMAScript Proposals**：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。\n\n在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。\n\n#### 一些资源\n\n- TC39 的 [Github 仓库](https://github.com/tc39/ecma262)上可以看到所有目前公开的提案\n- 如果你还不熟悉 ES6，Babel 有一个[很不错的特性概览](https://babeljs.io/docs/learn-es2015/)\n- 如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 [Exploring ES6](http://exploringjs.com/)和 Nicholas Zakas 的 [Understanding ECMAScript 6](https://leanpub.com/understandinges6)。Axel 的博客 [2ality](http://www.2ality.com/) 也是很不错的 ES6 资源\n\n<img class=\"shadow\" width=\"320\" src=\"/assets/img/in-post/post-js-version/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n#### 著作权声明\n\n本文译自 [ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?](http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/)\n译者 [黄玄](http://weibo.com/huxpro)，首次发布于 [Hux Blog](http://huangxuan.me)，转载请保留以上链接\n","slug":"2015-09-22-js-version","published":1,"updated":"2018-11-30T05:16:41.850Z","_id":"cjp5ezmdz0003hks2s66pi5cm","comments":1,"photos":[],"link":"","content":"<p>JavaScript 有着很奇怪的命名史。</p>\n<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>\n<p><img src=\"/assets/img/in-post/post-js-version/javascript-java.jpg\" alt=\"java-javascript\"><br><small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small></p>\n<blockquote>\n<p>译者注：<a href=\"https://en.wikipedia.org/wiki/JavaScript#History\" target=\"_blank\" rel=\"noopener\">wikipedia 的 JavaScript 词条</a> 更详细的叙述了这段历史</p>\n</blockquote>\n<p>1996 年，网景将 JavaScript 提交给 <a href=\"http://www.ecma-international.org/\" target=\"_blank\" rel=\"noopener\">ECMA International（欧洲计算机制造商协会）</a> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>\n<blockquote>\n<p>术语（译者注）：</p>\n<ul>\n<li><em>标准（Standard）</em>： 用于定义与其他事物区别的一套规则</li>\n<li><em>实现（Implementation）</em>： 某个标准的具体实施/真实实践</li>\n</ul>\n</blockquote>\n<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>\n<blockquote>\n<p>译者注：<a href=\"https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29\" target=\"_blank\" rel=\"noopener\">ECMAScript 第四版草案</a>由于太过激进而被抛弃，Adobe 的 <a href=\"https://en.wikipedia.org/wiki/ActionScript\" target=\"_blank\" rel=\"noopener\">ActionScript 3.0</a> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>\n</blockquote>\n<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>\n<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <a href=\"https://github.com/wycats/javascript-decorators\" target=\"_blank\" rel=\"noopener\">decorators（装饰者）</a>，<a href=\"https://github.com/lukehoban/ecmascript-asyncawait\" target=\"_blank\" rel=\"noopener\">async-await（async-await 异步编程模型）</a> 和 <a href=\"https://github.com/jeffmo/es-class-properties\" target=\"_blank\" rel=\"noopener\">static class properties（静态类属性）</a>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <a href=\"https://babeljs.io/docs/usage/experimental/\" target=\"_blank\" rel=\"noopener\">Babel 的官网</a> 上查看各个提案目前都在哪个阶段了。</p>\n<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>\n<ul>\n<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>\n<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>\n<li><strong>ECMAScript 5 (ES5)</strong>：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>\n<li><strong>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)</strong>：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<a href=\"http://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"noopener\">这张兼容性表</a>来查看不同浏览器和工具的实现情况。</li>\n<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>\n<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>\n</ul>\n<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>\n<h4 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h4><ul>\n<li>TC39 的 <a href=\"https://github.com/tc39/ecma262\" target=\"_blank\" rel=\"noopener\">Github 仓库</a>上可以看到所有目前公开的提案</li>\n<li>如果你还不熟悉 ES6，Babel 有一个<a href=\"https://babeljs.io/docs/learn-es2015/\" target=\"_blank\" rel=\"noopener\">很不错的特性概览</a></li>\n<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <a href=\"http://exploringjs.com/\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a>和 Nicholas Zakas 的 <a href=\"https://leanpub.com/understandinges6\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a>。Axel 的博客 <a href=\"http://www.2ality.com/\" target=\"_blank\" rel=\"noopener\">2ality</a> 也是很不错的 ES6 资源</li>\n</ul>\n<p><img class=\"shadow\" width=\"320\" src=\"/assets/img/in-post/post-js-version/keep-calm-and-learn-javascript.png\"><br><small class=\"img-hint\">来学 JavaScript 吧！</small></p>\n<h4 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h4><p>本文译自 <a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\" target=\"_blank\" rel=\"noopener\">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?</a><br>译者 <a href=\"http://weibo.com/huxpro\" target=\"_blank\" rel=\"noopener\">黄玄</a>，首次发布于 <a href=\"http://huangxuan.me\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>，转载请保留以上链接</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript 有着很奇怪的命名史。</p>\n<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>\n<p><img src=\"/assets/img/in-post/post-js-version/javascript-java.jpg\" alt=\"java-javascript\"><br><small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small></p>\n<blockquote>\n<p>译者注：<a href=\"https://en.wikipedia.org/wiki/JavaScript#History\" target=\"_blank\" rel=\"noopener\">wikipedia 的 JavaScript 词条</a> 更详细的叙述了这段历史</p>\n</blockquote>\n<p>1996 年，网景将 JavaScript 提交给 <a href=\"http://www.ecma-international.org/\" target=\"_blank\" rel=\"noopener\">ECMA International（欧洲计算机制造商协会）</a> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>\n<blockquote>\n<p>术语（译者注）：</p>\n<ul>\n<li><em>标准（Standard）</em>： 用于定义与其他事物区别的一套规则</li>\n<li><em>实现（Implementation）</em>： 某个标准的具体实施/真实实践</li>\n</ul>\n</blockquote>\n<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>\n<blockquote>\n<p>译者注：<a href=\"https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29\" target=\"_blank\" rel=\"noopener\">ECMAScript 第四版草案</a>由于太过激进而被抛弃，Adobe 的 <a href=\"https://en.wikipedia.org/wiki/ActionScript\" target=\"_blank\" rel=\"noopener\">ActionScript 3.0</a> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>\n</blockquote>\n<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>\n<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <a href=\"https://github.com/wycats/javascript-decorators\" target=\"_blank\" rel=\"noopener\">decorators（装饰者）</a>，<a href=\"https://github.com/lukehoban/ecmascript-asyncawait\" target=\"_blank\" rel=\"noopener\">async-await（async-await 异步编程模型）</a> 和 <a href=\"https://github.com/jeffmo/es-class-properties\" target=\"_blank\" rel=\"noopener\">static class properties（静态类属性）</a>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <a href=\"https://babeljs.io/docs/usage/experimental/\" target=\"_blank\" rel=\"noopener\">Babel 的官网</a> 上查看各个提案目前都在哪个阶段了。</p>\n<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>\n<ul>\n<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>\n<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>\n<li><strong>ECMAScript 5 (ES5)</strong>：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>\n<li><strong>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)</strong>：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<a href=\"http://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"noopener\">这张兼容性表</a>来查看不同浏览器和工具的实现情况。</li>\n<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>\n<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>\n</ul>\n<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>\n<h4 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h4><ul>\n<li>TC39 的 <a href=\"https://github.com/tc39/ecma262\" target=\"_blank\" rel=\"noopener\">Github 仓库</a>上可以看到所有目前公开的提案</li>\n<li>如果你还不熟悉 ES6，Babel 有一个<a href=\"https://babeljs.io/docs/learn-es2015/\" target=\"_blank\" rel=\"noopener\">很不错的特性概览</a></li>\n<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <a href=\"http://exploringjs.com/\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a>和 Nicholas Zakas 的 <a href=\"https://leanpub.com/understandinges6\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a>。Axel 的博客 <a href=\"http://www.2ality.com/\" target=\"_blank\" rel=\"noopener\">2ality</a> 也是很不错的 ES6 资源</li>\n</ul>\n<p><img class=\"shadow\" width=\"320\" src=\"/assets/img/in-post/post-js-version/keep-calm-and-learn-javascript.png\"><br><small class=\"img-hint\">来学 JavaScript 吧！</small></p>\n<h4 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h4><p>本文译自 <a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\" target=\"_blank\" rel=\"noopener\">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?</a><br>译者 <a href=\"http://weibo.com/huxpro\" target=\"_blank\" rel=\"noopener\">黄玄</a>，首次发布于 <a href=\"http://huangxuan.me\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>，转载请保留以上链接</p>\n"},{"layout":"post","title":"DayJs使用","subtitle":"eslint-vscode-setting","date":"2018-11-29T16:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","_content":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"550\"\n                                                                             src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\"\n                                                                             alt=\"Day.js\"></a></p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<br>\n<p align=\"center\">\n    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\"><img\n            src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n            alt=\"Gzip Size\"></a>\n    <a href=\"https://www.npmjs.com/package/dayjs\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\"\n                                                       alt=\"NPM Version\"></a>\n    <a href=\"https://travis-ci.org/iamkun/dayjs\"><img\n            src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\"></a>\n    <a href=\"https://codecov.io/gh/iamkun/dayjs\"><img\n            src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\"></a>\n    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\"><img\n            src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n    <br>\n    <a href=\"https://saucelabs.com/u/dayjs\">\n        <img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n    </a>\n</p>\n\n> Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js\n\n```js\ndayjs().startOf('month').add(1, 'day').set('year', 2018).format('YYYY-MM-DD HH:mm:ss');\n```\n\n* 🕒 和 Moment.js 相同的 API 和用法\n* 💪 不可变数据 (Immutable)\n* 🔥 支持链式操作 (Chainable)\n* 🌐 国际化 I18n\n* 📦 仅 2kb 大小的微型库\n* 👫 全浏览器兼容\n---\n\n## 快速开始\n\n### 安装\n\n```console\nnpm install dayjs --save\n```\n\n📚[安装指南](./Installation.md)\n\n### API\n\nDay.js 有很多 API 来解析、处理、校验、增减、展示时间和日期\n\n```javascript\ndayjs('2018-08-08') // 解析\n\ndayjs().format('{YYYY} MM-DDTHH:mm:ss SSS [Z] A') // 展示\n\ndayjs().set('month', 3).month() // 获取\n\ndayjs().add(1, 'year') // 处理\n\ndayjs().isBefore(dayjs()) // 查询\n```\n\n📚[API 参考](./API-reference.md)\n\n### 国际化 I18n\n\nDay.js 支持国际化\n\n但除非手动加载，多国语言默认是不会被打包到工程里的\n\n```javascript\nimport 'dayjs/locale/es' // 按需加载\n\ndayjs.locale('es') // 全局使用西班牙语\n\ndayjs('2018-05-05').locale('zh-cn').format() // 在这个实例上使用简体中文\n```\n📚[国际化 I18n](./I18n.md)\n\n### 插件\n\n插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能\n\n```javascript\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // 按需加载插件\n\ndayjs.extend(advancedFormat) // 使用插件\n\ndayjs().format('Q Do k kk X x') // 使用扩展后的API\n```\n📚[插件列表](./Plugin.md)\n\n## 开源协议\n\nDay.js 遵循 [MIT 开源协议](../../LICENSE).\n","source":"_posts/DayJs.md","raw":"---\nlayout: post\ntitle: 'DayJs使用'\nsubtitle: \"eslint-vscode-setting\"\ndate: 2018-11-30\nauthor: 'Mark'\nheader-img: 'img/post-bg-js-version.jpg'\ntags:\n  - 前端开发\n  - JavaScript\n  - JS时间处理\n---\n<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"550\"\n                                                                             src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\"\n                                                                             alt=\"Day.js\"></a></p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<br>\n<p align=\"center\">\n    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\"><img\n            src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n            alt=\"Gzip Size\"></a>\n    <a href=\"https://www.npmjs.com/package/dayjs\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\"\n                                                       alt=\"NPM Version\"></a>\n    <a href=\"https://travis-ci.org/iamkun/dayjs\"><img\n            src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\"></a>\n    <a href=\"https://codecov.io/gh/iamkun/dayjs\"><img\n            src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\"></a>\n    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\"><img\n            src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n    <br>\n    <a href=\"https://saucelabs.com/u/dayjs\">\n        <img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n    </a>\n</p>\n\n> Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js\n\n```js\ndayjs().startOf('month').add(1, 'day').set('year', 2018).format('YYYY-MM-DD HH:mm:ss');\n```\n\n* 🕒 和 Moment.js 相同的 API 和用法\n* 💪 不可变数据 (Immutable)\n* 🔥 支持链式操作 (Chainable)\n* 🌐 国际化 I18n\n* 📦 仅 2kb 大小的微型库\n* 👫 全浏览器兼容\n---\n\n## 快速开始\n\n### 安装\n\n```console\nnpm install dayjs --save\n```\n\n📚[安装指南](./Installation.md)\n\n### API\n\nDay.js 有很多 API 来解析、处理、校验、增减、展示时间和日期\n\n```javascript\ndayjs('2018-08-08') // 解析\n\ndayjs().format('{YYYY} MM-DDTHH:mm:ss SSS [Z] A') // 展示\n\ndayjs().set('month', 3).month() // 获取\n\ndayjs().add(1, 'year') // 处理\n\ndayjs().isBefore(dayjs()) // 查询\n```\n\n📚[API 参考](./API-reference.md)\n\n### 国际化 I18n\n\nDay.js 支持国际化\n\n但除非手动加载，多国语言默认是不会被打包到工程里的\n\n```javascript\nimport 'dayjs/locale/es' // 按需加载\n\ndayjs.locale('es') // 全局使用西班牙语\n\ndayjs('2018-05-05').locale('zh-cn').format() // 在这个实例上使用简体中文\n```\n📚[国际化 I18n](./I18n.md)\n\n### 插件\n\n插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能\n\n```javascript\nimport advancedFormat from 'dayjs/plugin/advancedFormat' // 按需加载插件\n\ndayjs.extend(advancedFormat) // 使用插件\n\ndayjs().format('Q Do k kk X x') // 使用扩展后的API\n```\n📚[插件列表](./Plugin.md)\n\n## 开源协议\n\nDay.js 遵循 [MIT 开源协议](../../LICENSE).\n","slug":"DayJs","published":1,"updated":"2018-11-30T10:02:21.891Z","_id":"cjp5ezme30006hks2yos5gqmx","comments":1,"photos":[],"link":"","content":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"550\" src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\"></a></p><br><p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p><br><br><br><p align=\"center\"><br>    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\" target=\"_blank\" rel=\"noopener\"><img src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\" alt=\"Gzip Size\"></a><br>    <a href=\"https://www.npmjs.com/package/dayjs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a><br>    <a href=\"https://travis-ci.org/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\"></a><br>    <a href=\"https://codecov.io/gh/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\"></a><br>    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a><br>    <br><br>    <a href=\"https://saucelabs.com/u/dayjs\" target=\"_blank\" rel=\"noopener\"><br>        <img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\"><br>    </a><br></p>\n\n<blockquote>\n<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs().startOf(<span class=\"string\">'month'</span>).add(<span class=\"number\">1</span>, <span class=\"string\">'day'</span>).set(<span class=\"string\">'year'</span>, <span class=\"number\">2018</span>).format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>🕒 和 Moment.js 相同的 API 和用法</li>\n<li>💪 不可变数据 (Immutable)</li>\n<li>🔥 支持链式操作 (Chainable)</li>\n<li>🌐 国际化 I18n</li>\n<li>📦 仅 2kb 大小的微型库</li>\n<li>👫 全浏览器兼容</li>\n</ul>\n<hr>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install dayjs --save</span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./Installation.md\">安装指南</a></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs(<span class=\"string\">'2018-08-08'</span>) <span class=\"comment\">// 解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">'&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A'</span>) <span class=\"comment\">// 展示</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().set(<span class=\"string\">'month'</span>, <span class=\"number\">3</span>).month() <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().add(<span class=\"number\">1</span>, <span class=\"string\">'year'</span>) <span class=\"comment\">// 处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().isBefore(dayjs()) <span class=\"comment\">// 查询</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./API-reference.md\">API 参考</a></p>\n<h3 id=\"国际化-I18n\"><a href=\"#国际化-I18n\" class=\"headerlink\" title=\"国际化 I18n\"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>\n<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dayjs/locale/es'</span> <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.locale(<span class=\"string\">'es'</span>) <span class=\"comment\">// 全局使用西班牙语</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs(<span class=\"string\">'2018-05-05'</span>).locale(<span class=\"string\">'zh-cn'</span>).format() <span class=\"comment\">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./I18n.md\">国际化 I18n</a></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> advancedFormat <span class=\"keyword\">from</span> <span class=\"string\">'dayjs/plugin/advancedFormat'</span> <span class=\"comment\">// 按需加载插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.extend(advancedFormat) <span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">'Q Do k kk X x'</span>) <span class=\"comment\">// 使用扩展后的API</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./Plugin.md\">插件列表</a></p>\n<h2 id=\"开源协议\"><a href=\"#开源协议\" class=\"headerlink\" title=\"开源协议\"></a>开源协议</h2><p>Day.js 遵循 <a href=\"../../LICENSE\">MIT 开源协议</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><img width=\"550\" src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\"></a></p><br><p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p><br><br><br><p align=\"center\"><br>    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\" target=\"_blank\" rel=\"noopener\"><img src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\" alt=\"Gzip Size\"></a><br>    <a href=\"https://www.npmjs.com/package/dayjs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a><br>    <a href=\"https://travis-ci.org/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\"></a><br>    <a href=\"https://codecov.io/gh/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\"></a><br>    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a><br>    <br><br>    <a href=\"https://saucelabs.com/u/dayjs\" target=\"_blank\" rel=\"noopener\"><br>        <img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\"><br>    </a><br></p>\n\n<blockquote>\n<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs().startOf(<span class=\"string\">'month'</span>).add(<span class=\"number\">1</span>, <span class=\"string\">'day'</span>).set(<span class=\"string\">'year'</span>, <span class=\"number\">2018</span>).format(<span class=\"string\">'YYYY-MM-DD HH:mm:ss'</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>🕒 和 Moment.js 相同的 API 和用法</li>\n<li>💪 不可变数据 (Immutable)</li>\n<li>🔥 支持链式操作 (Chainable)</li>\n<li>🌐 国际化 I18n</li>\n<li>📦 仅 2kb 大小的微型库</li>\n<li>👫 全浏览器兼容</li>\n</ul>\n<hr>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install dayjs --save</span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./Installation.md\">安装指南</a></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs(<span class=\"string\">'2018-08-08'</span>) <span class=\"comment\">// 解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">'&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A'</span>) <span class=\"comment\">// 展示</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().set(<span class=\"string\">'month'</span>, <span class=\"number\">3</span>).month() <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().add(<span class=\"number\">1</span>, <span class=\"string\">'year'</span>) <span class=\"comment\">// 处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().isBefore(dayjs()) <span class=\"comment\">// 查询</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./API-reference.md\">API 参考</a></p>\n<h3 id=\"国际化-I18n\"><a href=\"#国际化-I18n\" class=\"headerlink\" title=\"国际化 I18n\"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>\n<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'dayjs/locale/es'</span> <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.locale(<span class=\"string\">'es'</span>) <span class=\"comment\">// 全局使用西班牙语</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs(<span class=\"string\">'2018-05-05'</span>).locale(<span class=\"string\">'zh-cn'</span>).format() <span class=\"comment\">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./I18n.md\">国际化 I18n</a></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> advancedFormat <span class=\"keyword\">from</span> <span class=\"string\">'dayjs/plugin/advancedFormat'</span> <span class=\"comment\">// 按需加载插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.extend(advancedFormat) <span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">'Q Do k kk X x'</span>) <span class=\"comment\">// 使用扩展后的API</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./Plugin.md\">插件列表</a></p>\n<h2 id=\"开源协议\"><a href=\"#开源协议\" class=\"headerlink\" title=\"开源协议\"></a>开源协议</h2><p>Day.js 遵循 <a href=\"../../LICENSE\">MIT 开源协议</a>.</p>\n"},{"title":"Webpack打包工具总结","date":"2017-12-28T17:01:16.000Z","description":"Webpack打包工具语法学习","_content":"\n# Webpack\n\n- 安装 webpack\n- 配置 webpack.config.js\n  > 官方教程：https://doc.webpack-china.org/configuration/#-\n\n```javascript\nvar path = require('path');\nmodule.exports = {\n\tentry: './foo.js',\n\t\toutput: {\n\t\tpath: path.resolve(__dirname, 'dist'),\n\t\tfilename: 'foo.bundle.js'\n\t}\n\tmodule:\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.(js|jsx)$/,\n\t\t\t\tuse: 'babel-loader'，\n\t\t\t\tinclude: [\n\t\t  path.resolve(__dirname, \"app\")\n\t\t],\n\t\texclude: [\n\t\t  path.resolve(__dirname, \"app/demo-files\")\n\t\t],\n\t\t// 这里是匹配条件，每个选项都接收一个正则表达式或字符串\n\t\t// test 和 include 具有相同的作用，都是必须匹配选项\n\t\t// exclude 是必不匹配选项（优先于 test 和 include）\n\t\t// 最佳实践：\n\t\t// - 只在 test 和 文件名匹配 中使用正则表达式\n\t\t// - 在 include 和 exclude 中使用绝对路径数组\n\t\t// - 尽量避免 exclude，更倾向于使用 include\n\t\t\t}\n\t\t]\n\t\tplugins: [\n\t\tnew (webpack.optimize.UglifyJsPlugin)\n\t\tnew HtmlWebpackPlugin(template: './src/index.html')\n\t  ]\n};\n```\n\n- 模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,\n- Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：\n  在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装\n\n```javascript\n// npm install --save-dev html-webpack-plugin\n// 在webpack.config.js中配置：\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n\tentry: {\n\t\tapp: './src/index.js',\n\t\tprint: './src/print.js'\n\t},\n\tplugins: [\n\t\tnew cleanWebpackPlugin(['dist']), //数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前\n\t\tnew HtmlWebpackPlugin({\n\t\t\ttitle: '页面标题', //生成页面标题\n\t\t\tfilename: 'index.html', //要生成的文件名\n\t\t\ttemplate: 'index.html' //要生成页面的时候的模板\n\t\t})\n\t],\n\toutput: {\n\t\tfilename: '[name].bundle.js',\n\t\tpath: path.resolve(__dirname, 'dist')\n\t}\n}\n```\n\n- JSon 文件中不能以有注释\n- 使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；\n\n```javascript\n  // 例:\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm run dev\n  // 例:\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm start\n\t// 如果键名是start，可以省略写run\n```\n\n- 配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json\n\n```javascript\n- \"scripts\": {\n\t\"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n\t}\n```\n\n- 配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库\n\n```javascript\n{\n  test: /\\.js$/,\n  exclude: /(node_modules|bower_components)/,//忽略目录\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: ['@babel/preset-env']\n    }\n  }\n}\n```\n\n- 解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！\n- 解析文件的话，要去下载各种文件类型的 loader\n- webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了\n- package.json 对象中最后一个参数项，不能书写逗号\n\n### CLI\n\n- （command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思\n- vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具\n\n### 打包的工程目录中 src 源码所在文件，dist 发布的目录\n","source":"_posts/Webpack.md","raw":"---\ntitle: Webpack打包工具总结\ndate: 2017-12-29 01:01:16\ncategories: JavaScript\ntags: [Webpack3.10, 语法, JS]\ndescription: Webpack打包工具语法学习\n---\n\n# Webpack\n\n- 安装 webpack\n- 配置 webpack.config.js\n  > 官方教程：https://doc.webpack-china.org/configuration/#-\n\n```javascript\nvar path = require('path');\nmodule.exports = {\n\tentry: './foo.js',\n\t\toutput: {\n\t\tpath: path.resolve(__dirname, 'dist'),\n\t\tfilename: 'foo.bundle.js'\n\t}\n\tmodule:\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.(js|jsx)$/,\n\t\t\t\tuse: 'babel-loader'，\n\t\t\t\tinclude: [\n\t\t  path.resolve(__dirname, \"app\")\n\t\t],\n\t\texclude: [\n\t\t  path.resolve(__dirname, \"app/demo-files\")\n\t\t],\n\t\t// 这里是匹配条件，每个选项都接收一个正则表达式或字符串\n\t\t// test 和 include 具有相同的作用，都是必须匹配选项\n\t\t// exclude 是必不匹配选项（优先于 test 和 include）\n\t\t// 最佳实践：\n\t\t// - 只在 test 和 文件名匹配 中使用正则表达式\n\t\t// - 在 include 和 exclude 中使用绝对路径数组\n\t\t// - 尽量避免 exclude，更倾向于使用 include\n\t\t\t}\n\t\t]\n\t\tplugins: [\n\t\tnew (webpack.optimize.UglifyJsPlugin)\n\t\tnew HtmlWebpackPlugin(template: './src/index.html')\n\t  ]\n};\n```\n\n- 模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,\n- Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：\n  在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装\n\n```javascript\n// npm install --save-dev html-webpack-plugin\n// 在webpack.config.js中配置：\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n\tentry: {\n\t\tapp: './src/index.js',\n\t\tprint: './src/print.js'\n\t},\n\tplugins: [\n\t\tnew cleanWebpackPlugin(['dist']), //数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前\n\t\tnew HtmlWebpackPlugin({\n\t\t\ttitle: '页面标题', //生成页面标题\n\t\t\tfilename: 'index.html', //要生成的文件名\n\t\t\ttemplate: 'index.html' //要生成页面的时候的模板\n\t\t})\n\t],\n\toutput: {\n\t\tfilename: '[name].bundle.js',\n\t\tpath: path.resolve(__dirname, 'dist')\n\t}\n}\n```\n\n- JSon 文件中不能以有注释\n- 使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；\n\n```javascript\n  // 例:\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm run dev\n  // 例:\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm start\n\t// 如果键名是start，可以省略写run\n```\n\n- 配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json\n\n```javascript\n- \"scripts\": {\n\t\"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n\t}\n```\n\n- 配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库\n\n```javascript\n{\n  test: /\\.js$/,\n  exclude: /(node_modules|bower_components)/,//忽略目录\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: ['@babel/preset-env']\n    }\n  }\n}\n```\n\n- 解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！\n- 解析文件的话，要去下载各种文件类型的 loader\n- webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了\n- package.json 对象中最后一个参数项，不能书写逗号\n\n### CLI\n\n- （command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思\n- vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具\n\n### 打包的工程目录中 src 源码所在文件，dist 发布的目录\n","slug":"Webpack","published":1,"updated":"2018-11-30T05:16:41.854Z","_id":"cjp5ezme40007hks2b945jedw","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><ul>\n<li>安装 webpack</li>\n<li>配置 webpack.config.js<blockquote>\n<p>官方教程：<a href=\"https://doc.webpack-china.org/configuration/#-\" target=\"_blank\" rel=\"noopener\">https://doc.webpack-china.org/configuration/#-</a></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: <span class=\"string\">'./foo.js'</span>,</span><br><span class=\"line\">\t\toutput: &#123;</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'foo.bundle.js'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: <span class=\"string\">'babel-loader'</span>，</span><br><span class=\"line\">\t\t\t\tinclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\texclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app/demo-files\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最佳实践：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> (webpack.optimize.UglifyJsPlugin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(template: <span class=\"string\">'./src/index.html'</span>)</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>\n<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install --save-dev html-webpack-plugin</span></span><br><span class=\"line\"><span class=\"comment\">// 在webpack.config.js中配置：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">\t\tprint: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> cleanWebpackPlugin([<span class=\"string\">'dist'</span>]), <span class=\"comment\">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttitle: <span class=\"string\">'页面标题'</span>, <span class=\"comment\">//生成页面标题</span></span><br><span class=\"line\">\t\t\tfilename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">//要生成的文件名</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'index.html'</span> <span class=\"comment\">//要生成页面的时候的模板</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput: &#123;</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSon 文件中不能以有注释</li>\n<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm run dev</span></span><br><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm start</span></span><br><span class=\"line\"><span class=\"comment\">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,<span class=\"comment\">//忽略目录</span></span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>\n<li>解析文件的话，要去下载各种文件类型的 loader</li>\n<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>\n<li>package.json 对象中最后一个参数项，不能书写逗号</li>\n</ul>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><ul>\n<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>\n<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>\n</ul>\n<h3 id=\"打包的工程目录中-src-源码所在文件，dist-发布的目录\"><a href=\"#打包的工程目录中-src-源码所在文件，dist-发布的目录\" class=\"headerlink\" title=\"打包的工程目录中 src 源码所在文件，dist 发布的目录\"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><ul>\n<li>安装 webpack</li>\n<li>配置 webpack.config.js<blockquote>\n<p>官方教程：<a href=\"https://doc.webpack-china.org/configuration/#-\" target=\"_blank\" rel=\"noopener\">https://doc.webpack-china.org/configuration/#-</a></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: <span class=\"string\">'./foo.js'</span>,</span><br><span class=\"line\">\t\toutput: &#123;</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'foo.bundle.js'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: <span class=\"string\">'babel-loader'</span>，</span><br><span class=\"line\">\t\t\t\tinclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\texclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app/demo-files\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最佳实践：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> (webpack.optimize.UglifyJsPlugin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(template: <span class=\"string\">'./src/index.html'</span>)</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>\n<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install --save-dev html-webpack-plugin</span></span><br><span class=\"line\"><span class=\"comment\">// 在webpack.config.js中配置：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">\t\tprint: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> cleanWebpackPlugin([<span class=\"string\">'dist'</span>]), <span class=\"comment\">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttitle: <span class=\"string\">'页面标题'</span>, <span class=\"comment\">//生成页面标题</span></span><br><span class=\"line\">\t\t\tfilename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">//要生成的文件名</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'index.html'</span> <span class=\"comment\">//要生成页面的时候的模板</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput: &#123;</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSon 文件中不能以有注释</li>\n<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm run dev</span></span><br><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm start</span></span><br><span class=\"line\"><span class=\"comment\">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,<span class=\"comment\">//忽略目录</span></span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>\n<li>解析文件的话，要去下载各种文件类型的 loader</li>\n<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>\n<li>package.json 对象中最后一个参数项，不能书写逗号</li>\n</ul>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><ul>\n<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>\n<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>\n</ul>\n<h3 id=\"打包的工程目录中-src-源码所在文件，dist-发布的目录\"><a href=\"#打包的工程目录中-src-源码所在文件，dist-发布的目录\" class=\"headerlink\" title=\"打包的工程目录中 src 源码所在文件，dist 发布的目录\"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3>"},{"title":"Vuex 状态管理插件学习","date":"2018-03-12T08:16:16.000Z","description":"Vuex 学习","author":"Mark","_content":"\n# Vue 状态管理插件学习\n\n- vuex vue 提供的数据状态管理插件（俗称数据共享中心）\n- state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）\n\n- 获取仓库中定义值的方法\n\n```javascript\n// {{$store.state.定义的属性}}\n// 使用计算属性\ncomputed:{\n\tcount(){\n\t\treturn this.$store.state.定义的属性\n\t}\n}\n```\n\n- 3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法\n\n```javascript\n//es6写法\ncomputed: mapState({\n\tcount: state => state.count\n})\n```\n\n- 等同于\n\n```javascript\ncomputed: mapState({\n\tcount: state => {\n\t\treturn state.count\n\t}\n})\n```\n\n- 4.mapState 扩展使用\n\n```javascript\ncomputed: mapState(['在state中定义的属性'])\n// 这个会根据你定义的属性名绑定到vue实例上\n```\n\n- 5.mutations 提交更改仓库中定义值的方法（修改状态）\n- 使用$store.commit('调用定义在 mutations 中定义的方法名'，要传递给调用方法的参数)\n- 获取状态管理器中定义的方法(mutations)\n\n```javascript\nconst mutations = {\n\t// 定义一个加的方法\n\tadd(state) {\n\t\tstate.count++\n\t},\n\t// 定义一个减的方法\n\treduce(state) {\n\t\tstate.count--\n\t}\n}\n// 调用方法\n// 在vue中使用import导入辅助函数\nimport { mapState, mapMutations } from 'vuex'\n\nmethods: mapMutations(['add', 'reduce'])\n// 或\nmethods: mapMutations([(countAdd: 'add'), (countReauce: 'reduce')])\n```\n\n- 6.vuex 中的计算属性（过滤属性）getters\n\n```javascript\n// 定义方法\nconst getters = {\n  count:function(state){\n    return state.count += 100;\n\t}\n\t// 或者\n\tcount: state => { return state.count += 100 }\n}\n\n// 调用方法\nimport { mapState,mapMutations,mapGetters } from 'vuex';\n\ncomputed: mapGetters({\n\tcount: (state) => { return state.count }\n})\n```\n\n- 7.vuex 中的 actions，异步提交方式\n\n```javascript\nconst actions = {\n\t// context：上下文对象，这里你可以理解称store本身。\n\taddAction(context) {\n\t\tcontext.commit('add', 10)\n\t},\n\t// {commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。\n\treduceAction({ commit }) {\n\t\tcommit('reduce')\n\t}\n}\n```\n\n- 8.module 模块组\n\n```javascript\n// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中\nconst moduleA={\n  state,\n  mutations,\n  getters,\n  actions\n}\n// 调用方法\nmodules: {\n  //模块别名:模块名，记得要使用import引入模块\n\ta:moduleA\n}\n\n//使用模块值和方法\n和以上的使用方法一样，只不过前边加一个模块别名\n```\n","source":"_posts/Vuex.md","raw":"---\ntitle: Vuex 状态管理插件学习 #文章页面上的显示名称，一般是中文\ndate: 2018-03-12 16:16:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: JavaScript #分类\ntags: [vue, vuex, JS] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: Vuex 学习 #附加一段文章摘要，字数最好在 140 字以内，会出现在 meta 的 description 里面\nauthor: 'Mark'\n---\n\n# Vue 状态管理插件学习\n\n- vuex vue 提供的数据状态管理插件（俗称数据共享中心）\n- state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）\n\n- 获取仓库中定义值的方法\n\n```javascript\n// {{$store.state.定义的属性}}\n// 使用计算属性\ncomputed:{\n\tcount(){\n\t\treturn this.$store.state.定义的属性\n\t}\n}\n```\n\n- 3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法\n\n```javascript\n//es6写法\ncomputed: mapState({\n\tcount: state => state.count\n})\n```\n\n- 等同于\n\n```javascript\ncomputed: mapState({\n\tcount: state => {\n\t\treturn state.count\n\t}\n})\n```\n\n- 4.mapState 扩展使用\n\n```javascript\ncomputed: mapState(['在state中定义的属性'])\n// 这个会根据你定义的属性名绑定到vue实例上\n```\n\n- 5.mutations 提交更改仓库中定义值的方法（修改状态）\n- 使用$store.commit('调用定义在 mutations 中定义的方法名'，要传递给调用方法的参数)\n- 获取状态管理器中定义的方法(mutations)\n\n```javascript\nconst mutations = {\n\t// 定义一个加的方法\n\tadd(state) {\n\t\tstate.count++\n\t},\n\t// 定义一个减的方法\n\treduce(state) {\n\t\tstate.count--\n\t}\n}\n// 调用方法\n// 在vue中使用import导入辅助函数\nimport { mapState, mapMutations } from 'vuex'\n\nmethods: mapMutations(['add', 'reduce'])\n// 或\nmethods: mapMutations([(countAdd: 'add'), (countReauce: 'reduce')])\n```\n\n- 6.vuex 中的计算属性（过滤属性）getters\n\n```javascript\n// 定义方法\nconst getters = {\n  count:function(state){\n    return state.count += 100;\n\t}\n\t// 或者\n\tcount: state => { return state.count += 100 }\n}\n\n// 调用方法\nimport { mapState,mapMutations,mapGetters } from 'vuex';\n\ncomputed: mapGetters({\n\tcount: (state) => { return state.count }\n})\n```\n\n- 7.vuex 中的 actions，异步提交方式\n\n```javascript\nconst actions = {\n\t// context：上下文对象，这里你可以理解称store本身。\n\taddAction(context) {\n\t\tcontext.commit('add', 10)\n\t},\n\t// {commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。\n\treduceAction({ commit }) {\n\t\tcommit('reduce')\n\t}\n}\n```\n\n- 8.module 模块组\n\n```javascript\n// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中\nconst moduleA={\n  state,\n  mutations,\n  getters,\n  actions\n}\n// 调用方法\nmodules: {\n  //模块别名:模块名，记得要使用import引入模块\n\ta:moduleA\n}\n\n//使用模块值和方法\n和以上的使用方法一样，只不过前边加一个模块别名\n```\n","slug":"Vuex","published":1,"updated":"2018-11-30T05:16:41.853Z","_id":"cjp5ezme50008hks2ew981i07","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Vue-状态管理插件学习\"><a href=\"#Vue-状态管理插件学习\" class=\"headerlink\" title=\"Vue 状态管理插件学习\"></a>Vue 状态管理插件学习</h1><ul>\n<li>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</li>\n<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>\n</li>\n<li><p>获取仓库中定义值的方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#123;$store.state.定义的属性&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用计算属性</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tcount()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.定义的属性</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>等同于</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.mapState 扩展使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([<span class=\"string\">'在state中定义的属性'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>\n<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>\n<li>获取状态管理器中定义的方法(mutations)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个加的方法</span></span><br><span class=\"line\">\tadd(state) &#123;</span><br><span class=\"line\">\t\tstate.count++</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个减的方法</span></span><br><span class=\"line\">\treduce(state) &#123;</span><br><span class=\"line\">\t\tstate.count--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">// 在vue中使用import导入辅助函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: mapMutations([<span class=\"string\">'add'</span>, <span class=\"string\">'reduce'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">methods: mapMutations([(countAdd: <span class=\"string\">'add'</span>), (countReauce: <span class=\"string\">'reduce'</span>)])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>6.vuex 中的计算属性（过滤属性）getters</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  count:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 或者</span></span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState,mapMutations,mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>7.vuex 中的 actions，异步提交方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class=\"line\">\taddAction(context) &#123;</span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">'add'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;commit&#125;：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class=\"line\">\treduceAction(&#123; commit &#125;) &#123;</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'reduce'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>8.module 模块组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA=&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">modules: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class=\"line\">\ta:moduleA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用模块值和方法</span></span><br><span class=\"line\">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue-状态管理插件学习\"><a href=\"#Vue-状态管理插件学习\" class=\"headerlink\" title=\"Vue 状态管理插件学习\"></a>Vue 状态管理插件学习</h1><ul>\n<li>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</li>\n<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>\n</li>\n<li><p>获取仓库中定义值的方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#123;$store.state.定义的属性&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用计算属性</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tcount()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.定义的属性</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>等同于</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.mapState 扩展使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([<span class=\"string\">'在state中定义的属性'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>\n<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>\n<li>获取状态管理器中定义的方法(mutations)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个加的方法</span></span><br><span class=\"line\">\tadd(state) &#123;</span><br><span class=\"line\">\t\tstate.count++</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个减的方法</span></span><br><span class=\"line\">\treduce(state) &#123;</span><br><span class=\"line\">\t\tstate.count--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">// 在vue中使用import导入辅助函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: mapMutations([<span class=\"string\">'add'</span>, <span class=\"string\">'reduce'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">methods: mapMutations([(countAdd: <span class=\"string\">'add'</span>), (countReauce: <span class=\"string\">'reduce'</span>)])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>6.vuex 中的计算属性（过滤属性）getters</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  count:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 或者</span></span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState,mapMutations,mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>7.vuex 中的 actions，异步提交方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class=\"line\">\taddAction(context) &#123;</span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">'add'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;commit&#125;：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class=\"line\">\treduceAction(&#123; commit &#125;) &#123;</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'reduce'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>8.module 模块组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA=&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">modules: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class=\"line\">\ta:moduleA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用模块值和方法</span></span><br><span class=\"line\">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Typora For Markdown 语法","date":"2018-03-12T08:48:00.000Z","author":"Mark","_content":"\n#Typora For Markdown 语法\n\n[TOC]\n\n###数学表达式\n\n要启用这个功能，首先到`Preference`->`Editor`中启用。然后使用`$`符号包裹 Tex 命令，例如：`$lim_{x \\to \\infty} \\ exp(-x)=0$`将产生如下的数学表达式：\n\n$\\lim\\_{x \\to \\infty} \\exp(-x)=0$\n\n###下标\n\n下标使用`~`包裹，例如：`H~2~O`将产生 H~2~O, 即水的分子式。\n\n###上标\n\n上标使用`^`包裹，例如：`y^2^=4`将产生表达式 y^2^ = 4\n\n###插入表情:happy:\n\n使用`:happy:`输入表情:happy:,使用`:sad:`输入表情:sad:,使用`:cry:`输入表情:cry:等。以此类推！\n\n### 下划线\n\n用 HTML 的语法`<u>Underline</u>`将产生下划线<u>Underline</u>.\n\n### 删除线\n\nGFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用`~~`包裹的文本将会具有删除的样式，例如`~删除文本~`将产生~~删除文本~~的样式。\n\n### 代码\n\n- 使用`包裹的内容将会以代码样式显示，例如\n\n```\n使用`printf()`\n```\n\n则会产生`printf()`样式。\n\n- 输入`~~~`或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：\n\n- ````\n  ​```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ​```\n  ````\n\n  将会产生\n\n  ```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ```\n\n  ### 强调\n\n  使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n  ```\n  **使用两个*号强调内容**\n  __使用两个下划线强调内容__\n  ```\n\n  将会输出\n\n  **使用两个\\*号强调内容**\n  **使用两个下划线强调内容**\n  Typroa 推荐使用两个\\*号。\n\n  ### 斜体\n\n  在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n  ```\n  \\*\n  ```\n\n  ### 插入图片\n\n  我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n  ![drag and drop image](http://typora.io/img/drag-img.gif)\n\n  ​\n\n  ​\n\n### 插入 URL 连接\n\n使用尖括号包裹的 url 将产生一个连接，例如：`<www.baidu.com>`将产生连接:<www.baidu.com>.\n\n如果是标准的 url，则会自动产生连接，例如:www.google.com\n\n### 目录列表 Table of Contents（TOC）\n\n输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。\n\n### 水平分割线\n\n使用`***`或者`---`，然后回车，来产生水平分割线。\n\n---\n\n### 标注\n\n我们可以对某一个词语进行标注。例如\n\n```\n某些人用过了才知道[^注释]\n[^注释]:Somebody that I used to know.\n```\n\n将产生：\n\n某些人用过了才知道[^注释]\n[^注释]: Somebody that I used to know.\n\n把鼠标放在`注释`上，将会有提示内容。\n\n### 表格\n\n```\n|姓名|性别|毕业学校|工资|\n|:---|:---:|:---:|---:|\n|杨洋|男|重庆交通大学|3200|\n|峰哥|男|贵州大学|5000|\n|坑货|女|北京大学|2000|\n```\n\n将产生:\n\n| 姓名 | 性别 |   毕业学校   | 工资 |\n| :--- | :--: | :----------: | ---: |\n| 杨洋 |  男  | 重庆交通大学 | 3200 |\n| 峰哥 |  男  |   贵州大学   | 5000 |\n| 坑货 |  女  |   北京大学   | 2000 |\n\n其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。\n\n### 数学表达式块\n\n输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：\n\n```\n $$\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n```\n\n将会产生:\n\n$$\\mathbf{V}\\_1 \\times \\mathbf{V}\\_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n\n### 任务列表\n\n使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。\n\n```\n- [ ] 吃饭\n- [ ] 逛街\n- [ ] 看电影\n- [ ] 约泡\n```\n\n- [x] 吃饭\n\n      ​\n\n- [x] 逛街\n\n      ​\n\n- [x] 看电影\n\n      ​\n\n- [x] 约泡\n\n### 列表\n\n输入+, -, \\*,创建无序的列表，使用任意数字开头，创建有序列表，例如：\n\n```\n**无序的列表**\n* tfboys\n* 杨洋\n* 我爱你\n```\n\n**无序的列表**\n\n- tfboys\n- 杨洋\n- 我爱你\n\n```\n**有序的列表**\n1. 苹果\n6. 香蕉\n10. 我都不喜欢\n```\n\n**有序的列表**\n\n1. 苹果\n2. 香蕉\n3. 我都不喜欢\n\n### 块引用\n\n使用>来插入块引用。例如：\n\n```\n>这是一个块引用！\n```\n\n将产生：\n\n> 这是一个块引用！\n\n### 标题\n\n使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。\n","source":"_posts/typora.md","raw":"---\nlayout: post\ntitle: 'Typora For Markdown 语法'\ndate: 2018-03-12 16:48:00\nauthor: 'Mark'\ntags:\n  - 前端开发\n  - Markdown\n---\n\n#Typora For Markdown 语法\n\n[TOC]\n\n###数学表达式\n\n要启用这个功能，首先到`Preference`->`Editor`中启用。然后使用`$`符号包裹 Tex 命令，例如：`$lim_{x \\to \\infty} \\ exp(-x)=0$`将产生如下的数学表达式：\n\n$\\lim\\_{x \\to \\infty} \\exp(-x)=0$\n\n###下标\n\n下标使用`~`包裹，例如：`H~2~O`将产生 H~2~O, 即水的分子式。\n\n###上标\n\n上标使用`^`包裹，例如：`y^2^=4`将产生表达式 y^2^ = 4\n\n###插入表情:happy:\n\n使用`:happy:`输入表情:happy:,使用`:sad:`输入表情:sad:,使用`:cry:`输入表情:cry:等。以此类推！\n\n### 下划线\n\n用 HTML 的语法`<u>Underline</u>`将产生下划线<u>Underline</u>.\n\n### 删除线\n\nGFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用`~~`包裹的文本将会具有删除的样式，例如`~删除文本~`将产生~~删除文本~~的样式。\n\n### 代码\n\n- 使用`包裹的内容将会以代码样式显示，例如\n\n```\n使用`printf()`\n```\n\n则会产生`printf()`样式。\n\n- 输入`~~~`或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：\n\n- ````\n  ​```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ​```\n  ````\n\n  将会产生\n\n  ```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ```\n\n  ### 强调\n\n  使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n  ```\n  **使用两个*号强调内容**\n  __使用两个下划线强调内容__\n  ```\n\n  将会输出\n\n  **使用两个\\*号强调内容**\n  **使用两个下划线强调内容**\n  Typroa 推荐使用两个\\*号。\n\n  ### 斜体\n\n  在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n  ```\n  \\*\n  ```\n\n  ### 插入图片\n\n  我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n  ![drag and drop image](http://typora.io/img/drag-img.gif)\n\n  ​\n\n  ​\n\n### 插入 URL 连接\n\n使用尖括号包裹的 url 将产生一个连接，例如：`<www.baidu.com>`将产生连接:<www.baidu.com>.\n\n如果是标准的 url，则会自动产生连接，例如:www.google.com\n\n### 目录列表 Table of Contents（TOC）\n\n输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。\n\n### 水平分割线\n\n使用`***`或者`---`，然后回车，来产生水平分割线。\n\n---\n\n### 标注\n\n我们可以对某一个词语进行标注。例如\n\n```\n某些人用过了才知道[^注释]\n[^注释]:Somebody that I used to know.\n```\n\n将产生：\n\n某些人用过了才知道[^注释]\n[^注释]: Somebody that I used to know.\n\n把鼠标放在`注释`上，将会有提示内容。\n\n### 表格\n\n```\n|姓名|性别|毕业学校|工资|\n|:---|:---:|:---:|---:|\n|杨洋|男|重庆交通大学|3200|\n|峰哥|男|贵州大学|5000|\n|坑货|女|北京大学|2000|\n```\n\n将产生:\n\n| 姓名 | 性别 |   毕业学校   | 工资 |\n| :--- | :--: | :----------: | ---: |\n| 杨洋 |  男  | 重庆交通大学 | 3200 |\n| 峰哥 |  男  |   贵州大学   | 5000 |\n| 坑货 |  女  |   北京大学   | 2000 |\n\n其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。\n\n### 数学表达式块\n\n输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：\n\n```\n $$\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n```\n\n将会产生:\n\n$$\\mathbf{V}\\_1 \\times \\mathbf{V}\\_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n\n### 任务列表\n\n使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。\n\n```\n- [ ] 吃饭\n- [ ] 逛街\n- [ ] 看电影\n- [ ] 约泡\n```\n\n- [x] 吃饭\n\n      ​\n\n- [x] 逛街\n\n      ​\n\n- [x] 看电影\n\n      ​\n\n- [x] 约泡\n\n### 列表\n\n输入+, -, \\*,创建无序的列表，使用任意数字开头，创建有序列表，例如：\n\n```\n**无序的列表**\n* tfboys\n* 杨洋\n* 我爱你\n```\n\n**无序的列表**\n\n- tfboys\n- 杨洋\n- 我爱你\n\n```\n**有序的列表**\n1. 苹果\n6. 香蕉\n10. 我都不喜欢\n```\n\n**有序的列表**\n\n1. 苹果\n2. 香蕉\n3. 我都不喜欢\n\n### 块引用\n\n使用>来插入块引用。例如：\n\n```\n>这是一个块引用！\n```\n\n将产生：\n\n> 这是一个块引用！\n\n### 标题\n\n使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。\n","slug":"typora","published":1,"updated":"2018-11-30T05:16:41.855Z","_id":"cjp5ezme7000ahks215fwx7a1","comments":1,"photos":[],"link":"","content":"<p>#Typora For Markdown 语法</p>\n<p>[TOC]</p>\n<p>###数学表达式</p>\n<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_{x \\to \\infty} \\ exp(-x)=0$</code>将产生如下的数学表达式：</p>\n<p>$\\lim_{x \\to \\infty} \\exp(-x)=0$</p>\n<p>###下标</p>\n<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H~2~O, 即水的分子式。</p>\n<p>###上标</p>\n<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>\n<p>###插入表情:happy:</p>\n<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>使用`包裹的内容将会以代码样式显示，例如</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`printf()`</span><br></pre></td></tr></table></figure>\n<p>则会产生<code>printf()</code>样式。</p>\n<ul>\n<li><p>输入<code>~~~</code>或者<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `</span><br></pre></td></tr></table></figure></p>\n<p>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">将会产生</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>使用两个*号或者两个_包裹的内容将会被强调。例如</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**使用两个*号强调内容**</span></span><br><span class=\"line\"><span class=\"strong\">__使用两个下划线强调内容__</span></span><br></pre></td></tr></table></figure>\n<p>将会输出</p>\n<p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>在标准的 Markdown 语法中，*和_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\\*</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p>\n<p><img src=\"http://typora.io/img/drag-img.gif\" alt=\"drag and drop image\"></p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"插入-URL-连接\"><a href=\"#插入-URL-连接\" class=\"headerlink\" title=\"插入 URL 连接\"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<a href=\"http://www.baidu.com&gt;\" target=\"_blank\" rel=\"noopener\">www.baidu.com&gt;</a>.</p>\n<p>如果是标准的 url，则会自动产生连接，例如:<a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener\">www.google.com</a></p>\n<h3 id=\"目录列表-Table-of-Contents（TOC）\"><a href=\"#目录列表-Table-of-Contents（TOC）\" class=\"headerlink\" title=\"目录列表 Table of Contents（TOC）\"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>\n<h3 id=\"水平分割线\"><a href=\"#水平分割线\" class=\"headerlink\" title=\"水平分割线\"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>\n<hr>\n<h3 id=\"标注\"><a href=\"#标注\" class=\"headerlink\" title=\"标注\"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些人用过了才知道<span class=\"selector-attr\">[^注释]</span></span><br><span class=\"line\"><span class=\"selector-attr\">[^注释]</span><span class=\"selector-pseudo\">:Somebody</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">I</span> <span class=\"selector-tag\">used</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">know</span>.</span><br></pre></td></tr></table></figure>\n<p>将产生：</p>\n<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>\n<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">|姓名|</span>性别<span class=\"params\">|毕业学校|</span>工资<span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span><span class=\"symbol\">:---|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\"><span class=\"params\">|杨洋|</span>男<span class=\"params\">|重庆交通大学|</span><span class=\"number\">3200</span><span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span>峰哥<span class=\"params\">|男|</span>贵州大学<span class=\"params\">|5000|</span></span><br><span class=\"line\"><span class=\"params\">|坑货|</span>女<span class=\"params\">|北京大学|</span><span class=\"number\">2000</span><span class=\"params\">|</span></span><br></pre></td></tr></table></figure>\n<p>将产生:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:center\">性别</th>\n<th style=\"text-align:center\">毕业学校</th>\n<th style=\"text-align:right\">工资</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">杨洋</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">重庆交通大学</td>\n<td style=\"text-align:right\">3200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">峰哥</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">贵州大学</td>\n<td style=\"text-align:right\">5000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">坑货</td>\n<td style=\"text-align:center\">女</td>\n<td style=\"text-align:center\">北京大学</td>\n<td style=\"text-align:right\">2000</td>\n</tr>\n</tbody>\n</table>\n<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>\n<h3 id=\"数学表达式块\"><a href=\"#数学表达式块\" class=\"headerlink\" title=\"数学表达式块\"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_1 <span class=\"tag\">\\<span class=\"name\">times</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_2 =  <span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;vmatrix&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;i&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;j&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;k&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;vmatrix&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>\n<p>将会产生:</p>\n<p>$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$</p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">[ ]</span> 吃饭</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 逛街</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 看电影</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 约泡</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>[x] 吃饭</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 逛街</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 看电影</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 约泡</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*无序的列表*</span><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> tfboys</span><br><span class=\"line\"><span class=\"bullet\">* </span>杨洋</span><br><span class=\"line\"><span class=\"bullet\">* </span>我爱你</span><br></pre></td></tr></table></figure>\n<p><strong>无序的列表</strong></p>\n<ul>\n<li>tfboys</li>\n<li>杨洋</li>\n<li>我爱你</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**有序的列表**</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>苹果</span><br><span class=\"line\"><span class=\"bullet\">6. </span>香蕉</span><br><span class=\"line\"><span class=\"bullet\">10. </span>我都不喜欢</span><br></pre></td></tr></table></figure>\n<p><strong>有序的列表</strong></p>\n<ol>\n<li>苹果</li>\n<li>香蕉</li>\n<li>我都不喜欢</li>\n</ol>\n<h3 id=\"块引用\"><a href=\"#块引用\" class=\"headerlink\" title=\"块引用\"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">这是一个块引用！</span></span><br></pre></td></tr></table></figure>\n<p>将产生：</p>\n<blockquote>\n<p>这是一个块引用！</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#Typora For Markdown 语法</p>\n<p>[TOC]</p>\n<p>###数学表达式</p>\n<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_{x \\to \\infty} \\ exp(-x)=0$</code>将产生如下的数学表达式：</p>\n<p>$\\lim_{x \\to \\infty} \\exp(-x)=0$</p>\n<p>###下标</p>\n<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H~2~O, 即水的分子式。</p>\n<p>###上标</p>\n<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>\n<p>###插入表情:happy:</p>\n<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>使用`包裹的内容将会以代码样式显示，例如</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`printf()`</span><br></pre></td></tr></table></figure>\n<p>则会产生<code>printf()</code>样式。</p>\n<ul>\n<li><p>输入<code>~~~</code>或者<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `</span><br></pre></td></tr></table></figure></p>\n<p>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">将会产生</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>使用两个*号或者两个_包裹的内容将会被强调。例如</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**使用两个*号强调内容**</span></span><br><span class=\"line\"><span class=\"strong\">__使用两个下划线强调内容__</span></span><br></pre></td></tr></table></figure>\n<p>将会输出</p>\n<p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>在标准的 Markdown 语法中，*和_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\\*</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p>\n<p><img src=\"http://typora.io/img/drag-img.gif\" alt=\"drag and drop image\"></p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"插入-URL-连接\"><a href=\"#插入-URL-连接\" class=\"headerlink\" title=\"插入 URL 连接\"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<a href=\"http://www.baidu.com&gt;\" target=\"_blank\" rel=\"noopener\">www.baidu.com&gt;</a>.</p>\n<p>如果是标准的 url，则会自动产生连接，例如:<a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener\">www.google.com</a></p>\n<h3 id=\"目录列表-Table-of-Contents（TOC）\"><a href=\"#目录列表-Table-of-Contents（TOC）\" class=\"headerlink\" title=\"目录列表 Table of Contents（TOC）\"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>\n<h3 id=\"水平分割线\"><a href=\"#水平分割线\" class=\"headerlink\" title=\"水平分割线\"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>\n<hr>\n<h3 id=\"标注\"><a href=\"#标注\" class=\"headerlink\" title=\"标注\"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些人用过了才知道<span class=\"selector-attr\">[^注释]</span></span><br><span class=\"line\"><span class=\"selector-attr\">[^注释]</span><span class=\"selector-pseudo\">:Somebody</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">I</span> <span class=\"selector-tag\">used</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">know</span>.</span><br></pre></td></tr></table></figure>\n<p>将产生：</p>\n<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>\n<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">|姓名|</span>性别<span class=\"params\">|毕业学校|</span>工资<span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span><span class=\"symbol\">:---|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\"><span class=\"params\">|杨洋|</span>男<span class=\"params\">|重庆交通大学|</span><span class=\"number\">3200</span><span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span>峰哥<span class=\"params\">|男|</span>贵州大学<span class=\"params\">|5000|</span></span><br><span class=\"line\"><span class=\"params\">|坑货|</span>女<span class=\"params\">|北京大学|</span><span class=\"number\">2000</span><span class=\"params\">|</span></span><br></pre></td></tr></table></figure>\n<p>将产生:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:center\">性别</th>\n<th style=\"text-align:center\">毕业学校</th>\n<th style=\"text-align:right\">工资</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">杨洋</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">重庆交通大学</td>\n<td style=\"text-align:right\">3200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">峰哥</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">贵州大学</td>\n<td style=\"text-align:right\">5000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">坑货</td>\n<td style=\"text-align:center\">女</td>\n<td style=\"text-align:center\">北京大学</td>\n<td style=\"text-align:right\">2000</td>\n</tr>\n</tbody>\n</table>\n<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>\n<h3 id=\"数学表达式块\"><a href=\"#数学表达式块\" class=\"headerlink\" title=\"数学表达式块\"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_1 <span class=\"tag\">\\<span class=\"name\">times</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_2 =  <span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;vmatrix&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;i&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;j&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;k&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;vmatrix&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>\n<p>将会产生:</p>\n<p>$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$</p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">[ ]</span> 吃饭</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 逛街</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 看电影</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 约泡</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>[x] 吃饭</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 逛街</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 看电影</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 约泡</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*无序的列表*</span><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> tfboys</span><br><span class=\"line\"><span class=\"bullet\">* </span>杨洋</span><br><span class=\"line\"><span class=\"bullet\">* </span>我爱你</span><br></pre></td></tr></table></figure>\n<p><strong>无序的列表</strong></p>\n<ul>\n<li>tfboys</li>\n<li>杨洋</li>\n<li>我爱你</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**有序的列表**</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>苹果</span><br><span class=\"line\"><span class=\"bullet\">6. </span>香蕉</span><br><span class=\"line\"><span class=\"bullet\">10. </span>我都不喜欢</span><br></pre></td></tr></table></figure>\n<p><strong>有序的列表</strong></p>\n<ol>\n<li>苹果</li>\n<li>香蕉</li>\n<li>我都不喜欢</li>\n</ol>\n<h3 id=\"块引用\"><a href=\"#块引用\" class=\"headerlink\" title=\"块引用\"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">这是一个块引用！</span></span><br></pre></td></tr></table></figure>\n<p>将产生：</p>\n<blockquote>\n<p>这是一个块引用！</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>\n"},{"layout":"post","title":"eslint-vscode-setting","subtitle":"eslint-vscode-setting","date":"2018-11-29T16:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","_content":"> ## 第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\n\n```bash\nnpm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g\n```\n\n> ## 第二步：在任意目录放置.eslintrc.js\n>\n> ## 第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\n>\n> ## 第四步：在 vscode 中的配置\n\n```javascript\n\t// eslint config start\n\t\"eslint.autoFixOnSave\": true,\n\t\"eslint.options\": {\n\t\t\"configFile\": \"C:/Users/Mark/.eslint/.eslintrc.js\"\n\t},\n\t\"eslint.validate\": [\n\t\t\"javascript\",\n\t\t\"javascriptreact\",\n\t\t\"html\",\n\t\t\"vue\",\n\t\t{\n\t\t\t\"language\": \"vue\",\n\t\t\t\"autoFix\": true\n\t\t}\n\t],\n\t\"vetur.format.options.tabSize\": 2,\n\t\"vetur.format.options.useTabs\": true,\n\t\"vetur.format.defaultFormatterOptions\": {\n\t\t\"prettier\": {\n\t\t\t// Prettier option here\n\t\t\t\"semi\": false,\n\t\t\t\"tabWidth\": 2,\n\t\t\t\"useTabs\": true,\n\t\t\t\"singleQuote\": true\n\t\t},\n\t\t\"prettyhtml\": {\n\t\t\t\"printWidth\": 100, // No line exceeds 100 characters\n\t\t\t\"singleQuote\": false // Prefer double quotes over single quotes\n\t\t}\n\t},\n\t// prettier 格式化配置\n\t\"prettier.tabWidth\": 2,\n\t\"prettier.useTabs\": true,\n\t\"prettier.singleQuote\": true,\n\t\"prettier.semi\": false,\n\t\"stylusSupremacy.insertColons\": false, // 是否插入冒号\n\t\"stylusSupremacy.insertSemicolons\": false, // 是否插入分好\n\t\"stylusSupremacy.insertBraces\": false, // 是否插入大括号\n\t\"stylusSupremacy.insertNewLineAroundImports\": false, // import之后是否换行\n\t\"stylusSupremacy.insertNewLineAroundBlocks\": false,\n```\n","source":"_posts/eslint-vscode-setting.md","raw":"---\nlayout: post\ntitle: 'eslint-vscode-setting'\nsubtitle: \"eslint-vscode-setting\"\ndate: 2018-11-30\nauthor: 'Mark'\nheader-img: 'img/post-bg-js-version.jpg'\ntags:\n  - 前端开发\n  - JavaScript\n  - VSCode\n  - ESLint\n---\n> ## 第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\n\n```bash\nnpm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g\n```\n\n> ## 第二步：在任意目录放置.eslintrc.js\n>\n> ## 第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\n>\n> ## 第四步：在 vscode 中的配置\n\n```javascript\n\t// eslint config start\n\t\"eslint.autoFixOnSave\": true,\n\t\"eslint.options\": {\n\t\t\"configFile\": \"C:/Users/Mark/.eslint/.eslintrc.js\"\n\t},\n\t\"eslint.validate\": [\n\t\t\"javascript\",\n\t\t\"javascriptreact\",\n\t\t\"html\",\n\t\t\"vue\",\n\t\t{\n\t\t\t\"language\": \"vue\",\n\t\t\t\"autoFix\": true\n\t\t}\n\t],\n\t\"vetur.format.options.tabSize\": 2,\n\t\"vetur.format.options.useTabs\": true,\n\t\"vetur.format.defaultFormatterOptions\": {\n\t\t\"prettier\": {\n\t\t\t// Prettier option here\n\t\t\t\"semi\": false,\n\t\t\t\"tabWidth\": 2,\n\t\t\t\"useTabs\": true,\n\t\t\t\"singleQuote\": true\n\t\t},\n\t\t\"prettyhtml\": {\n\t\t\t\"printWidth\": 100, // No line exceeds 100 characters\n\t\t\t\"singleQuote\": false // Prefer double quotes over single quotes\n\t\t}\n\t},\n\t// prettier 格式化配置\n\t\"prettier.tabWidth\": 2,\n\t\"prettier.useTabs\": true,\n\t\"prettier.singleQuote\": true,\n\t\"prettier.semi\": false,\n\t\"stylusSupremacy.insertColons\": false, // 是否插入冒号\n\t\"stylusSupremacy.insertSemicolons\": false, // 是否插入分好\n\t\"stylusSupremacy.insertBraces\": false, // 是否插入大括号\n\t\"stylusSupremacy.insertNewLineAroundImports\": false, // import之后是否换行\n\t\"stylusSupremacy.insertNewLineAroundBlocks\": false,\n```\n","slug":"eslint-vscode-setting","published":1,"updated":"2018-11-30T10:02:46.237Z","_id":"cjp5ezme8000bhks2z5suae4x","comments":1,"photos":[],"link":"","content":"<blockquote>\n<h2 id=\"第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\"><a href=\"#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\" class=\"headerlink\" title=\"第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"第二步：在任意目录放置-eslintrc-js\"><a href=\"#第二步：在任意目录放置-eslintrc-js\" class=\"headerlink\" title=\"第二步：在任意目录放置.eslintrc.js\"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id=\"第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\"><a href=\"#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\" class=\"headerlink\" title=\"第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id=\"第四步：在-vscode-中的配置\"><a href=\"#第四步：在-vscode-中的配置\" class=\"headerlink\" title=\"第四步：在 vscode 中的配置\"></a>第四步：在 vscode 中的配置</h2></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint config start</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"C:/Users/Mark/.eslint/.eslintrc.js\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">\t<span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prettier option here</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"printWidth\"</span>: <span class=\"number\">100</span>, <span class=\"comment\">// No line exceeds 100 characters</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">false</span> <span class=\"comment\">// Prefer double quotes over single quotes</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// prettier 格式化配置</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h2 id=\"第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\"><a href=\"#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\" class=\"headerlink\" title=\"第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"第二步：在任意目录放置-eslintrc-js\"><a href=\"#第二步：在任意目录放置-eslintrc-js\" class=\"headerlink\" title=\"第二步：在任意目录放置.eslintrc.js\"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id=\"第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\"><a href=\"#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\" class=\"headerlink\" title=\"第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id=\"第四步：在-vscode-中的配置\"><a href=\"#第四步：在-vscode-中的配置\" class=\"headerlink\" title=\"第四步：在 vscode 中的配置\"></a>第四步：在 vscode 中的配置</h2></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint config start</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"C:/Users/Mark/.eslint/.eslintrc.js\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">\t<span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prettier option here</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"printWidth\"</span>: <span class=\"number\">100</span>, <span class=\"comment\">// No line exceeds 100 characters</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">false</span> <span class=\"comment\">// Prefer double quotes over single quotes</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// prettier 格式化配置</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n"},{"layout":"post","title":"Vue二维码组件","subtitle":"vue, qrcode, vueqr, 二维码组件","date":"2018-03-12T08:30:00.000Z","author":"Mark","_content":"\n# vue components\n\n[![npm](https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square)](https://github.com/Jack-In/vueQr-new/master/license)\n\n> ### 快速安装\n\n### install\n\n快速添加 `vueqr-new` 组件到 app 中\n\n```bash\nnpm install --save vueqr-new\n```\n\n### components\n\n```html\n<template>\n  <div>\n    <vue-qr :config=\"config\" :text=\"text\"></vue-qr>\n  </div>\n</template>\n<script>\nimport vueQr from 'vueqr-new';\nconst config = {\n  // 容错等级\n  errorCorrectionLevel: 'H',\n  // 图片类型\n  type: 'image/png',\n  rendererOpts: {\n  quality: 0.3\n  },\n  // 边框与二维码之间的间距\n  margin: 0,\n  // 缩放倍数\n  scale: 4,\n  width: 500,\n  maskPattern:1,\n  color: {\n  dark: '#000000',\n  light : \"#ffffff\"\n  },\n  style: {\n  width: '128px',\n  border: '1px solid #ccc'\n  }\n}\nexport default {\n  data() {\n    return {\n      text: 'https://example.com',\n      config: config\n    }\n  },\n  components: {\n    vueQr\n  }\n}\n</script>\n```\n\n## Component props\n\n| 属性   | 类型   | 属性描述      |\n| ------ | ------ | ------------- |\n| config | Object | qrcode option |\n| text   | String | qrcode value  |\n\n## 参考代码\n\n[\"node-qrcode\"](https://github.com/zpao/qrcode.react)\n\n> ### License\n\n[MIT](https://github.com/Jack-In/vueQr-new/blob/master/LICENSE)\n","source":"_posts/vueqr-new.md","raw":"---\nlayout: post\ntitle: 'Vue二维码组件'\nsubtitle: 'vue, qrcode, vueqr, 二维码组件'\ndate: 2018-03-12 16:30:00\nauthor: 'Mark'\ntags:\n  - 前端开发\n  - Vue\n---\n\n# vue components\n\n[![npm](https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square)](https://github.com/Jack-In/vueQr-new/master/license)\n\n> ### 快速安装\n\n### install\n\n快速添加 `vueqr-new` 组件到 app 中\n\n```bash\nnpm install --save vueqr-new\n```\n\n### components\n\n```html\n<template>\n  <div>\n    <vue-qr :config=\"config\" :text=\"text\"></vue-qr>\n  </div>\n</template>\n<script>\nimport vueQr from 'vueqr-new';\nconst config = {\n  // 容错等级\n  errorCorrectionLevel: 'H',\n  // 图片类型\n  type: 'image/png',\n  rendererOpts: {\n  quality: 0.3\n  },\n  // 边框与二维码之间的间距\n  margin: 0,\n  // 缩放倍数\n  scale: 4,\n  width: 500,\n  maskPattern:1,\n  color: {\n  dark: '#000000',\n  light : \"#ffffff\"\n  },\n  style: {\n  width: '128px',\n  border: '1px solid #ccc'\n  }\n}\nexport default {\n  data() {\n    return {\n      text: 'https://example.com',\n      config: config\n    }\n  },\n  components: {\n    vueQr\n  }\n}\n</script>\n```\n\n## Component props\n\n| 属性   | 类型   | 属性描述      |\n| ------ | ------ | ------------- |\n| config | Object | qrcode option |\n| text   | String | qrcode value  |\n\n## 参考代码\n\n[\"node-qrcode\"](https://github.com/zpao/qrcode.react)\n\n> ### License\n\n[MIT](https://github.com/Jack-In/vueQr-new/blob/master/LICENSE)\n","slug":"vueqr-new","published":1,"updated":"2018-11-30T05:16:41.856Z","_id":"cjp5ezme9000ehks2f1e0vxyt","comments":1,"photos":[],"link":"","content":"<h1 id=\"vue-components\"><a href=\"#vue-components\" class=\"headerlink\" title=\"vue components\"></a>vue components</h1><p><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://github.com/Jack-In/vueQr-new/master/license\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a></p>\n<blockquote>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h3></blockquote>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vueqr-new</span><br></pre></td></tr></table></figure>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vue-qr</span> <span class=\"attr\">:config</span>=<span class=\"string\">\"config\"</span> <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vue-qr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueQr <span class=\"keyword\">from</span> <span class=\"string\">'vueqr-new'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">const</span> config = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 容错等级</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  errorCorrectionLevel: <span class=\"string\">'H'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 图片类型</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  type: <span class=\"string\">'image/png'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  rendererOpts: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  quality: 0.3</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 边框与二维码之间的间距</span></span></span><br><span class=\"line\"><span class=\"undefined\">  margin: 0,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 缩放倍数</span></span></span><br><span class=\"line\"><span class=\"undefined\">  scale: 4,</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 500,</span></span><br><span class=\"line\"><span class=\"undefined\">  maskPattern:1,</span></span><br><span class=\"line\"><span class=\"undefined\">  color: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  dark: <span class=\"string\">'#000000'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  light : <span class=\"string\">\"#ffffff\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  style: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  width: <span class=\"string\">'128px'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  border: <span class=\"string\">'1px solid #ccc'</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://example.com'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      config: config</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    vueQr</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Component-props\"><a href=\"#Component-props\" class=\"headerlink\" title=\"Component props\"></a>Component props</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config</td>\n<td>Object</td>\n<td>qrcode option</td>\n</tr>\n<tr>\n<td>text</td>\n<td>String</td>\n<td>qrcode value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><a href=\"https://github.com/zpao/qrcode.react\" target=\"_blank\" rel=\"noopener\">“node-qrcode”</a></p>\n<blockquote>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3></blockquote>\n<p><a href=\"https://github.com/Jack-In/vueQr-new/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\">MIT</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue-components\"><a href=\"#vue-components\" class=\"headerlink\" title=\"vue components\"></a>vue components</h1><p><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://github.com/Jack-In/vueQr-new/master/license\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a></p>\n<blockquote>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h3></blockquote>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vueqr-new</span><br></pre></td></tr></table></figure>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vue-qr</span> <span class=\"attr\">:config</span>=<span class=\"string\">\"config\"</span> <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vue-qr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueQr <span class=\"keyword\">from</span> <span class=\"string\">'vueqr-new'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">const</span> config = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 容错等级</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  errorCorrectionLevel: <span class=\"string\">'H'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 图片类型</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  type: <span class=\"string\">'image/png'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  rendererOpts: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  quality: 0.3</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 边框与二维码之间的间距</span></span></span><br><span class=\"line\"><span class=\"undefined\">  margin: 0,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 缩放倍数</span></span></span><br><span class=\"line\"><span class=\"undefined\">  scale: 4,</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 500,</span></span><br><span class=\"line\"><span class=\"undefined\">  maskPattern:1,</span></span><br><span class=\"line\"><span class=\"undefined\">  color: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  dark: <span class=\"string\">'#000000'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  light : <span class=\"string\">\"#ffffff\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  style: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  width: <span class=\"string\">'128px'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  border: <span class=\"string\">'1px solid #ccc'</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://example.com'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      config: config</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    vueQr</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Component-props\"><a href=\"#Component-props\" class=\"headerlink\" title=\"Component props\"></a>Component props</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config</td>\n<td>Object</td>\n<td>qrcode option</td>\n</tr>\n<tr>\n<td>text</td>\n<td>String</td>\n<td>qrcode value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><a href=\"https://github.com/zpao/qrcode.react\" target=\"_blank\" rel=\"noopener\">“node-qrcode”</a></p>\n<blockquote>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3></blockquote>\n<p><a href=\"https://github.com/Jack-In/vueQr-new/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\">MIT</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjp5ezme40007hks2b945jedw","category_id":"cjp5ezme20004hks27966ww12","_id":"cjp5ezme9000chks2r0li22m2"},{"post_id":"cjp5ezmdx0001hks2a7xx3wum","category_id":"cjp5ezme20004hks27966ww12","_id":"cjp5ezmeb000fhks2pz3mbicr"},{"post_id":"cjp5ezme50008hks2ew981i07","category_id":"cjp5ezme20004hks27966ww12","_id":"cjp5ezmeb000ghks2bq51g38n"}],"PostTag":[{"post_id":"cjp5ezmdx0001hks2a7xx3wum","tag_id":"cjp5ezme30005hks2fsk4if0l","_id":"cjp5ezmec000ihks2h5xsfkic"},{"post_id":"cjp5ezmdx0001hks2a7xx3wum","tag_id":"cjp5ezme60009hks2wh5nn71v","_id":"cjp5ezmec000jhks2z3gsmcxl"},{"post_id":"cjp5ezmdx0001hks2a7xx3wum","tag_id":"cjp5ezme9000dhks29u8websg","_id":"cjp5ezmec000lhks26a6imfhp"},{"post_id":"cjp5ezmdz0003hks2s66pi5cm","tag_id":"cjp5ezmeb000hhks2i9nnalt8","_id":"cjp5ezmee000ohks2yoctqsvu"},{"post_id":"cjp5ezmdz0003hks2s66pi5cm","tag_id":"cjp5ezmec000khks2hwpzd4fs","_id":"cjp5ezmee000phks2u5eciqze"},{"post_id":"cjp5ezmdz0003hks2s66pi5cm","tag_id":"cjp5ezmec000mhks2lqlhlkq3","_id":"cjp5ezmef000rhks2jyie8dl4"},{"post_id":"cjp5ezme30006hks2yos5gqmx","tag_id":"cjp5ezmeb000hhks2i9nnalt8","_id":"cjp5ezmef000uhks2ipgz6xjt"},{"post_id":"cjp5ezme30006hks2yos5gqmx","tag_id":"cjp5ezmec000khks2hwpzd4fs","_id":"cjp5ezmef000vhks2dzfwo1f7"},{"post_id":"cjp5ezme30006hks2yos5gqmx","tag_id":"cjp5ezmef000shks26gcoom7r","_id":"cjp5ezmeg000xhks2bx3f100l"},{"post_id":"cjp5ezme40007hks2b945jedw","tag_id":"cjp5ezmef000thks2jkzhr9vn","_id":"cjp5ezmeg0010hks27s1fsy49"},{"post_id":"cjp5ezme40007hks2b945jedw","tag_id":"cjp5ezmeg000whks2aj482mpn","_id":"cjp5ezmeh0011hks2icv3eq6s"},{"post_id":"cjp5ezme40007hks2b945jedw","tag_id":"cjp5ezme9000dhks29u8websg","_id":"cjp5ezmeh0013hks20ew6g52k"},{"post_id":"cjp5ezme50008hks2ew981i07","tag_id":"cjp5ezmeg000zhks2hidvczrg","_id":"cjp5ezmeh0016hks2ms6dx9s5"},{"post_id":"cjp5ezme50008hks2ew981i07","tag_id":"cjp5ezmeh0012hks2gmccyrg0","_id":"cjp5ezmei0017hks20z8woc8p"},{"post_id":"cjp5ezme50008hks2ew981i07","tag_id":"cjp5ezme9000dhks29u8websg","_id":"cjp5ezmei0019hks2a2eyuzjz"},{"post_id":"cjp5ezme7000ahks215fwx7a1","tag_id":"cjp5ezmeb000hhks2i9nnalt8","_id":"cjp5ezmei001bhks2pfoqip1j"},{"post_id":"cjp5ezme7000ahks215fwx7a1","tag_id":"cjp5ezmei0018hks23pllxe8e","_id":"cjp5ezmei001chks27s5drxkg"},{"post_id":"cjp5ezme8000bhks2z5suae4x","tag_id":"cjp5ezmeb000hhks2i9nnalt8","_id":"cjp5ezmej001hhks2urzy8w3l"},{"post_id":"cjp5ezme8000bhks2z5suae4x","tag_id":"cjp5ezmec000khks2hwpzd4fs","_id":"cjp5ezmek001ihks2f2a7cfx6"},{"post_id":"cjp5ezme8000bhks2z5suae4x","tag_id":"cjp5ezmej001ehks2f8npuu1i","_id":"cjp5ezmek001khks2xgb3ljy0"},{"post_id":"cjp5ezme8000bhks2z5suae4x","tag_id":"cjp5ezmej001fhks27iht9iki","_id":"cjp5ezmek001lhks24irm1zy9"},{"post_id":"cjp5ezme9000ehks2f1e0vxyt","tag_id":"cjp5ezmeb000hhks2i9nnalt8","_id":"cjp5ezmek001mhks24z70h4tt"},{"post_id":"cjp5ezme9000ehks2f1e0vxyt","tag_id":"cjp5ezmek001jhks2rr366iwu","_id":"cjp5ezmek001nhks20kfrrg72"}],"Tag":[{"name":"模块化","_id":"cjp5ezme30005hks2fsk4if0l"},{"name":"规范","_id":"cjp5ezme60009hks2wh5nn71v"},{"name":"JS","_id":"cjp5ezme9000dhks29u8websg"},{"name":"前端开发","_id":"cjp5ezmeb000hhks2i9nnalt8"},{"name":"JavaScript","_id":"cjp5ezmec000khks2hwpzd4fs"},{"name":"翻译","_id":"cjp5ezmec000mhks2lqlhlkq3"},{"name":"JS时间处理","_id":"cjp5ezmef000shks26gcoom7r"},{"name":"Webpack3.10","_id":"cjp5ezmef000thks2jkzhr9vn"},{"name":"语法","_id":"cjp5ezmeg000whks2aj482mpn"},{"name":"vue","_id":"cjp5ezmeg000zhks2hidvczrg"},{"name":"vuex","_id":"cjp5ezmeh0012hks2gmccyrg0"},{"name":"Markdown","_id":"cjp5ezmei0018hks23pllxe8e"},{"name":"VSCode","_id":"cjp5ezmej001ehks2f8npuu1i"},{"name":"ESLint","_id":"cjp5ezmej001fhks27iht9iki"},{"name":"Vue","_id":"cjp5ezmek001jhks2rr366iwu"}]}}