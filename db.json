{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/muse.js","path":"js/src/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/05/1.jpg","path":"assets/img/2019/05/1.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2015/09/keep-calm-and-learn-javascript.png","path":"assets/img/2015/09/keep-calm-and-learn-javascript.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2018/12/1.png","path":"assets/img/2018/12/1.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2018/12/2.png","path":"assets/img/2018/12/2.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2018/12/20150424040700733.jpg","path":"assets/img/2018/12/20150424040700733.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2015/09/javascript-java.jpg","path":"assets/img/2015/09/javascript-java.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/1.png","path":"assets/img/2019/03/1.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/2.png","path":"assets/img/2019/03/2.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/6.png","path":"assets/img/2019/03/6.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/3.png","path":"assets/img/2019/03/3.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/5.png","path":"assets/img/2019/03/5.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2018/12/vue3.0.png","path":"assets/img/2018/12/vue3.0.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/4.png","path":"assets/img/2019/03/4.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/7.gif","path":"assets/img/2019/03/7.gif","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/8.gif","path":"assets/img/2019/03/8.gif","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"f662bb4520cc143f3bfd10d9aded79b859934562","modified":1548211356788},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1548211356894},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1548211356896},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1548211356896},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1548211356895},{"_id":"themes/next/.gitignore","hash":"0378adb9c2dc4855b3198184df4863cb30e4059c","modified":1548211356903},{"_id":"themes/next/.all-contributorsrc","hash":"0ca0200bb5cba4cd157f2cb74703c4cb4c29cda5","modified":1548211356892},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1548211356903},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1548211356904},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1548211356904},{"_id":"themes/next/README.md","hash":"943f9fd6ed1781350cdd05a26a1cfad24d035c8b","modified":1548211356905},{"_id":"themes/next/_config.yml","hash":"dda744603c850ef4ae539d719d6dfb51e01e26d5","modified":1554687302270},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1548211356907},{"_id":"themes/next/bower.json","hash":"b17bf6ad5dd98d60129a0827b48b59f2f349b7be","modified":1548211356907},{"_id":"themes/next/gulpfile.coffee","hash":"67eaf2515100971f6195b60eeebbfe5e8de895ab","modified":1548211356924},{"_id":"themes/next/package.json","hash":"159d8e0a65ad1f9457745e4864d6a882238d1df7","modified":1548211357006},{"_id":"source/_posts/DayJs.md","hash":"ae911d173e2ad2a168c944b35a759a47ca4c46e0","modified":1553497567837},{"_id":"source/_posts/JavaScript-modules.md","hash":"2ebf4d6845be4667d2fef37b83ce0b46801835e9","modified":1553497567839},{"_id":"source/_posts/ES6语法（一）.md","hash":"165a9b5bdb9f16683b415c794b11ce74296cda78","modified":1553499524081},{"_id":"source/_posts/NPM-Error.md","hash":"e412e7179b3bb556e285c8c794126221319cacb9","modified":1559029934061},{"_id":"source/_posts/JavaScript的版本是怎么回事.md","hash":"fe844bd9935a07644854c1c73a223fe503ca0826","modified":1553497567841},{"_id":"source/_posts/Vue3.0.md","hash":"b74974f750b83fb01cec868da5d8ed1263ec90fb","modified":1553497567843},{"_id":"source/_posts/mac常用软件.md","hash":"e76e854942fcd30136fe82af9feeda4fdfc8a0d1","modified":1560131416052},{"_id":"source/_posts/Webpack.md","hash":"e9000be25dc9632d57a05c38b69d1dc59ec5c4c4","modified":1553497567847},{"_id":"source/_posts/Vuex.md","hash":"3fb123cb2a94331b84cd67647751983d1ba3f534","modified":1553497567845},{"_id":"source/_posts/eslint-vscode-setting.md","hash":"443835ad214254f10e1c90b45ffafaf5ab1c4866","modified":1553497567849},{"_id":"source/_posts/stylus语法笔记.md","hash":"e7f536acdbe2846850c170c2e54179a8959d2e0c","modified":1559030092408},{"_id":"source/_posts/shell脚本学习.md","hash":"b93759f52d23f4add0e9e8860319b04e7bff50f5","modified":1553497567851},{"_id":"source/_posts/typora.md","hash":"7f69e0bf138e69e57f7bbbfb6c74acae709c4fdf","modified":1553497567853},{"_id":"source/_posts/vueqr-new.md","hash":"766736fcbc52fa4b4e7ac23068be9448fd2a5fc4","modified":1553497567855},{"_id":"source/_posts/命令行配置代理服务.md","hash":"3f15be5dc0337d8d5e5537ec5e57358f57552a5a","modified":1553497567856},{"_id":"source/_posts/聊聊网络中的传输协议.md","hash":"99810175447575a5cc054455f141edb7443ba251","modified":1553501517368},{"_id":"source/_posts/掘金文档编辑器使用方法.md","hash":"fed9a3d00200f837f629c8b67ec8a02a50707fcb","modified":1553497567858},{"_id":"source/tags/index.md","hash":"8165f1196a1928fd16bb83abfed9cc1bea63a6d6","modified":1548211356805},{"_id":"source/categories/index.md","hash":"25cbcfa9f70bfeb3a6527c913de351a18bfd0998","modified":1548211356804},{"_id":"source/about/index.md","hash":"6b0bd4d9442433ef505c95bcfc533739b9cf7da0","modified":1548211356803},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"40b0fd9fdb8586fab98e23f713940e7a2f80e2f9","modified":1548211356899},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1548211356900},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1548211356901},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"22f2ccc5522563b67c8663849fc1d6cbae93a8ff","modified":1548211356898},{"_id":"themes/next/.github/stale.yml","hash":"a24e464fa77d6687010ffe89af9aa10cb1270efe","modified":1548211356902},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"557cc83af06b46418fd4d18e2ddcfd56bd5d69c6","modified":1548211356901},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1548211356909},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1dada3c3404445a00367882b8f97cdf092b7943d","modified":1548211356910},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1548211356910},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1548211356913},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1548211356911},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1548211356912},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1548211356914},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1548211356914},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1548211356915},{"_id":"themes/next/languages/de.yml","hash":"641e49587d41bb87e4d5932dc3d975754ded7953","modified":1548211356925},{"_id":"themes/next/languages/default.yml","hash":"404d8782bc99733bb544b276d6b307f7035bdd19","modified":1548211356926},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1548211356927},{"_id":"themes/next/languages/id.yml","hash":"9709a4dbacc56a1571a96b139b872128d6959e90","modified":1548211356928},{"_id":"themes/next/languages/fr.yml","hash":"ebcd1f188af8c3f5ef1f0923e794c839fbfae2d4","modified":1548211356927},{"_id":"themes/next/languages/ja.yml","hash":"82afb0a5637ad67065fa5b2624fa56c7c240c3c6","modified":1548211356930},{"_id":"themes/next/languages/it.yml","hash":"4e3adeb10c0fa627935d69ae1783ce0894f5dee5","modified":1548211356929},{"_id":"themes/next/languages/ko.yml","hash":"33e065ceb21590b8eb32430a69e76c2f057eb758","modified":1548211356930},{"_id":"themes/next/languages/nl.yml","hash":"060efc260c1c529469d739d97dcee79683e8f411","modified":1548211356931},{"_id":"themes/next/languages/pt-BR.yml","hash":"dc09e290e908744ca28e093dbdd859ca2a20290e","modified":1548211356931},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1548211356933},{"_id":"themes/next/languages/pt.yml","hash":"53e2a52b9d5dc20c04080acd4f5b954e8699780f","modified":1548211356932},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1548211356933},{"_id":"themes/next/languages/vi.yml","hash":"e2b3b18359ab41d58c64b2002acfedd60a7505a4","modified":1548211356934},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1548211356934},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1548211356935},{"_id":"themes/next/languages/zh-hk.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1548211356936},{"_id":"themes/next/languages/zh-tw.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1548211356936},{"_id":"themes/next/layout/_layout.swig","hash":"506af7d22dba0fb31815dd445bc4fe8d774138d1","modified":1553497624687},{"_id":"themes/next/layout/archive.swig","hash":"4b53070008775ecfd03953bd1b4adfcb0fabcaac","modified":1548211357002},{"_id":"themes/next/layout/category.swig","hash":"f0e3338bfa5efb205d2c28e635e9611f1fff3b55","modified":1548211357003},{"_id":"themes/next/layout/page.swig","hash":"1d28997ec69d3c236c0dac86cc7a8fbcfdbbb03f","modified":1548211357004},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1548211357003},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1548294883947},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1548211357005},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1548211357005},{"_id":"themes/next/layout/tag.swig","hash":"7cda2822e50b9fee9848a6b81e6c2d1aca830aeb","modified":1548211357006},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1548211357012},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1548211357013},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1548211357171},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1548211357170},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1548211357172},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548211357115},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1548211356917},{"_id":"themes/next/docs/ru/README.md","hash":"0b69e831b4617f801d9b49e8ce810daacbbee6c1","modified":1548211356917},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1548211356916},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1548211356918},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"9b512cb820627fcc45c9f77c7a122aa99e021bd5","modified":1548211356920},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"e771c5b745608c6fb5ae2fa1c06c61b3699627ec","modified":1548211356919},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1548211356921},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"6ea741f380dc3e90661d12db7e115a94b77643a4","modified":1548211356920},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1548211356922},{"_id":"themes/next/docs/zh-CN/README.md","hash":"7fb215a0a633384948ac9228ac14617b4a974dbd","modified":1548211356923},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1548211356923},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1548211356923},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1548211356922},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1548211356943},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"838686a5d2c3ae5c03b69842e931d9efe276e55a","modified":1548211356944},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1548211356938},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"6337747816219616916e73bdfd6961a164f872cf","modified":1548211356965},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1548211356938},{"_id":"themes/next/layout/_macro/post.swig","hash":"799bd11921682c51db6cb92ed57b6a8679c93ee1","modified":1548211356943},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1548211356939},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"c31d54154eed347f603009d2d65f7bf8d9a6885a","modified":1548211356966},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1548211356966},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"68ad21aef6481d014e7ec0b674e469f2f82ea231","modified":1548211356971},{"_id":"themes/next/layout/_partials/comments.swig","hash":"54afb7b78509ed8fac5d23daecc147b0fe615d1d","modified":1548211356945},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"710ae10cb6cafc21e40c57dd9b31f0980b030f4b","modified":1548211356947},{"_id":"themes/next/layout/_partials/footer.swig","hash":"6d56acdcdc12ebca9c1d90f8a2b52ad17aafca6e","modified":1548211356946},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1548211356955},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1548211356955},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1548211356983},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"c80b04aabdeef0e03a08284c82324089710abd45","modified":1548211356989},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"9e00cb9b3fdfe2e2c4877a874d0d3ecb7fd0f3ee","modified":1548211356989},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1548211356992},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1548211356993},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"d66dec72ea7ad5026260914e3545551645e0ab37","modified":1548211356994},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"f58463133bf8cfef5ff07f686b834ff8cbbe492f","modified":1548211356996},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1548211356994},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"85ca359866325ce82f5f0f88576fae13a763b5eb","modified":1548211356995},{"_id":"themes/next/source/assets/favicon.ico","hash":"ba0db0cdbb8c05d884e318e5bbcefe14189ddfd3","modified":1548211357021},{"_id":"themes/next/source/assets/loading.svg","hash":"d77439be54c0b3a5e96791aad5f352939cd5a2f4","modified":1548211357028},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1548211357114},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1548211357117},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1548211357116},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1548211357118},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1548211357120},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1548211357120},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1548211357123},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1548211357121},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1548211357122},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1548211357122},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1548211357124},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548211357126},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1548211357125},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1548211357126},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1548211357127},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1548211357124},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1548211357129},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1548211357129},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1548211357128},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1548211357010},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"3db90c52bc8af57c6fa4a9dbdc524e1ecdc8b7b1","modified":1548211357011},{"_id":"themes/next/scripts/tags/button.js","hash":"dba55534ef4a11fb6723ec73e3ef4dcf7589ed9f","modified":1548211357014},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1548211357015},{"_id":"themes/next/scripts/tags/exturl.js","hash":"e9dab948e6327b22b4fc0c66cf97f6600a444dd5","modified":1548211357015},{"_id":"themes/next/scripts/tags/full-image.js","hash":"b2ed8de4065c302fac1654f0d3d3ecb5fa6e0f80","modified":1548211357016},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"03575b534303f42c81ba6187ec601a5578913a39","modified":1548211357016},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1548211357017},{"_id":"themes/next/scripts/tags/label.js","hash":"48f68ab33d42e638c2ab5f89f40c34fc2fa1e6dc","modified":1548211357018},{"_id":"themes/next/scripts/tags/note.js","hash":"f1b560d6e63d1b06fd80e12bbac32660125c223c","modified":1548211357018},{"_id":"themes/next/scripts/tags/tabs.js","hash":"ca885c8fa46a76a7b8977730575551622497410b","modified":1548211357018},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548211357087},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548211357088},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548211357090},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548211357112},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1548211357114},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1548211356941},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1548211356942},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1548211356968},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"23c6d15aa2a305f9d29caee1b60cfae84d32fa09","modified":1548211356970},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1548211356969},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"84018384d00e4a584d613589adae6674a3060a36","modified":1548211356970},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"e0f0a753d4920ffb37ddbc8270515654a0b9b92a","modified":1548211356967},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1548211356951},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"2177da1d3c64abb6b3398f90885cf543ae6fe6da","modified":1548211356950},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"e92154bf3d46127aa51858734da3a295944cf883","modified":1548211356951},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1548211356948},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1548211356952},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"4b53a0659a7e800871d8e9a4bd20f7b892a8e29b","modified":1548211356948},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"187316a1d565f98eac138b5ce2180b52a190028c","modified":1548211356949},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"0949c72a944b9abd5e5cc654b5556ac9450d431b","modified":1548211356959},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1548211356961},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"55de88525c05af6053524c78ef4b42b46c3bfb6d","modified":1548211356956},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f6454c452b2e90a8c760321bce7e3dc6119b71fa","modified":1548211356960},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1548211356962},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1548211356957},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1548211356961},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"b6e7d0af24b4d52d168a4eb0fb29bffa69621395","modified":1548211356958},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1548211356954},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1548211356972},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"daa6e5b7dbc409d6bf8a031d5413d8229e9c0995","modified":1548211356953},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1548211356974},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1548211356973},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1548211356976},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1548211356975},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42a2f9e708100d63dac55bb8e1ca5f024e4e1162","modified":1548211356979},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1548211356977},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"69d7697cbf423efad54d47dad038a5afc2e02695","modified":1548211356979},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1548211356980},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1548211356978},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"a4d752d17ddfc579730401ff3e3dfd4ec290c8de","modified":1548211356981},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1548211356981},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1548211356982},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1548211356963},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"6143aa0ed0d9bbe24c5859f66ea0a5611d73ecd2","modified":1548211356982},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1548211356963},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"0110cdf5233de4d26ccddd1e84497b0fd18d16fa","modified":1548211356964},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"bd529bf26f28745eb8ded3be7652d33d55fec8d4","modified":1548211356987},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1548211356984},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1548211356985},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1548211356987},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8bcc3430241e267a06abfbb4e9ca125838bc5a71","modified":1548211356985},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"0149e803ed7d30163df3b3ba3f578e5584a2e4af","modified":1548211356986},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1548211356990},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"bd6d763c1233cd89512c323ce0992daf7f9fd0e5","modified":1548211356988},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1548211356991},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1548211356999},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"6f7217ff64cf67ee239954d3499a3c9e76bad061","modified":1548211356992},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1548211357001},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1548211357000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"ce101432cca9cc174730eb75ca65185b2cb2e456","modified":1548211357002},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1548211357087},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1548211357086},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"8aa98ae349908736ba43196c42498fd5bdeb780a","modified":1548211357089},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1548211357110},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"d1deb849e697cfb6258b8ab7bfb47e219210ccd9","modified":1548211357089},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1548211357111},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e37aab667be94576f6145b61a78cfe87836c68b6","modified":1548211357113},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1548211357112},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1548211357131},{"_id":"themes/next/source/js/src/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1548211357131},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1548211357133},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"c7e2a588b679d46379124141bb2f30bc2f3210e2","modified":1548211357132},{"_id":"themes/next/source/js/src/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1548211357133},{"_id":"themes/next/source/js/src/motion.js","hash":"e70f961d24e4e61a2df5bf640ab51acee8f1ffbd","modified":1548211357134},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1548211357137},{"_id":"themes/next/source/js/src/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1548211357135},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1548211357137},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1548211357140},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1548211357140},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1548211357140},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1548211357142},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1548211357141},{"_id":"themes/next/source/js/src/utils.js","hash":"e1dc6941b3c545dd0c1f71b49ac277673dfca61a","modified":1548211357138},{"_id":"themes/next/scripts/filters/after_post_render/exturl.js","hash":"bfa8e5a91d22a5ba22e8f3da337fdb5e8b2600fd","modified":1548211357009},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1548211357160},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1548211357161},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1548211357158},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1548211357152},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"89e41d4c298d8d70b4d1c833c7e599d089f2b3d4","modified":1548211356998},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1548211356999},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"bbb788b453236e5b4af7c81df8efcfc6bde08903","modified":1548211357031},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1548211357033},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1548211357031},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1548211357034},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1548211357032},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1548211357048},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1548211357066},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"c0e8647244e1ef106e94c3c8ac4a64bca2677159","modified":1548211357081},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"cb2c0beb69bfc56c0ed86e609bc1c35edb799b99","modified":1548211357082},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"33a74fcd6c38cea356f6d2994a19f46dcfd5d8a4","modified":1548211357083},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1548211357080},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1548211357093},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1548211357084},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1548211357097},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"fc491fd2d53d338f63e1be7d3ed312f8065c7b93","modified":1548211357085},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"eecb2081ee1eef1e2152c7fea9310366e33b1eac","modified":1548211357094},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1548211357084},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"a80782a6eb3b40da2e14251da49069aff3115d8a","modified":1548211357096},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1548211357095},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1548211357097},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"15254414a52f05618c54a2ac7f4635f99077ec30","modified":1548211357098},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1548211357100},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1548211357101},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"9f35b95beb344f4eeca5ca584fbe7206f791372e","modified":1548211357102},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"b26f8a3394d8357a5bfd24d9f8bf62d7b4063ebb","modified":1548211357103},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4ed12bf17eeb7cd4f22dd01fdd486cda68d169a8","modified":1548211357101},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"30d61fa31e405fcfe3d2ff6174ccad60be1745f9","modified":1548211357105},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"5f1e5d7b9d44ef3e6ad442e083753fee76d3b112","modified":1548211357092},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1548211357106},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"11fcaaf7524445a194801e1048ea2fb84b316414","modified":1548211357106},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"28f0444ccdc85a34ada651d8ee52479e16311167","modified":1548211357105},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"a558803ca81cceae2bdc22c18ef638fcc023681b","modified":1548211357109},{"_id":"themes/next/source/images/avatar.jpg","hash":"31f88e9f01cb534295db44a66f416f6db3661ed7","modified":1548211357119},{"_id":"themes/next/source/js/src/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1548211357136},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"a5395766dfdda81285d0cd3ddebe8e8bc924fa2a","modified":1548211357107},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1548211357143},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1548211357108},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1548211357145},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1548211357136},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1548211357144},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1548211357154},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1548211357155},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548211357149},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1548211357157},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548211357150},{"_id":"themes/next/source/assets/img/2019/05/1.jpg","hash":"cfc27ba2f7170215ba6c3a39882783a3a674a6fd","modified":1559027124153},{"_id":"themes/next/source/assets/img/2015/09/keep-calm-and-learn-javascript.png","hash":"49ea101b92ce5e136a19e6b11162f8f4126fe01f","modified":1553497567864},{"_id":"themes/next/source/assets/img/2018/12/1.png","hash":"c0da87336253505de3e80efcf137f84438b232f7","modified":1548211357023},{"_id":"themes/next/source/assets/img/2018/12/2.png","hash":"7b624b329a64bfc80597c2f8d4b19a0746462c15","modified":1548211357024},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1548211357035},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"34f5ac3c1ed2dd31e9297cc4c0733e71bc2e252f","modified":1548211357036},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"48bb741f6bda73b322a25a8fbe37fd3d5e0ff601","modified":1548211357036},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1548211357037},{"_id":"themes/next/source/assets/img/2018/12/20150424040700733.jpg","hash":"ed44fe3152e8e2841218b8346884b47eb96d5b6f","modified":1548211357025},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1548211357040},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1ec3102ee8f5b8cc0877da1fd109d37470401e7b","modified":1548211357038},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1548211357039},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1548211357043},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1548211357044},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1548211357038},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1548211357045},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"ad4cae23c8e383f4fabc9a2a95bca6055020d22e","modified":1548211357046},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1548211357046},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"32bbf059c57677e754a918c927ac63e2d843108f","modified":1548211357041},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1548211357050},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1548211357049},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1548211357042},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"77da38898bdd99cf8fd3e0ae8cc4d2ac943bcb60","modified":1548211357051},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"db1df0186a4572844d69d0d7bb974bd120cb64d5","modified":1548211357047},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1548211357052},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"3241c9ae85ca11b6c4e125ac471aa4342ba1ce9c","modified":1548211357049},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"8478b51892b663f39f7eb830476315e804cbf037","modified":1548211357051},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"2ea91d7b75966d471bf857a9f3fbf87fd01aea90","modified":1548211357054},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"330c8884efb5612e7eb03986d87d29e8b0651974","modified":1548211357052},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1548211357055},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"7b69c1ad392f8a386854e318d4c8ddeb9ba8d793","modified":1548211357053},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1548211357056},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1548211357057},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"989b7d718914b5242506947aa5767b3f2480d8f9","modified":1548211357054},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1548211357056},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"fa57ec9a6f1943c0558856dfba2d6b8faca0cd4d","modified":1548211357059},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"2e36956c5f8802f703c7ce3893d16323a0e09d4c","modified":1548211357058},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1548211357057},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"4c1705e5c3fbf0e3f5d3fb29edec4a29c87b4c95","modified":1548211357062},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"41858f2dfd34a57d0a2016b1bce08efb61943b7a","modified":1548211357061},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1548211357061},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"2e26e4429c2457b8ca12555426659c2fc65a5cea","modified":1548211357059},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"dd5f7057680faefc9306fab3172106f762c1a517","modified":1548211357063},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1548211357063},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"4ec203c52db47bca67c229ef1f3693c9d40b4ef9","modified":1548211357065},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"b9a19654b6a2685b5426afac8b09cdbd80fae00c","modified":1548211357064},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"49913bb2b702d52d77528cd9378126aa67c0082c","modified":1548211357075},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1548211357077},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1548211357074},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1548211357076},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"74412b0bf4ec0d28aedd2e60b27affd4d5cd1452","modified":1548211357078},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"f1fdfd0bc6b66a38581a4fbe096b25aadfc53246","modified":1548211357065},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3529aae283864fa0f09925ee8217905632e9a930","modified":1548211357079},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"f26c32a0c3045e5ae826b983abc3a3c139456663","modified":1548211357073},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1548211357076},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1548211357068},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1548211357069},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1548211357069},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1548211357067},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"72cabf6edfd64697e37950cc3e66fbea6ba47b66","modified":1548211357070},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"f1640253cbbf71d0c04c34c25bd61045894f98bc","modified":1548211357072},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"2937e566ad0f3d9adc0865b269fdca62b7576fdd","modified":1548211357071},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"30ccc107061dc23943198f087759079161ee24e9","modified":1548211357071},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1548211357099},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1548211357099},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1548211357103},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548211357148},{"_id":"themes/next/source/assets/img/2015/09/javascript-java.jpg","hash":"881e35e241a8be40f3c4e3a6f57d5402247c1eb3","modified":1553497567863},{"_id":"themes/next/source/assets/img/2019/03/1.png","hash":"d24107702e6ef2c76ff57544e3e68005427f79db","modified":1553494171500},{"_id":"themes/next/source/assets/img/2019/03/2.png","hash":"a432643b87906096f024dfdb112fd336752be04f","modified":1553494083752},{"_id":"themes/next/source/assets/img/2019/03/6.png","hash":"c7d4aafc9d12aa7ce157772647d9a32ffa0c8a16","modified":1553494154839},{"_id":"themes/next/source/assets/img/2019/03/3.png","hash":"00ea669d02c56d205070273d58ca6e53aa916ac4","modified":1553494104671},{"_id":"themes/next/source/assets/img/2019/03/5.png","hash":"87f5fa5979fa9ac6b7668dde15a8673e2b07b18e","modified":1553494139842},{"_id":"themes/next/source/assets/img/2018/12/vue3.0.png","hash":"f2c6dde342f8a0d79264d02937e323b80f0a81d9","modified":1548211357028},{"_id":"themes/next/source/assets/img/2019/03/4.png","hash":"b9a94d35ec9df94de01f4840fda2f901c2cc2580","modified":1553494118596},{"_id":"themes/next/source/assets/img/2019/03/7.gif","hash":"13e16c6955cd6261a95520df3e828c769b80ade1","modified":1553494176854},{"_id":"themes/next/source/assets/img/2019/03/8.gif","hash":"0e19db0df5a10a28d0be9201319f137d47515a3f","modified":1553494185125}],"Category":[{"name":"JavaScript","_id":"cjwppw0ir0004f8czphwnuyki"},{"name":"Vue","_id":"cjwppw0j6000lf8cz98s9gwfh"},{"name":"Mac","_id":"cjwppw0jj000yf8czdma0ckov"},{"name":"系统命令","_id":"cjwppw0jt0016f8cza51c9fx5"},{"name":"软件工具","_id":"cjwppw0k2001df8czen89oy2r"},{"name":"系统","_id":"cjwppw0k7001jf8cz0wx7u4v3"},{"name":"网站应用","_id":"cjwppw0k9001nf8czg2uac8jp"},{"name":"网络传输协议","_id":"cjwppw0kc001qf8cz8pqxpg3w"}],"Data":[],"Page":[{"type":"tags","layout":"tags","date":"2014-12-22T04:39:04.000Z","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntype: tags\nlayout: \"tags\"\ndate: 2014-12-22 12:39:04\ncomments: false\n---\n","updated":"2019-01-23T02:42:36.805Z","path":"tags/index.html","title":"","_id":"cjwppw0im0001f8cz9yzn9ito","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2014-12-22T04:39:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-01-23T02:42:36.804Z","path":"categories/index.html","title":"","layout":"page","_id":"cjwppw0ip0003f8czk8ttwbdd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"This is my self introduction.","layout":"about","_content":"\nThis is my self introduction.\n","source":"about/index.md","raw":"---\ntitle: This is my self introduction.\nlayout: about\n---\n\nThis is my self introduction.\n","date":"2019-01-23T02:42:36.803Z","updated":"2019-01-23T02:42:36.803Z","path":"about/index.html","comments":1,"_id":"cjwppw0iu0007f8czxf0ngxzk","content":"<p>This is my self introduction.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is my self introduction.</p>\n"}],"Post":[{"title":"NPM error \"npm Cannot read property 'length' of undefined\"","subtitle":"NPM error","date":"2019-05-28T06:59:35.000Z","author":"Mark","_content":"\n### 问题\n\n- 出现错误版本`npm 6.9.0`\n\n```bash\n  npm -g outdated\n  # 检测所有全局依赖包更新情况\n```\n\n- 报错显示\n\n![image](/assets/img/2019/05/1.jpg)\n\n### 修复方法\n\n```javascript\n// 148行\nvar columns = [\n\tdepname,\n\thas || \"MISSING\",\n\twant,\n\tlatest,\n\tdeppath || \"global\" // 此处修改为这样\n]\n```\n\n### 参考资料\n\n- [\"npm-outdated-throw-an-error-cannot-read-property-length-of-undefined\"](https://npm.community/t/npm-outdated-throw-an-error-cannot-read-property-length-of-undefined/5929)\n- [\"npm Cannot read property 'length' of undefined\"](https://github.com/npm/cli/commit/d07547154eb8a88aa4fde8a37e128e1e3272adc1#diff-3d20499d58f14c6f1edfe93d8ba8a8a2)\n","source":"_posts/NPM-Error.md","raw":"---\ntitle: NPM error \"npm Cannot read property 'length' of undefined\"\nsubtitle: \"NPM error\"\ndate: 2019-05-28 14:59:35\nauthor: \"Mark\"\ncategories: JavaScript #分类\ntags:\n  - 前端开发\n  - JavaScript\n  - NPM\n  - NodeJs\n---\n\n### 问题\n\n- 出现错误版本`npm 6.9.0`\n\n```bash\n  npm -g outdated\n  # 检测所有全局依赖包更新情况\n```\n\n- 报错显示\n\n![image](/assets/img/2019/05/1.jpg)\n\n### 修复方法\n\n```javascript\n// 148行\nvar columns = [\n\tdepname,\n\thas || \"MISSING\",\n\twant,\n\tlatest,\n\tdeppath || \"global\" // 此处修改为这样\n]\n```\n\n### 参考资料\n\n- [\"npm-outdated-throw-an-error-cannot-read-property-length-of-undefined\"](https://npm.community/t/npm-outdated-throw-an-error-cannot-read-property-length-of-undefined/5929)\n- [\"npm Cannot read property 'length' of undefined\"](https://github.com/npm/cli/commit/d07547154eb8a88aa4fde8a37e128e1e3272adc1#diff-3d20499d58f14c6f1edfe93d8ba8a8a2)\n","slug":"NPM-Error","published":1,"updated":"2019-05-28T07:52:14.061Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwppw0ij0000f8czz97hi98e","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li>出现错误版本<code>npm 6.9.0</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g outdated</span><br><span class=\"line\"><span class=\"comment\"># 检测所有全局依赖包更新情况</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>报错显示</li>\n</ul>\n<p><img src=\"/assets/img/2019/05/1.jpg\" alt=\"image\"></p>\n<h3 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 148行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> columns = [</span><br><span class=\"line\">\tdepname,</span><br><span class=\"line\">\thas || <span class=\"string\">\"MISSING\"</span>,</span><br><span class=\"line\">\twant,</span><br><span class=\"line\">\tlatest,</span><br><span class=\"line\">\tdeppath || <span class=\"string\">\"global\"</span> <span class=\"comment\">// 此处修改为这样</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0uY29tbXVuaXR5L3QvbnBtLW91dGRhdGVkLXRocm93LWFuLWVycm9yLWNhbm5vdC1yZWFkLXByb3BlcnR5LWxlbmd0aC1vZi11bmRlZmluZWQvNTkyOQ==\" title=\"https://npm.community/t/npm-outdated-throw-an-error-cannot-read-property-length-of-undefined/5929\">“npm-outdated-throw-an-error-cannot-read-property-length-of-undefined”<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25wbS9jbGkvY29tbWl0L2QwNzU0NzE1NGViOGE4OGFhNGZkZThhMzdlMTI4ZTFlMzI3MmFkYzEjZGlmZi0zZDIwNDk5ZDU4ZjE0YzZmMWVkZmU5M2Q4YmE4YThhMg==\" title=\"https://github.com/npm/cli/commit/d07547154eb8a88aa4fde8a37e128e1e3272adc1#diff-3d20499d58f14c6f1edfe93d8ba8a8a2\">“npm Cannot read property ‘length’ of undefined”<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li>出现错误版本<code>npm 6.9.0</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g outdated</span><br><span class=\"line\"><span class=\"comment\"># 检测所有全局依赖包更新情况</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>报错显示</li>\n</ul>\n<p><img src=\"/assets/img/2019/05/1.jpg\" alt=\"image\"></p>\n<h3 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 148行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> columns = [</span><br><span class=\"line\">\tdepname,</span><br><span class=\"line\">\thas || <span class=\"string\">\"MISSING\"</span>,</span><br><span class=\"line\">\twant,</span><br><span class=\"line\">\tlatest,</span><br><span class=\"line\">\tdeppath || <span class=\"string\">\"global\"</span> <span class=\"comment\">// 此处修改为这样</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://npm.community/t/npm-outdated-throw-an-error-cannot-read-property-length-of-undefined/5929\" target=\"_blank\" rel=\"noopener\">“npm-outdated-throw-an-error-cannot-read-property-length-of-undefined”</a></li>\n<li><a href=\"https://github.com/npm/cli/commit/d07547154eb8a88aa4fde8a37e128e1e3272adc1#diff-3d20499d58f14c6f1edfe93d8ba8a8a2\" target=\"_blank\" rel=\"noopener\">“npm Cannot read property ‘length’ of undefined”</a></li>\n</ul>\n"},{"layout":"post","title":"DayJs使用","subtitle":"eslint-vscode-setting","date":"2018-11-29T16:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","top":1,"_content":"\n<p align=\"center\">\n\t<a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t<img width=\"550\" src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\">\n\t</a>\n</p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<br>\n<p align=\"center\">\n\t<a href=\"https://unpkg.com/dayjs/dayjs.min.js\">\n\t\t<img\n\t\t\tsrc=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n\t\t\talt=\"Gzip Size\">\n\t</a>\n\t<a href=\"https://www.npmjs.com/package/dayjs\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a>\n\t<a href=\"https://travis-ci.org/iamkun/dayjs\">\n\t\t<img src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\">\n\t</a>\n\t<a href=\"https://codecov.io/gh/iamkun/dayjs\">\n\t\t<img src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\">\n\t</a>\n\t<a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\">\n\t\t<img src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n\t<br>\n\t<a href=\"https://saucelabs.com/u/dayjs\">\n\t\t<img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n\t</a>\n</p>\n\n> Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js\n\n```js\ndayjs()\n  .startOf(\"month\")\n  .add(1, \"day\")\n  .set(\"year\", 2018)\n  .format(\"YYYY-MM-DD HH:mm:ss\");\n```\n\n- 🕒 和 Moment.js 相同的 API 和用法\n- 💪 不可变数据 (Immutable)\n- 🔥 支持链式操作 (Chainable)\n- 🌐 国际化 I18n\n- 📦 仅 2kb 大小的微型库\n- 👫 全浏览器兼容\n\n---\n\n## 快速开始\n\n### 安装\n\n```console\nnpm install dayjs --save\n```\n\n📚[安装指南](./Installation.md)\n\n### API\n\nDay.js 有很多 API 来解析、处理、校验、增减、展示时间和日期\n\n```javascript\ndayjs(\"2018-08-08\"); // 解析\n\ndayjs().format(\"{YYYY} MM-DDTHH:mm:ss SSS [Z] A\"); // 展示\n\ndayjs()\n  .set(\"month\", 3)\n  .month(); // 获取\n\ndayjs().add(1, \"year\"); // 处理\n\ndayjs().isBefore(dayjs()); // 查询\n```\n\n📚[API 参考](./API-reference.md)\n\n### 国际化 I18n\n\nDay.js 支持国际化\n\n但除非手动加载，多国语言默认是不会被打包到工程里的\n\n```javascript\nimport \"dayjs/locale/es\"; // 按需加载\n\ndayjs.locale(\"es\"); // 全局使用西班牙语\n\ndayjs(\"2018-05-05\")\n  .locale(\"zh-cn\")\n  .format(); // 在这个实例上使用简体中文\n```\n\n📚[国际化 I18n](./I18n.md)\n\n### 插件\n\n插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能\n\n```javascript\nimport advancedFormat from \"dayjs/plugin/advancedFormat\"; // 按需加载插件\n\ndayjs.extend(advancedFormat); // 使用插件\n\ndayjs().format(\"Q Do k kk X x\"); // 使用扩展后的API\n```\n\n📚[插件列表](./Plugin.md)\n\n## 开源协议\n\nDay.js 遵循 [MIT 开源协议](../../LICENSE).\n","source":"_posts/DayJs.md","raw":"---\nlayout: post\ntitle: \"DayJs使用\"\nsubtitle: \"eslint-vscode-setting\"\ndate: 2018-11-30\nauthor: \"Mark\"\nheader-img: \"img/post-bg-js-version.jpg\"\ncategories: JavaScript #分类\ntop: 1\ntags:\n  - 前端开发\n  - JavaScript\n  - JS时间处理\n---\n\n<p align=\"center\">\n\t<a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t<img width=\"550\" src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\">\n\t</a>\n</p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<br>\n<p align=\"center\">\n\t<a href=\"https://unpkg.com/dayjs/dayjs.min.js\">\n\t\t<img\n\t\t\tsrc=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n\t\t\talt=\"Gzip Size\">\n\t</a>\n\t<a href=\"https://www.npmjs.com/package/dayjs\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a>\n\t<a href=\"https://travis-ci.org/iamkun/dayjs\">\n\t\t<img src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\">\n\t</a>\n\t<a href=\"https://codecov.io/gh/iamkun/dayjs\">\n\t\t<img src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\">\n\t</a>\n\t<a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\">\n\t\t<img src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n\t<br>\n\t<a href=\"https://saucelabs.com/u/dayjs\">\n\t\t<img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n\t</a>\n</p>\n\n> Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js\n\n```js\ndayjs()\n  .startOf(\"month\")\n  .add(1, \"day\")\n  .set(\"year\", 2018)\n  .format(\"YYYY-MM-DD HH:mm:ss\");\n```\n\n- 🕒 和 Moment.js 相同的 API 和用法\n- 💪 不可变数据 (Immutable)\n- 🔥 支持链式操作 (Chainable)\n- 🌐 国际化 I18n\n- 📦 仅 2kb 大小的微型库\n- 👫 全浏览器兼容\n\n---\n\n## 快速开始\n\n### 安装\n\n```console\nnpm install dayjs --save\n```\n\n📚[安装指南](./Installation.md)\n\n### API\n\nDay.js 有很多 API 来解析、处理、校验、增减、展示时间和日期\n\n```javascript\ndayjs(\"2018-08-08\"); // 解析\n\ndayjs().format(\"{YYYY} MM-DDTHH:mm:ss SSS [Z] A\"); // 展示\n\ndayjs()\n  .set(\"month\", 3)\n  .month(); // 获取\n\ndayjs().add(1, \"year\"); // 处理\n\ndayjs().isBefore(dayjs()); // 查询\n```\n\n📚[API 参考](./API-reference.md)\n\n### 国际化 I18n\n\nDay.js 支持国际化\n\n但除非手动加载，多国语言默认是不会被打包到工程里的\n\n```javascript\nimport \"dayjs/locale/es\"; // 按需加载\n\ndayjs.locale(\"es\"); // 全局使用西班牙语\n\ndayjs(\"2018-05-05\")\n  .locale(\"zh-cn\")\n  .format(); // 在这个实例上使用简体中文\n```\n\n📚[国际化 I18n](./I18n.md)\n\n### 插件\n\n插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能\n\n```javascript\nimport advancedFormat from \"dayjs/plugin/advancedFormat\"; // 按需加载插件\n\ndayjs.extend(advancedFormat); // 使用插件\n\ndayjs().format(\"Q Do k kk X x\"); // 使用扩展后的API\n```\n\n📚[插件列表](./Plugin.md)\n\n## 开源协议\n\nDay.js 遵循 [MIT 开源协议](../../LICENSE).\n","slug":"DayJs","published":1,"updated":"2019-03-25T07:06:07.837Z","comments":1,"photos":[],"link":"","_id":"cjwppw0in0002f8czoybfsv6a","content":"<p align=\"center\"><br>    <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><br>        <img width=\"550\" src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\"><br>    </a><br></p><br><p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p><br><br><br><p align=\"center\"><br>    <span class=\"exturl\" data-url=\"aHR0cHM6Ly91bnBrZy5jb20vZGF5anMvZGF5anMubWluLmpz\" title=\"https://unpkg.com/dayjs/dayjs.min.js\"><br>        <img src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\" alt=\"Gzip Size\"><br>    <i class=\"fa fa-external-link\"></i></span><br>    <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZGF5anM=\" title=\"https://www.npmjs.com/package/dayjs\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"><i class=\"fa fa-external-link\"></i></span><br>    <span class=\"exturl\" data-url=\"aHR0cHM6Ly90cmF2aXMtY2kub3JnL2lhbWt1bi9kYXlqcw==\" title=\"https://travis-ci.org/iamkun/dayjs\"><br>        <img src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\"><br>    <i class=\"fa fa-external-link\"></i></span><br>    <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlY292LmlvL2doL2lhbWt1bi9kYXlqcw==\" title=\"https://codecov.io/gh/iamkun/dayjs\"><br>        <img src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\"><br>    <i class=\"fa fa-external-link\"></i></span><br>    <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2lhbWt1bi9kYXlqcy9ibG9iL21hc3Rlci9MSUNFTlNF\" title=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\"><br>        <img src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"><i class=\"fa fa-external-link\"></i></span><br>    <br><br>    <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zYXVjZWxhYnMuY29tL3UvZGF5anM=\" title=\"https://saucelabs.com/u/dayjs\"><br>        <img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\"><br>    <i class=\"fa fa-external-link\"></i></span><br></p>\n\n<blockquote>\n<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs()</span><br><span class=\"line\">  .startOf(<span class=\"string\">\"month\"</span>)</span><br><span class=\"line\">  .add(<span class=\"number\">1</span>, <span class=\"string\">\"day\"</span>)</span><br><span class=\"line\">  .set(<span class=\"string\">\"year\"</span>, <span class=\"number\">2018</span>)</span><br><span class=\"line\">  .format(<span class=\"string\">\"YYYY-MM-DD HH:mm:ss\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>🕒 和 Moment.js 相同的 API 和用法</li>\n<li>💪 不可变数据 (Immutable)</li>\n<li>🔥 支持链式操作 (Chainable)</li>\n<li>🌐 国际化 I18n</li>\n<li>📦 仅 2kb 大小的微型库</li>\n<li>👫 全浏览器兼容</li>\n</ul>\n<hr>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install dayjs --save</span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./Installation.md\">安装指南</a></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs(<span class=\"string\">\"2018-08-08\"</span>); <span class=\"comment\">// 解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A\"</span>); <span class=\"comment\">// 展示</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs()</span><br><span class=\"line\">  .set(<span class=\"string\">\"month\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  .month(); <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().add(<span class=\"number\">1</span>, <span class=\"string\">\"year\"</span>); <span class=\"comment\">// 处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().isBefore(dayjs()); <span class=\"comment\">// 查询</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./API-reference.md\">API 参考</a></p>\n<h3 id=\"国际化-I18n\"><a href=\"#国际化-I18n\" class=\"headerlink\" title=\"国际化 I18n\"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>\n<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"dayjs/locale/es\"</span>; <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.locale(<span class=\"string\">\"es\"</span>); <span class=\"comment\">// 全局使用西班牙语</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs(<span class=\"string\">\"2018-05-05\"</span>)</span><br><span class=\"line\">  .locale(<span class=\"string\">\"zh-cn\"</span>)</span><br><span class=\"line\">  .format(); <span class=\"comment\">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./I18n.md\">国际化 I18n</a></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> advancedFormat <span class=\"keyword\">from</span> <span class=\"string\">\"dayjs/plugin/advancedFormat\"</span>; <span class=\"comment\">// 按需加载插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.extend(advancedFormat); <span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"Q Do k kk X x\"</span>); <span class=\"comment\">// 使用扩展后的API</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./Plugin.md\">插件列表</a></p>\n<h2 id=\"开源协议\"><a href=\"#开源协议\" class=\"headerlink\" title=\"开源协议\"></a>开源协议</h2><p>Day.js 遵循 <a href=\"../../LICENSE\">MIT 开源协议</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br>    <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><br>        <img width=\"550\" src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\"><br>    </a><br></p><br><p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p><br><br><br><p align=\"center\"><br>    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\" target=\"_blank\" rel=\"noopener\"><br>        <img src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\" alt=\"Gzip Size\"><br>    </a><br>    <a href=\"https://www.npmjs.com/package/dayjs\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a><br>    <a href=\"https://travis-ci.org/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\"><br>        <img src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\"><br>    </a><br>    <a href=\"https://codecov.io/gh/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\"><br>        <img src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\"><br>    </a><br>    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\"><br>        <img src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a><br>    <br><br>    <a href=\"https://saucelabs.com/u/dayjs\" target=\"_blank\" rel=\"noopener\"><br>        <img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\"><br>    </a><br></p>\n\n<blockquote>\n<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs()</span><br><span class=\"line\">  .startOf(<span class=\"string\">\"month\"</span>)</span><br><span class=\"line\">  .add(<span class=\"number\">1</span>, <span class=\"string\">\"day\"</span>)</span><br><span class=\"line\">  .set(<span class=\"string\">\"year\"</span>, <span class=\"number\">2018</span>)</span><br><span class=\"line\">  .format(<span class=\"string\">\"YYYY-MM-DD HH:mm:ss\"</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>🕒 和 Moment.js 相同的 API 和用法</li>\n<li>💪 不可变数据 (Immutable)</li>\n<li>🔥 支持链式操作 (Chainable)</li>\n<li>🌐 国际化 I18n</li>\n<li>📦 仅 2kb 大小的微型库</li>\n<li>👫 全浏览器兼容</li>\n</ul>\n<hr>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install dayjs --save</span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./Installation.md\">安装指南</a></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs(<span class=\"string\">\"2018-08-08\"</span>); <span class=\"comment\">// 解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A\"</span>); <span class=\"comment\">// 展示</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs()</span><br><span class=\"line\">  .set(<span class=\"string\">\"month\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  .month(); <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().add(<span class=\"number\">1</span>, <span class=\"string\">\"year\"</span>); <span class=\"comment\">// 处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().isBefore(dayjs()); <span class=\"comment\">// 查询</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./API-reference.md\">API 参考</a></p>\n<h3 id=\"国际化-I18n\"><a href=\"#国际化-I18n\" class=\"headerlink\" title=\"国际化 I18n\"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>\n<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"dayjs/locale/es\"</span>; <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.locale(<span class=\"string\">\"es\"</span>); <span class=\"comment\">// 全局使用西班牙语</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs(<span class=\"string\">\"2018-05-05\"</span>)</span><br><span class=\"line\">  .locale(<span class=\"string\">\"zh-cn\"</span>)</span><br><span class=\"line\">  .format(); <span class=\"comment\">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./I18n.md\">国际化 I18n</a></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> advancedFormat <span class=\"keyword\">from</span> <span class=\"string\">\"dayjs/plugin/advancedFormat\"</span>; <span class=\"comment\">// 按需加载插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.extend(advancedFormat); <span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"Q Do k kk X x\"</span>); <span class=\"comment\">// 使用扩展后的API</span></span><br></pre></td></tr></table></figure>\n<p>📚<a href=\"./Plugin.md\">插件列表</a></p>\n<h2 id=\"开源协议\"><a href=\"#开源协议\" class=\"headerlink\" title=\"开源协议\"></a>开源协议</h2><p>Day.js 遵循 <a href=\"../../LICENSE\">MIT 开源协议</a>.</p>\n"},{"title":"JavaScript模块化语法总结","date":"2017-12-28T16:28:16.000Z","description":"服务端模块化规范","top":3,"_content":"\n# CommonJS 服务端模块化规范\n\n# AMD/CMD 浏览器（客户端）模块化规范\n\n```javascript\nvar math = require(\"math\");\n\nmath.add(2, 3);\n```\n\n第二行 math.add(2, 3)，在第一行 require('math')之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n\n这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是 AMD 规范诞生的背景。\n\n### AMD 规范的模块化插件（require.js 和 curl.js）\n\n使用的是 require 导入模块\n\n```javascript\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n\n　　　　// some code here\n\n　　});\nrequire会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；\n\n\n//指定路径\n\nrequire.config({\n       baseUrl:'js/lib',//放置公共路径\n　　　　paths: {\n\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n\n　　　　}\n\n　　});\n```\n\n### AMD 模块规范写法\n\n- 五、AMD 模块的写法\n\nrequire.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。\n\n具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在`define()`函数之中。\n\n假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：\n\n```javascript\n// math.js\n\ndefine(function() {\n  var add = function(x, y) {\n    return x + y;\n  };\n\n  return {\n    add: add\n  };\n}); // main.js\n\n// 加载方法如下：\n\nrequire([\"math\"], function(math) {\n  alert(math.add(1, 1));\n});\n```\n","source":"_posts/JavaScript-modules.md","raw":"---\ntitle: JavaScript模块化语法总结 #文章页面上的显示名称，一般是中文\ndate: 2017-12-29 00:28:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: JavaScript #分类\ntags: [模块化, 规范, JS] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 服务端模块化规范 #附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面\ntop: 3\n---\n\n# CommonJS 服务端模块化规范\n\n# AMD/CMD 浏览器（客户端）模块化规范\n\n```javascript\nvar math = require(\"math\");\n\nmath.add(2, 3);\n```\n\n第二行 math.add(2, 3)，在第一行 require('math')之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n\n这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是 AMD 规范诞生的背景。\n\n### AMD 规范的模块化插件（require.js 和 curl.js）\n\n使用的是 require 导入模块\n\n```javascript\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n\n　　　　// some code here\n\n　　});\nrequire会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；\n\n\n//指定路径\n\nrequire.config({\n       baseUrl:'js/lib',//放置公共路径\n　　　　paths: {\n\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n\n　　　　}\n\n　　});\n```\n\n### AMD 模块规范写法\n\n- 五、AMD 模块的写法\n\nrequire.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。\n\n具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在`define()`函数之中。\n\n假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：\n\n```javascript\n// math.js\n\ndefine(function() {\n  var add = function(x, y) {\n    return x + y;\n  };\n\n  return {\n    add: add\n  };\n}); // main.js\n\n// 加载方法如下：\n\nrequire([\"math\"], function(math) {\n  alert(math.add(1, 1));\n});\n```\n","slug":"JavaScript-modules","published":1,"updated":"2019-03-25T07:06:07.839Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwppw0it0006f8czvy4sovqf","content":"<h1 id=\"CommonJS-服务端模块化规范\"><a href=\"#CommonJS-服务端模块化规范\" class=\"headerlink\" title=\"CommonJS 服务端模块化规范\"></a>CommonJS 服务端模块化规范</h1><h1 id=\"AMD-CMD-浏览器（客户端）模块化规范\"><a href=\"#AMD-CMD-浏览器（客户端）模块化规范\" class=\"headerlink\" title=\"AMD/CMD 浏览器（客户端）模块化规范\"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">\"math\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>\n<h3 id=\"AMD-规范的模块化插件（require-js-和-curl-js）\"><a href=\"#AMD-规范的模块化插件（require-js-和-curl-js）\" class=\"headerlink\" title=\"AMD 规范的模块化插件（require.js 和 curl.js）\"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>, <span class=\"string\">'backbone'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _, Backbone</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">       baseUrl:<span class=\"string\">'js/lib'</span>,<span class=\"comment\">//放置公共路径</span></span><br><span class=\"line\">　　　　paths: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jquery.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"underscore\"</span>: <span class=\"string\">\"underscore.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"backbone\"</span>: <span class=\"string\">\"backbone.min\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"AMD-模块规范写法\"><a href=\"#AMD-模块规范写法\" class=\"headerlink\" title=\"AMD 模块规范写法\"></a>AMD 模块规范写法</h3><ul>\n<li>五、AMD 模块的写法</li>\n</ul>\n<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>\n<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>\n<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: add</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载方法如下：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"math\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">  alert(math.add(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CommonJS-服务端模块化规范\"><a href=\"#CommonJS-服务端模块化规范\" class=\"headerlink\" title=\"CommonJS 服务端模块化规范\"></a>CommonJS 服务端模块化规范</h1><h1 id=\"AMD-CMD-浏览器（客户端）模块化规范\"><a href=\"#AMD-CMD-浏览器（客户端）模块化规范\" class=\"headerlink\" title=\"AMD/CMD 浏览器（客户端）模块化规范\"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">\"math\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>\n<h3 id=\"AMD-规范的模块化插件（require-js-和-curl-js）\"><a href=\"#AMD-规范的模块化插件（require-js-和-curl-js）\" class=\"headerlink\" title=\"AMD 规范的模块化插件（require.js 和 curl.js）\"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>, <span class=\"string\">'backbone'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _, Backbone</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">       baseUrl:<span class=\"string\">'js/lib'</span>,<span class=\"comment\">//放置公共路径</span></span><br><span class=\"line\">　　　　paths: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jquery.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"underscore\"</span>: <span class=\"string\">\"underscore.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"backbone\"</span>: <span class=\"string\">\"backbone.min\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"AMD-模块规范写法\"><a href=\"#AMD-模块规范写法\" class=\"headerlink\" title=\"AMD 模块规范写法\"></a>AMD 模块规范写法</h3><ul>\n<li>五、AMD 模块的写法</li>\n</ul>\n<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>\n<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>\n<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: add</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载方法如下：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"math\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">  alert(math.add(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"ES6语法（一）","date":"2019-03-25T06:51:56.000Z","layout":"post","author":"Mark","_content":"\n学习 ES6 语法笔记\n\n#### 变量的解构赋值\n\n##### 数组的解构赋值\n\n###### 基本用法\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n以前，为变量赋值，只能直接指定值。\n\n```javascript\nlet a = 1\nlet b = 2\nlet c = 3\n```\n\nES6 允许写成下面这样。\n\n```javascript\nlet [a, b, c] = [1, 2, 3]\n```\n\n上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。\n\n本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。\n\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]]\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [, , third] = [\"foo\", \"bar\", \"baz\"]\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3]\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4]\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = [\"a\"]\nx // \"a\"\ny // undefined\nz // []\n```\n\n如果解构不成功，变量的值就等于`undefined`。\n\n```javascript\nlet [foo] = []\nlet [bar, foo] = [1]\n```\n\n以上两种情况都属于解构不成功，`foo`的值都会等于`undefined`。\n\n另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3]\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4]\na // 1\nb // 2\nd // 4\n```\n\n上面两个例子，都属于不完全解构，但是可以成功。\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n\n```javascript\n// 报错\nlet [foo] = 1\nlet [foo] = false\nlet [foo] = NaN\nlet [foo] = undefined\nlet [foo] = null\nlet [foo] = {}\n```\n\n上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。\n\n对于 Set 结构，也可以使用数组的解构赋值。\n\n```javascript\nlet [x, y, z] = new Set([\"a\", \"b\", \"c\"])\nx // \"a\"\n```\n\n事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n\n```javascript\nfunction* fibs() {\n\tlet a = 0\n\tlet b = 1\n\twhile (true) {\n\t\tyield a\n\t\t;[a, b] = [b, a + b]\n\t}\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs()\nsixth // 5\n```\n\n上面代码中，`fibs`是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。\n\n###### 默认值\n\n解构赋值允许指定默认值。\n\n```javascript\nlet [foo = true] = []\nfoo // true\n\nlet [x, y = \"b\"] = [\"a\"] // x='a', y='b'\nlet [x, y = \"b\"] = [\"a\", undefined] // x='a', y='b'\n```\n\n注意，ES6 内部使用严格相等运算符（`===`），判断一个位置是否有值。所以，只有当一个数组成员严格等于`undefined`，默认值才会生效。\n\n```javascript\nlet [x = 1] = [undefined]\nx // 1\n\nlet [x = 1] = [null]\nx // null\n```\n\n上面代码中，如果一个数组成员是`null`，默认值就不会生效，因为`null`不严格等于`undefined`。\n\n如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\n\n```javascript\nfunction f() {\n\tconsole.log(\"aaa\")\n}\n\nlet [x = f()] = [1]\n```\n\n上面代码中，因为`x`能取到值，所以函数`f`根本不会执行。上面的代码其实等价于下面的代码。\n\n```javascript\nlet x\nif ([1][0] === undefined) {\n\tx = f()\n} else {\n\tx = [1][0]\n}\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```javascript\nlet [x = 1, y = x] = [] // x=1; y=1\nlet [x = 1, y = x] = [2] // x=2; y=2\nlet [x = 1, y = x] = [1, 2] // x=1; y=2\nlet [x = y, y = 1] = [] // ReferenceError: y is not defined\n```\n\n上面最后一个表达式之所以会报错，是因为`x`用`y`做默认值时，`y`还没有声明。\n\n##### 对象的解构赋值\n\n解构不仅可以用于数组，还可以用于对象。\n\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" }\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\nlet { bar, foo } = { foo: \"aaa\", bar: \"bbb\" }\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // undefined\n```\n\n上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于`undefined`。\n\n如果变量名与属性名不一致，必须写成下面这样。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // \"aaa\"\n\nlet obj = { first: \"hello\", last: \"world\" }\nlet { first: f, last: l } = obj\nf // 'hello'\nl // 'world'\n```\n\n这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。\n\n```javascript\nlet { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" }\n```\n\n也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // \"aaa\"\nfoo // error: foo is not defined\n```\n\n上面代码中，`foo`是匹配的模式，`baz`才是变量。真正被赋值的是变量`baz`，而不是模式`foo`。\n\n与数组一样，解构也可以用于嵌套结构的对象。\n\n```javascript\nlet obj = {\n\tp: [\"Hello\", { y: \"World\" }]\n}\n\nlet {\n\tp: [x, { y }]\n} = obj\nx // \"Hello\"\ny // \"World\"\n```\n\n注意，这时`p`是模式，不是变量，因此不会被赋值。如果`p`也要作为变量赋值，可以写成下面这样。\n\n```javascript\nlet obj = {\n\tp: [\"Hello\", { y: \"World\" }]\n}\n\nlet {\n\tp,\n\tp: [x, { y }]\n} = obj\nx // \"Hello\"\ny // \"World\"\np // [\"Hello\", {y: \"World\"}]\n```\n\n下面是另一个例子。\n\n```javascript\nconst node = {\n\tloc: {\n\t\tstart: {\n\t\t\tline: 1,\n\t\t\tcolumn: 5\n\t\t}\n\t}\n}\n\nlet {\n\tloc,\n\tloc: { start },\n\tloc: {\n\t\tstart: { line }\n\t}\n} = node\nline // 1\nloc // Object {start: Object}\nstart // Object {line: 1, column: 5}\n```\n\n上面代码有三次解构赋值，分别是对`loc`、`start`、`line`三个属性的解构赋值。注意，最后一次对`line`属性的解构赋值之中，只有`line`是变量，`loc`和`start`都是模式，不是变量。\n\n下面是嵌套赋值的例子。\n\n```javascript\nlet obj = {}\nlet arr = []\n\n;({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true })\n\nobj // {prop:123}\narr // [true]\n```\n\n对象的解构也可以指定默认值。\n\n```javascript\nvar { x = 3 } = {}\nx // 3\n\nvar { x, y = 5 } = { x: 1 }\nx // 1\ny // 5\n\nvar { x: y = 3 } = {}\ny // 3\n\nvar { x: y = 3 } = { x: 5 }\ny // 5\n\nvar { message: msg = \"Something went wrong\" } = {}\nmsg // \"Something went wrong\"\n```\n\n默认值生效的条件是，对象的属性值严格等于`undefined`。\n\n```javascript\nvar { x = 3 } = { x: undefined }\nx // 3\n\nvar { x = 3 } = { x: null }\nx // null\n```\n\n上面代码中，属性`x`等于`null`，因为`null`与`undefined`不严格相等，所以是个有效的赋值，导致默认值`3`不会生效。\n\n如果解构失败，变量的值等于`undefined`。\n\n```javascript\nlet { foo } = { bar: \"baz\" }\nfoo // undefined\n```\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n```javascript\n// 报错\nlet {\n\tfoo: { bar }\n} = { baz: \"baz\" }\n```\n\n上面代码中，等号左边对象的`foo`属性，对应一个子对象。该子对象的`bar`属性，解构时会报错。原因很简单，因为`foo`这时等于`undefined`，再取子属性就会报错，请看下面的代码。\n\n```javascript\nlet _tmp = { baz: \"baz\" }\n_tmp.foo.bar // 报错\n```\n\n如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n```javascript\n// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n```\n\n上面代码的写法会报错，因为 JavaScript 引擎会将`{x}`理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n```javascript\n// 正确的写法\nlet x\n;({ x } = { x: 1 })\n```\n\n上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\n\n解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n\n```javascript\n;({} = [true, false])\n;({} = \"abc\")\n;({} = [])\n```\n\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。\n\n```javascript\nlet { log, sin, cos } = Math\n```\n\n上面代码将`Math`对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。\n\n由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n```javascript\nlet arr = [1, 2, 3]\nlet { 0: first, [arr.length - 1]: last } = arr\nfirst // 1\nlast // 3\n```\n\n上面代码对数组进行对象解构。数组`arr`的`0`键对应的值是`1`，`[arr.length - 1]`就是`2`键，对应的值是`3`。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。\n\n##### 字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = \"hello\"\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n\n类似数组的对象都有一个`length`属性，因此还可以对这个属性解构赋值。\n\n```javascript\nlet { length: len } = \"hello\"\nlen // 5\n```\n\n##### 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n```javascript\nlet { toString: s } = 123\ns === Number.prototype.toString // true\n\nlet { toString: s } = true\ns === Boolean.prototype.toString // true\n```\n\n上面代码中，数值和布尔值的包装对象都有`toString`属性，因此变量`s`都能取到值。\n\n解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于`undefined`和`null`无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined // TypeError\nlet { prop: y } = null // TypeError\n```\n\n##### 函数参数的解构赋值\n\n函数的参数也可以使用解构赋值。\n\n```javascript\nfunction add([x, y]) {\n\treturn x + y\n}\n\nadd([1, 2]) // 3\n```\n\n上面代码中，函数`add`的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量`x`和`y`。对于函数内部的代码来说，它们能感受到的参数就是`x`和`y`。\n\n下面是另一个例子。\n\n```javascript\n;[[1, 2], [3, 4]].map(([a, b]) => a + b)\n// [ 3, 7 ]\n```\n\n函数参数的解构也可以使用默认值。\n\n```javascript\nfunction move({ x = 0, y = 0 } = {}) {\n\treturn [x, y]\n}\n\nmove({ x: 3, y: 8 }) // [3, 8]\nmove({ x: 3 }) // [3, 0]\nmove({}) // [0, 0]\nmove() // [0, 0]\n```\n\n上面代码中，函数`move`的参数是一个对象，通过对这个对象进行解构，得到变量`x`和`y`的值。如果解构失败，`x`和`y`等于默认值。\n\n注意，下面的写法会得到不一样的结果。\n\n```javascript\nfunction move({ x, y } = { x: 0, y: 0 }) {\n\treturn [x, y]\n}\n\nmove({ x: 3, y: 8 }) // [3, 8]\nmove({ x: 3 }) // [3, undefined]\nmove({}) // [undefined, undefined]\nmove() // [0, 0]\n```\n\n上面代码是为函数`move`的参数指定默认值，而不是为变量`x`和`y`指定默认值，所以会得到与前一种写法不同的结果。\n\n`undefined`就会触发函数参数的默认值。\n\n```javascript\n;[1, undefined, 3].map((x = \"yes\") => x)\n// [ 1, 'yes', 3 ]\n```\n\n##### 圆括号问题\n\n解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\n\n由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\n\n但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。\n\n###### 不能使用圆括号的情况\n\n以下三种解构赋值不得使用圆括号。\n\n（1）变量声明语句\n\n```javascript\n// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n```\n\n上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\n\n（2）函数参数\n\n函数参数也属于变量声明，因此不能带有圆括号。\n\n```javascript\n// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n```\n\n（3）赋值语句的模式\n\n```javascript\n// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n```\n\n上面代码将整个模式放在圆括号之中，导致报错。\n\n```javascript\n// 报错\n;[{ p: a }, { x: c }] = [{}, {}]\n```\n\n上面代码将一部分模式放在圆括号之中，导致报错。\n\n##### 可以使用圆括号的情况\n\n可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。\n\n```javascript\n;[b] = [3] // 正确\n;({ p: d } = {}) // 正确\n;[parseInt.prop] = [3] // 正确\n```\n\n上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是`p`，而不是`d`；第三行语句与第一行语句的性质一致。\n\n##### 用途\n\n变量的解构赋值用途很多。\n\n**（1）交换变量的值**\n\n```javascript\nlet x = 1\nlet y = 2\n\n;[x, y] = [y, x]\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n**（2）从函数返回多个值**\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```javascript\n// 返回一个数组\n\nfunction example() {\n\treturn [1, 2, 3]\n}\nlet [a, b, c] = example()\n\n// 返回一个对象\n\nfunction example() {\n\treturn {\n\t\tfoo: 1,\n\t\tbar: 2\n\t}\n}\nlet { foo, bar } = example()\n```\n\n**（3）函数参数的定义**\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n**（4）提取 JSON 数据**\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```javascript\nlet jsonData = {\n\tid: 42,\n\tstatus: \"OK\",\n\tdata: [867, 5309]\n}\n\nlet { id, status, data: number } = jsonData\n\nconsole.log(id, status, number)\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n**（5）函数参数的默认值**\n\n```javascript\njQuery.ajax = function(\n\turl,\n\t{\n\t\tasync = true,\n\t\tbeforeSend = function() {},\n\t\tcache = true,\n\t\tcomplete = function() {},\n\t\tcrossDomain = false,\n\t\tglobal = true\n\t\t// ... more config\n\t} = {}\n) {\n\t// ... do stuff\n}\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n**（6）遍历 Map 结构**\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nconst map = new Map()\nmap.set(\"first\", \"hello\")\nmap.set(\"second\", \"world\")\n\nfor (let [key, value] of map) {\n\tconsole.log(key + \" is \" + value)\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```javascript\n// 获取键名\nfor (let [key] of map) {\n\t// ...\n}\n\n// 获取键值\nfor (let [, value] of map) {\n\t// ...\n}\n```\n\n**（7）输入模块的指定方法**\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```javascript\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\")\n```\n\n#### 参考文档：\n\n- [《ECMAScript 6 入门》](http://es6.ruanyifeng.com/#docs)\n","source":"_posts/ES6语法（一）.md","raw":"---\ntitle: ES6语法（一）\ndate: 2019-03-25 14:51:56\nlayout: post\nauthor: \"Mark\"\ncategories: JavaScript #分类\ntags:\n  - 前端开发\n  - JavaScript\n  - ES6语法\n---\n\n学习 ES6 语法笔记\n\n#### 变量的解构赋值\n\n##### 数组的解构赋值\n\n###### 基本用法\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n以前，为变量赋值，只能直接指定值。\n\n```javascript\nlet a = 1\nlet b = 2\nlet c = 3\n```\n\nES6 允许写成下面这样。\n\n```javascript\nlet [a, b, c] = [1, 2, 3]\n```\n\n上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。\n\n本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。\n\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]]\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [, , third] = [\"foo\", \"bar\", \"baz\"]\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3]\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4]\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = [\"a\"]\nx // \"a\"\ny // undefined\nz // []\n```\n\n如果解构不成功，变量的值就等于`undefined`。\n\n```javascript\nlet [foo] = []\nlet [bar, foo] = [1]\n```\n\n以上两种情况都属于解构不成功，`foo`的值都会等于`undefined`。\n\n另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3]\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4]\na // 1\nb // 2\nd // 4\n```\n\n上面两个例子，都属于不完全解构，但是可以成功。\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n\n```javascript\n// 报错\nlet [foo] = 1\nlet [foo] = false\nlet [foo] = NaN\nlet [foo] = undefined\nlet [foo] = null\nlet [foo] = {}\n```\n\n上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。\n\n对于 Set 结构，也可以使用数组的解构赋值。\n\n```javascript\nlet [x, y, z] = new Set([\"a\", \"b\", \"c\"])\nx // \"a\"\n```\n\n事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n\n```javascript\nfunction* fibs() {\n\tlet a = 0\n\tlet b = 1\n\twhile (true) {\n\t\tyield a\n\t\t;[a, b] = [b, a + b]\n\t}\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs()\nsixth // 5\n```\n\n上面代码中，`fibs`是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。\n\n###### 默认值\n\n解构赋值允许指定默认值。\n\n```javascript\nlet [foo = true] = []\nfoo // true\n\nlet [x, y = \"b\"] = [\"a\"] // x='a', y='b'\nlet [x, y = \"b\"] = [\"a\", undefined] // x='a', y='b'\n```\n\n注意，ES6 内部使用严格相等运算符（`===`），判断一个位置是否有值。所以，只有当一个数组成员严格等于`undefined`，默认值才会生效。\n\n```javascript\nlet [x = 1] = [undefined]\nx // 1\n\nlet [x = 1] = [null]\nx // null\n```\n\n上面代码中，如果一个数组成员是`null`，默认值就不会生效，因为`null`不严格等于`undefined`。\n\n如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\n\n```javascript\nfunction f() {\n\tconsole.log(\"aaa\")\n}\n\nlet [x = f()] = [1]\n```\n\n上面代码中，因为`x`能取到值，所以函数`f`根本不会执行。上面的代码其实等价于下面的代码。\n\n```javascript\nlet x\nif ([1][0] === undefined) {\n\tx = f()\n} else {\n\tx = [1][0]\n}\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```javascript\nlet [x = 1, y = x] = [] // x=1; y=1\nlet [x = 1, y = x] = [2] // x=2; y=2\nlet [x = 1, y = x] = [1, 2] // x=1; y=2\nlet [x = y, y = 1] = [] // ReferenceError: y is not defined\n```\n\n上面最后一个表达式之所以会报错，是因为`x`用`y`做默认值时，`y`还没有声明。\n\n##### 对象的解构赋值\n\n解构不仅可以用于数组，还可以用于对象。\n\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" }\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\nlet { bar, foo } = { foo: \"aaa\", bar: \"bbb\" }\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // undefined\n```\n\n上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于`undefined`。\n\n如果变量名与属性名不一致，必须写成下面这样。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // \"aaa\"\n\nlet obj = { first: \"hello\", last: \"world\" }\nlet { first: f, last: l } = obj\nf // 'hello'\nl // 'world'\n```\n\n这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。\n\n```javascript\nlet { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" }\n```\n\n也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // \"aaa\"\nfoo // error: foo is not defined\n```\n\n上面代码中，`foo`是匹配的模式，`baz`才是变量。真正被赋值的是变量`baz`，而不是模式`foo`。\n\n与数组一样，解构也可以用于嵌套结构的对象。\n\n```javascript\nlet obj = {\n\tp: [\"Hello\", { y: \"World\" }]\n}\n\nlet {\n\tp: [x, { y }]\n} = obj\nx // \"Hello\"\ny // \"World\"\n```\n\n注意，这时`p`是模式，不是变量，因此不会被赋值。如果`p`也要作为变量赋值，可以写成下面这样。\n\n```javascript\nlet obj = {\n\tp: [\"Hello\", { y: \"World\" }]\n}\n\nlet {\n\tp,\n\tp: [x, { y }]\n} = obj\nx // \"Hello\"\ny // \"World\"\np // [\"Hello\", {y: \"World\"}]\n```\n\n下面是另一个例子。\n\n```javascript\nconst node = {\n\tloc: {\n\t\tstart: {\n\t\t\tline: 1,\n\t\t\tcolumn: 5\n\t\t}\n\t}\n}\n\nlet {\n\tloc,\n\tloc: { start },\n\tloc: {\n\t\tstart: { line }\n\t}\n} = node\nline // 1\nloc // Object {start: Object}\nstart // Object {line: 1, column: 5}\n```\n\n上面代码有三次解构赋值，分别是对`loc`、`start`、`line`三个属性的解构赋值。注意，最后一次对`line`属性的解构赋值之中，只有`line`是变量，`loc`和`start`都是模式，不是变量。\n\n下面是嵌套赋值的例子。\n\n```javascript\nlet obj = {}\nlet arr = []\n\n;({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true })\n\nobj // {prop:123}\narr // [true]\n```\n\n对象的解构也可以指定默认值。\n\n```javascript\nvar { x = 3 } = {}\nx // 3\n\nvar { x, y = 5 } = { x: 1 }\nx // 1\ny // 5\n\nvar { x: y = 3 } = {}\ny // 3\n\nvar { x: y = 3 } = { x: 5 }\ny // 5\n\nvar { message: msg = \"Something went wrong\" } = {}\nmsg // \"Something went wrong\"\n```\n\n默认值生效的条件是，对象的属性值严格等于`undefined`。\n\n```javascript\nvar { x = 3 } = { x: undefined }\nx // 3\n\nvar { x = 3 } = { x: null }\nx // null\n```\n\n上面代码中，属性`x`等于`null`，因为`null`与`undefined`不严格相等，所以是个有效的赋值，导致默认值`3`不会生效。\n\n如果解构失败，变量的值等于`undefined`。\n\n```javascript\nlet { foo } = { bar: \"baz\" }\nfoo // undefined\n```\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n```javascript\n// 报错\nlet {\n\tfoo: { bar }\n} = { baz: \"baz\" }\n```\n\n上面代码中，等号左边对象的`foo`属性，对应一个子对象。该子对象的`bar`属性，解构时会报错。原因很简单，因为`foo`这时等于`undefined`，再取子属性就会报错，请看下面的代码。\n\n```javascript\nlet _tmp = { baz: \"baz\" }\n_tmp.foo.bar // 报错\n```\n\n如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n```javascript\n// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n```\n\n上面代码的写法会报错，因为 JavaScript 引擎会将`{x}`理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n```javascript\n// 正确的写法\nlet x\n;({ x } = { x: 1 })\n```\n\n上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\n\n解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n\n```javascript\n;({} = [true, false])\n;({} = \"abc\")\n;({} = [])\n```\n\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。\n\n```javascript\nlet { log, sin, cos } = Math\n```\n\n上面代码将`Math`对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。\n\n由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n```javascript\nlet arr = [1, 2, 3]\nlet { 0: first, [arr.length - 1]: last } = arr\nfirst // 1\nlast // 3\n```\n\n上面代码对数组进行对象解构。数组`arr`的`0`键对应的值是`1`，`[arr.length - 1]`就是`2`键，对应的值是`3`。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。\n\n##### 字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = \"hello\"\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n\n类似数组的对象都有一个`length`属性，因此还可以对这个属性解构赋值。\n\n```javascript\nlet { length: len } = \"hello\"\nlen // 5\n```\n\n##### 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n```javascript\nlet { toString: s } = 123\ns === Number.prototype.toString // true\n\nlet { toString: s } = true\ns === Boolean.prototype.toString // true\n```\n\n上面代码中，数值和布尔值的包装对象都有`toString`属性，因此变量`s`都能取到值。\n\n解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于`undefined`和`null`无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined // TypeError\nlet { prop: y } = null // TypeError\n```\n\n##### 函数参数的解构赋值\n\n函数的参数也可以使用解构赋值。\n\n```javascript\nfunction add([x, y]) {\n\treturn x + y\n}\n\nadd([1, 2]) // 3\n```\n\n上面代码中，函数`add`的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量`x`和`y`。对于函数内部的代码来说，它们能感受到的参数就是`x`和`y`。\n\n下面是另一个例子。\n\n```javascript\n;[[1, 2], [3, 4]].map(([a, b]) => a + b)\n// [ 3, 7 ]\n```\n\n函数参数的解构也可以使用默认值。\n\n```javascript\nfunction move({ x = 0, y = 0 } = {}) {\n\treturn [x, y]\n}\n\nmove({ x: 3, y: 8 }) // [3, 8]\nmove({ x: 3 }) // [3, 0]\nmove({}) // [0, 0]\nmove() // [0, 0]\n```\n\n上面代码中，函数`move`的参数是一个对象，通过对这个对象进行解构，得到变量`x`和`y`的值。如果解构失败，`x`和`y`等于默认值。\n\n注意，下面的写法会得到不一样的结果。\n\n```javascript\nfunction move({ x, y } = { x: 0, y: 0 }) {\n\treturn [x, y]\n}\n\nmove({ x: 3, y: 8 }) // [3, 8]\nmove({ x: 3 }) // [3, undefined]\nmove({}) // [undefined, undefined]\nmove() // [0, 0]\n```\n\n上面代码是为函数`move`的参数指定默认值，而不是为变量`x`和`y`指定默认值，所以会得到与前一种写法不同的结果。\n\n`undefined`就会触发函数参数的默认值。\n\n```javascript\n;[1, undefined, 3].map((x = \"yes\") => x)\n// [ 1, 'yes', 3 ]\n```\n\n##### 圆括号问题\n\n解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\n\n由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\n\n但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。\n\n###### 不能使用圆括号的情况\n\n以下三种解构赋值不得使用圆括号。\n\n（1）变量声明语句\n\n```javascript\n// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n```\n\n上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\n\n（2）函数参数\n\n函数参数也属于变量声明，因此不能带有圆括号。\n\n```javascript\n// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n```\n\n（3）赋值语句的模式\n\n```javascript\n// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n```\n\n上面代码将整个模式放在圆括号之中，导致报错。\n\n```javascript\n// 报错\n;[{ p: a }, { x: c }] = [{}, {}]\n```\n\n上面代码将一部分模式放在圆括号之中，导致报错。\n\n##### 可以使用圆括号的情况\n\n可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。\n\n```javascript\n;[b] = [3] // 正确\n;({ p: d } = {}) // 正确\n;[parseInt.prop] = [3] // 正确\n```\n\n上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是`p`，而不是`d`；第三行语句与第一行语句的性质一致。\n\n##### 用途\n\n变量的解构赋值用途很多。\n\n**（1）交换变量的值**\n\n```javascript\nlet x = 1\nlet y = 2\n\n;[x, y] = [y, x]\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n**（2）从函数返回多个值**\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```javascript\n// 返回一个数组\n\nfunction example() {\n\treturn [1, 2, 3]\n}\nlet [a, b, c] = example()\n\n// 返回一个对象\n\nfunction example() {\n\treturn {\n\t\tfoo: 1,\n\t\tbar: 2\n\t}\n}\nlet { foo, bar } = example()\n```\n\n**（3）函数参数的定义**\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n**（4）提取 JSON 数据**\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```javascript\nlet jsonData = {\n\tid: 42,\n\tstatus: \"OK\",\n\tdata: [867, 5309]\n}\n\nlet { id, status, data: number } = jsonData\n\nconsole.log(id, status, number)\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n**（5）函数参数的默认值**\n\n```javascript\njQuery.ajax = function(\n\turl,\n\t{\n\t\tasync = true,\n\t\tbeforeSend = function() {},\n\t\tcache = true,\n\t\tcomplete = function() {},\n\t\tcrossDomain = false,\n\t\tglobal = true\n\t\t// ... more config\n\t} = {}\n) {\n\t// ... do stuff\n}\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n**（6）遍历 Map 结构**\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nconst map = new Map()\nmap.set(\"first\", \"hello\")\nmap.set(\"second\", \"world\")\n\nfor (let [key, value] of map) {\n\tconsole.log(key + \" is \" + value)\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```javascript\n// 获取键名\nfor (let [key] of map) {\n\t// ...\n}\n\n// 获取键值\nfor (let [, value] of map) {\n\t// ...\n}\n```\n\n**（7）输入模块的指定方法**\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```javascript\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\")\n```\n\n#### 参考文档：\n\n- [《ECMAScript 6 入门》](http://es6.ruanyifeng.com/#docs)\n","slug":"ES6语法（一）","published":1,"updated":"2019-03-25T07:38:44.081Z","comments":1,"photos":[],"link":"","_id":"cjwppw0iv0008f8czfz4t1bk7","content":"<p>学习 ES6 语法笔记</p>\n<h4 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h4><h5 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h5><h6 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h6><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>ES6 允许写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>\n<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [, , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>]</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">\"a\"</span>]</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>])</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></figure>\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> a</span><br><span class=\"line\">\t\t;[a, b] = [b, a + b]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs()</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n<h6 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h6><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = []</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>] <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></figure>\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>]</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"aaa\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>上面代码中，因为<code>x</code>能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">\tx = f()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tx = [<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [] <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>] <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>] <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [] <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n<p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p>\n<h5 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h5><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">\"hello\"</span>, <span class=\"attr\">last</span>: <span class=\"string\">\"world\"</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n<p>这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br></pre></td></tr></table></figure>\n<p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp,</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br><span class=\"line\">p <span class=\"comment\">// [\"Hello\", &#123;y: \"World\"&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123;</span><br><span class=\"line\">\t\t\tline: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tcolumn: <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tloc,</span><br><span class=\"line\">\tloc: &#123; start &#125;,</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123; line &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; = node</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc <span class=\"comment\">// Object &#123;start: Object&#125;</span></span><br><span class=\"line\">start <span class=\"comment\">// Object &#123;line: 1, column: 5&#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码有三次解构赋值，分别是对<code>loc</code>、<code>start</code>、<code>line</code>三个属性的解构赋值。注意，最后一次对<code>line</code>属性的解构赋值之中，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<p>下面是嵌套赋值的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\">;(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></figure>\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x, y = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">\"Something went wrong\"</span> &#125; = &#123;&#125;</span><br><span class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></span><br></pre></td></tr></table></figure>\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<p>如果解构失败，变量的值等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo &#125; = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tfoo: &#123; bar &#125;</span><br><span class=\"line\">&#125; = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，等号左边对象的<code>foo</code>属性，对应一个子对象。该子对象的<code>bar</code>属性，解构时会报错。原因很简单，因为<code>foo</code>这时等于<code>undefined</code>，再取子属性就会报错，请看下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _tmp = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">_tmp.foo.bar <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\">;(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>])</span><br><span class=\"line\">;(&#123;&#125; = <span class=\"string\">\"abc\"</span>)</span><br><span class=\"line\">;(&#123;&#125; = [])</span><br></pre></td></tr></table></figure>\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span></span><br></pre></td></tr></table></figure>\n<p>上面代码将<code>Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"number\">0</span>: first, [arr.length - <span class=\"number\">1</span>]: last &#125; = arr</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h5 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">length</span>: len &#125; = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"number\">123</span></span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"literal\">true</span></span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span> <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span> <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></span><br></pre></td></tr></table></figure>\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x, y &#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p><code>undefined</code>就会触发函数参数的默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">\"yes\"</span></span>) =&gt;</span> x)</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 'yes', 3 ]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"圆括号问题\"><a href=\"#圆括号问题\" class=\"headerlink\" title=\"圆括号问题\"></a>圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h6 id=\"不能使用圆括号的情况\"><a href=\"#不能使用圆括号的情况\" class=\"headerlink\" title=\"不能使用圆括号的情况\"></a>不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[(z</span>)]) </span>&#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[z,(x</span>)]) </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></figure>\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">;[&#123; <span class=\"attr\">p</span>: a &#125;, &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;]</span><br></pre></td></tr></table></figure>\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h5 id=\"可以使用圆括号的情况\"><a href=\"#可以使用圆括号的情况\" class=\"headerlink\" title=\"可以使用圆括号的情况\"></a>可以使用圆括号的情况</h5><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[b] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;(&#123; <span class=\"attr\">p</span>: d &#125; = &#123;&#125;) <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;[<span class=\"built_in\">parseInt</span>.prop] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h5 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h5><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tfoo: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tbar: <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example()</span><br></pre></td></tr></table></figure>\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">\tid: <span class=\"number\">42</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">\tdata: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number)</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\turl,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tasync = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tbeforeSend = function(</span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tcomplete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcrossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\tglobal = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// ... more config</span></span><br><span class=\"line\">\t&#125; = &#123;&#125;</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">\"first\"</span>, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">map.set(<span class=\"string\">\"second\"</span>, <span class=\"string\">\"world\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcw==\" title=\"http://es6.ruanyifeng.com/#docs\">《ECMAScript 6 入门》<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>学习 ES6 语法笔记</p>\n<h4 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h4><h5 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h5><h6 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h6><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>ES6 允许写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n<p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>\n<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [, , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>]</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">\"a\"</span>]</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>])</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></figure>\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> a</span><br><span class=\"line\">\t\t;[a, b] = [b, a + b]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs()</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n<h6 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h6><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = []</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>] <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></figure>\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>]</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"aaa\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>上面代码中，因为<code>x</code>能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">\tx = f()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tx = [<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [] <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>] <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>] <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [] <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n<p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p>\n<h5 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h5><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">\"hello\"</span>, <span class=\"attr\">last</span>: <span class=\"string\">\"world\"</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n<p>这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br></pre></td></tr></table></figure>\n<p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp,</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br><span class=\"line\">p <span class=\"comment\">// [\"Hello\", &#123;y: \"World\"&#125;]</span></span><br></pre></td></tr></table></figure>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123;</span><br><span class=\"line\">\t\t\tline: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tcolumn: <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tloc,</span><br><span class=\"line\">\tloc: &#123; start &#125;,</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123; line &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; = node</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc <span class=\"comment\">// Object &#123;start: Object&#125;</span></span><br><span class=\"line\">start <span class=\"comment\">// Object &#123;line: 1, column: 5&#125;</span></span><br></pre></td></tr></table></figure>\n<p>上面代码有三次解构赋值，分别是对<code>loc</code>、<code>start</code>、<code>line</code>三个属性的解构赋值。注意，最后一次对<code>line</code>属性的解构赋值之中，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<p>下面是嵌套赋值的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\">;(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></figure>\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x, y = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">\"Something went wrong\"</span> &#125; = &#123;&#125;</span><br><span class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></span><br></pre></td></tr></table></figure>\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<p>如果解构失败，变量的值等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo &#125; = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tfoo: &#123; bar &#125;</span><br><span class=\"line\">&#125; = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，等号左边对象的<code>foo</code>属性，对应一个子对象。该子对象的<code>bar</code>属性，解构时会报错。原因很简单，因为<code>foo</code>这时等于<code>undefined</code>，再取子属性就会报错，请看下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _tmp = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">_tmp.foo.bar <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure>\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\">;(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>])</span><br><span class=\"line\">;(&#123;&#125; = <span class=\"string\">\"abc\"</span>)</span><br><span class=\"line\">;(&#123;&#125; = [])</span><br></pre></td></tr></table></figure>\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span></span><br></pre></td></tr></table></figure>\n<p>上面代码将<code>Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"number\">0</span>: first, [arr.length - <span class=\"number\">1</span>]: last &#125; = arr</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h5 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">length</span>: len &#125; = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"number\">123</span></span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"literal\">true</span></span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span> <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span> <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></span><br></pre></td></tr></table></figure>\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x, y &#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p><code>undefined</code>就会触发函数参数的默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">\"yes\"</span></span>) =&gt;</span> x)</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 'yes', 3 ]</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"圆括号问题\"><a href=\"#圆括号问题\" class=\"headerlink\" title=\"圆括号问题\"></a>圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h6 id=\"不能使用圆括号的情况\"><a href=\"#不能使用圆括号的情况\" class=\"headerlink\" title=\"不能使用圆括号的情况\"></a>不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[(z</span>)]) </span>&#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[z,(x</span>)]) </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></figure>\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">;[&#123; <span class=\"attr\">p</span>: a &#125;, &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;]</span><br></pre></td></tr></table></figure>\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h5 id=\"可以使用圆括号的情况\"><a href=\"#可以使用圆括号的情况\" class=\"headerlink\" title=\"可以使用圆括号的情况\"></a>可以使用圆括号的情况</h5><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[b] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;(&#123; <span class=\"attr\">p</span>: d &#125; = &#123;&#125;) <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;[<span class=\"built_in\">parseInt</span>.prop] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h5 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h5><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tfoo: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tbar: <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example()</span><br></pre></td></tr></table></figure>\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">\tid: <span class=\"number\">42</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">\tdata: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number)</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\turl,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tasync = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tbeforeSend = function(</span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tcomplete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcrossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\tglobal = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// ... more config</span></span><br><span class=\"line\">\t&#125; = &#123;&#125;</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">\"first\"</span>, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">map.set(<span class=\"string\">\"second\"</span>, <span class=\"string\">\"world\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h4><ul>\n<li><a href=\"http://es6.ruanyifeng.com/#docs\" target=\"_blank\" rel=\"noopener\">《ECMAScript 6 入门》</a></li>\n</ul>\n"},{"layout":"post","title":"ES5, ES6, ES2016, ES.Next: JavaScript的版本是怎么回事？「译」","subtitle":"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?","date":"2015-09-21T16:00:00.000Z","author":"Hux","header-img":"img/post-bg-js-version.jpg","top":4,"_content":"\nJavaScript 有着很奇怪的命名史。\n\n1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript _（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）_\n\n![java-javascript](/assets/img/2015/09/javascript-java.jpg)\n<small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small>\n\n> 译者注：[wikipedia 的 JavaScript 词条](https://en.wikipedia.org/wiki/JavaScript#History) 更详细的叙述了这段历史\n\n1996 年，网景将 JavaScript 提交给 [ECMA International（欧洲计算机制造商协会）](http://www.ecma-international.org/) 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。\n\n> 术语（译者注）：\n>\n> - _标准（Standard）_： 用于定义与其他事物区别的一套规则\n> - _实现（Implementation）_： 某个标准的具体实施/真实实践\n\n不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。\n\n> 译者注：[ECMAScript 第四版草案](https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29)由于太过激进而被抛弃，Adobe 的 [ActionScript 3.0](https://en.wikipedia.org/wiki/ActionScript) 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）\n\n到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）\n\n目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 [decorators（装饰者）](https://github.com/wycats/javascript-decorators)，[async-await（async-await 异步编程模型）](https://github.com/lukehoban/ecmascript-asyncawait) 和 [static class properties（静态类属性）](https://github.com/jeffmo/es-class-properties)。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 [Babel 的官网](https://babeljs.io/docs/usage/experimental/) 上查看各个提案目前都在哪个阶段了。\n\n所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：\n\n- **ECMAScript**：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。\n- **JavaScript**：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。\n- **ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。\n- **ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅[这张兼容性表](http://kangax.github.io/compat-table/es6/)来查看不同浏览器和工具的实现情况。\n- **ECMAScript 2016**：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定\n- **ECMAScript Proposals**：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。\n\n在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。\n\n#### 一些资源\n\n- TC39 的 [Github 仓库](https://github.com/tc39/ecma262)上可以看到所有目前公开的提案\n- 如果你还不熟悉 ES6，Babel 有一个[很不错的特性概览](https://babeljs.io/docs/learn-es2015/)\n- 如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 [Exploring ES6](http://exploringjs.com/)和 Nicholas Zakas 的 [Understanding ECMAScript 6](https://leanpub.com/understandinges6)。Axel 的博客 [2ality](http://www.2ality.com/) 也是很不错的 ES6 资源\n\n<img class=\"shadow\" width=\"320\" src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n#### 著作权声明\n\n本文译自 [ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?](http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/)\n译者 [黄玄](http://weibo.com/huxpro)，首次发布于 [Hux Blog](http://huangxuan.me)，转载请保留以上链接\n","source":"_posts/JavaScript的版本是怎么回事.md","raw":"---\nlayout: post\ntitle: 'ES5, ES6, ES2016, ES.Next: JavaScript的版本是怎么回事？「译」'\nsubtitle: \"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?\"\ndate: 2015-09-22\nauthor: 'Hux'\nheader-img: 'img/post-bg-js-version.jpg'\ncategories: JavaScript #分类\ntop: 4\ntags:\n  - 前端开发\n  - JavaScript\n  - 翻译\n---\n\nJavaScript 有着很奇怪的命名史。\n\n1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript _（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）_\n\n![java-javascript](/assets/img/2015/09/javascript-java.jpg)\n<small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small>\n\n> 译者注：[wikipedia 的 JavaScript 词条](https://en.wikipedia.org/wiki/JavaScript#History) 更详细的叙述了这段历史\n\n1996 年，网景将 JavaScript 提交给 [ECMA International（欧洲计算机制造商协会）](http://www.ecma-international.org/) 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。\n\n> 术语（译者注）：\n>\n> - _标准（Standard）_： 用于定义与其他事物区别的一套规则\n> - _实现（Implementation）_： 某个标准的具体实施/真实实践\n\n不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。\n\n> 译者注：[ECMAScript 第四版草案](https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29)由于太过激进而被抛弃，Adobe 的 [ActionScript 3.0](https://en.wikipedia.org/wiki/ActionScript) 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）\n\n到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）\n\n目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 [decorators（装饰者）](https://github.com/wycats/javascript-decorators)，[async-await（async-await 异步编程模型）](https://github.com/lukehoban/ecmascript-asyncawait) 和 [static class properties（静态类属性）](https://github.com/jeffmo/es-class-properties)。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 [Babel 的官网](https://babeljs.io/docs/usage/experimental/) 上查看各个提案目前都在哪个阶段了。\n\n所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：\n\n- **ECMAScript**：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。\n- **JavaScript**：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。\n- **ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。\n- **ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅[这张兼容性表](http://kangax.github.io/compat-table/es6/)来查看不同浏览器和工具的实现情况。\n- **ECMAScript 2016**：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定\n- **ECMAScript Proposals**：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。\n\n在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。\n\n#### 一些资源\n\n- TC39 的 [Github 仓库](https://github.com/tc39/ecma262)上可以看到所有目前公开的提案\n- 如果你还不熟悉 ES6，Babel 有一个[很不错的特性概览](https://babeljs.io/docs/learn-es2015/)\n- 如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 [Exploring ES6](http://exploringjs.com/)和 Nicholas Zakas 的 [Understanding ECMAScript 6](https://leanpub.com/understandinges6)。Axel 的博客 [2ality](http://www.2ality.com/) 也是很不错的 ES6 资源\n\n<img class=\"shadow\" width=\"320\" src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n#### 著作权声明\n\n本文译自 [ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?](http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/)\n译者 [黄玄](http://weibo.com/huxpro)，首次发布于 [Hux Blog](http://huangxuan.me)，转载请保留以上链接\n","slug":"JavaScript的版本是怎么回事","published":1,"updated":"2019-03-25T07:06:07.841Z","comments":1,"photos":[],"link":"","_id":"cjwppw0ix0009f8czte0vrk0z","content":"<p>JavaScript 有着很奇怪的命名史。</p>\n<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>\n<p><img src=\"/assets/img/2015/09/javascript-java.jpg\" alt=\"java-javascript\"><br><small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small></p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmF2YVNjcmlwdCNIaXN0b3J5\" title=\"https://en.wikipedia.org/wiki/JavaScript#History\">wikipedia 的 JavaScript 词条<i class=\"fa fa-external-link\"></i></span> 更详细的叙述了这段历史</p>\n</blockquote>\n<p>1996 年，网景将 JavaScript 提交给 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnLw==\" title=\"http://www.ecma-international.org/\">ECMA International（欧洲计算机制造商协会）<i class=\"fa fa-external-link\"></i></span> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>\n<blockquote>\n<p>术语（译者注）：</p>\n<ul>\n<li><em>标准（Standard）</em>： 用于定义与其他事物区别的一套规则</li>\n<li><em>实现（Implementation）</em>： 某个标准的具体实施/真实实践</li>\n</ul>\n</blockquote>\n<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRUNNQVNjcmlwdCM0dGhfRWRpdGlvbl8uMjhhYmFuZG9uZWQuMjk=\" title=\"https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29\">ECMAScript 第四版草案<i class=\"fa fa-external-link\"></i></span>由于太过激进而被抛弃，Adobe 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWN0aW9uU2NyaXB0\" title=\"https://en.wikipedia.org/wiki/ActionScript\">ActionScript 3.0<i class=\"fa fa-external-link\"></i></span> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>\n</blockquote>\n<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>\n<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9qYXZhc2NyaXB0LWRlY29yYXRvcnM=\" title=\"https://github.com/wycats/javascript-decorators\">decorators（装饰者）<i class=\"fa fa-external-link\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2x1a2Vob2Jhbi9lY21hc2NyaXB0LWFzeW5jYXdhaXQ=\" title=\"https://github.com/lukehoban/ecmascript-asyncawait\">async-await（async-await 异步编程模型）<i class=\"fa fa-external-link\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZmZtby9lcy1jbGFzcy1wcm9wZXJ0aWVz\" title=\"https://github.com/jeffmo/es-class-properties\">static class properties（静态类属性）<i class=\"fa fa-external-link\"></i></span>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvdXNhZ2UvZXhwZXJpbWVudGFsLw==\" title=\"https://babeljs.io/docs/usage/experimental/\">Babel 的官网<i class=\"fa fa-external-link\"></i></span> 上查看各个提案目前都在哪个阶段了。</p>\n<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>\n<ul>\n<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>\n<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>\n<li><strong>ECMAScript 5 (ES5)</strong>：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>\n<li><strong>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)</strong>：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<span class=\"exturl\" data-url=\"aHR0cDovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8=\" title=\"http://kangax.github.io/compat-table/es6/\">这张兼容性表<i class=\"fa fa-external-link\"></i></span>来查看不同浏览器和工具的实现情况。</li>\n<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>\n<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>\n</ul>\n<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>\n<h4 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h4><ul>\n<li>TC39 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mg==\" title=\"https://github.com/tc39/ecma262\">Github 仓库<i class=\"fa fa-external-link\"></i></span>上可以看到所有目前公开的提案</li>\n<li>如果你还不熟悉 ES6，Babel 有一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvbGVhcm4tZXMyMDE1Lw==\" title=\"https://babeljs.io/docs/learn-es2015/\">很不错的特性概览<i class=\"fa fa-external-link\"></i></span></li>\n<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <span class=\"exturl\" data-url=\"aHR0cDovL2V4cGxvcmluZ2pzLmNvbS8=\" title=\"http://exploringjs.com/\">Exploring ES6<i class=\"fa fa-external-link\"></i></span>和 Nicholas Zakas 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFucHViLmNvbS91bmRlcnN0YW5kaW5nZXM2\" title=\"https://leanpub.com/understandinges6\">Understanding ECMAScript 6<i class=\"fa fa-external-link\"></i></span>。Axel 的博客 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4yYWxpdHkuY29tLw==\" title=\"http://www.2ality.com/\">2ality<i class=\"fa fa-external-link\"></i></span> 也是很不错的 ES6 资源</li>\n</ul>\n<p><img class=\"shadow\" width=\"320\" src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\"><br><small class=\"img-hint\">来学 JavaScript 吧！</small></p>\n<h4 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h4><p>本文译自 <span class=\"exturl\" data-url=\"aHR0cDovL2Jlbm1jY29ybWljay5vcmcvMjAxNS8wOS8xNC9lczUtZXM2LWVzMjAxNi1lcy1uZXh0LXdoYXRzLWdvaW5nLW9uLXdpdGgtamF2YXNjcmlwdC12ZXJzaW9uaW5nLw==\" title=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?<i class=\"fa fa-external-link\"></i></span><br>译者 <span class=\"exturl\" data-url=\"aHR0cDovL3dlaWJvLmNvbS9odXhwcm8=\" title=\"http://weibo.com/huxpro\">黄玄<i class=\"fa fa-external-link\"></i></span>，首次发布于 <span class=\"exturl\" data-url=\"aHR0cDovL2h1YW5neHVhbi5tZQ==\" title=\"http://huangxuan.me\">Hux Blog<i class=\"fa fa-external-link\"></i></span>，转载请保留以上链接</p>\n","site":{"data":{}},"excerpt":"","more":"<p>JavaScript 有着很奇怪的命名史。</p>\n<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>\n<p><img src=\"/assets/img/2015/09/javascript-java.jpg\" alt=\"java-javascript\"><br><small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small></p>\n<blockquote>\n<p>译者注：<a href=\"https://en.wikipedia.org/wiki/JavaScript#History\" target=\"_blank\" rel=\"noopener\">wikipedia 的 JavaScript 词条</a> 更详细的叙述了这段历史</p>\n</blockquote>\n<p>1996 年，网景将 JavaScript 提交给 <a href=\"http://www.ecma-international.org/\" target=\"_blank\" rel=\"noopener\">ECMA International（欧洲计算机制造商协会）</a> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>\n<blockquote>\n<p>术语（译者注）：</p>\n<ul>\n<li><em>标准（Standard）</em>： 用于定义与其他事物区别的一套规则</li>\n<li><em>实现（Implementation）</em>： 某个标准的具体实施/真实实践</li>\n</ul>\n</blockquote>\n<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>\n<blockquote>\n<p>译者注：<a href=\"https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29\" target=\"_blank\" rel=\"noopener\">ECMAScript 第四版草案</a>由于太过激进而被抛弃，Adobe 的 <a href=\"https://en.wikipedia.org/wiki/ActionScript\" target=\"_blank\" rel=\"noopener\">ActionScript 3.0</a> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>\n</blockquote>\n<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>\n<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <a href=\"https://github.com/wycats/javascript-decorators\" target=\"_blank\" rel=\"noopener\">decorators（装饰者）</a>，<a href=\"https://github.com/lukehoban/ecmascript-asyncawait\" target=\"_blank\" rel=\"noopener\">async-await（async-await 异步编程模型）</a> 和 <a href=\"https://github.com/jeffmo/es-class-properties\" target=\"_blank\" rel=\"noopener\">static class properties（静态类属性）</a>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <a href=\"https://babeljs.io/docs/usage/experimental/\" target=\"_blank\" rel=\"noopener\">Babel 的官网</a> 上查看各个提案目前都在哪个阶段了。</p>\n<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>\n<ul>\n<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>\n<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>\n<li><strong>ECMAScript 5 (ES5)</strong>：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>\n<li><strong>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)</strong>：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<a href=\"http://kangax.github.io/compat-table/es6/\" target=\"_blank\" rel=\"noopener\">这张兼容性表</a>来查看不同浏览器和工具的实现情况。</li>\n<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>\n<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>\n</ul>\n<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>\n<h4 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h4><ul>\n<li>TC39 的 <a href=\"https://github.com/tc39/ecma262\" target=\"_blank\" rel=\"noopener\">Github 仓库</a>上可以看到所有目前公开的提案</li>\n<li>如果你还不熟悉 ES6，Babel 有一个<a href=\"https://babeljs.io/docs/learn-es2015/\" target=\"_blank\" rel=\"noopener\">很不错的特性概览</a></li>\n<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <a href=\"http://exploringjs.com/\" target=\"_blank\" rel=\"noopener\">Exploring ES6</a>和 Nicholas Zakas 的 <a href=\"https://leanpub.com/understandinges6\" target=\"_blank\" rel=\"noopener\">Understanding ECMAScript 6</a>。Axel 的博客 <a href=\"http://www.2ality.com/\" target=\"_blank\" rel=\"noopener\">2ality</a> 也是很不错的 ES6 资源</li>\n</ul>\n<p><img class=\"shadow\" width=\"320\" src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\"><br><small class=\"img-hint\">来学 JavaScript 吧！</small></p>\n<h4 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h4><p>本文译自 <a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\" target=\"_blank\" rel=\"noopener\">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?</a><br>译者 <a href=\"http://weibo.com/huxpro\" target=\"_blank\" rel=\"noopener\">黄玄</a>，首次发布于 <a href=\"http://huangxuan.me\" target=\"_blank\" rel=\"noopener\">Hux Blog</a>，转载请保留以上链接</p>\n"},{"layout":"post","title":"初探Vue3.0新特性(未完待续)","subtitle":"修改监察者模式、重写Virtual DOM等等等。。。","date":"2018-12-10T04:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","top":7,"_content":"\n<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n<img \n  width=\"200\"\n  height=\"200\"\n  src=\"https://cn.vuejs.org/images/logo.png\"\n  alt=\"Vue\"></a></p>\n\n> ### 初探 Vue3.0 新特性\n>\n> &emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖----” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。\n> &emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”\n> &emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。\n\n![image](/assets/img/2018/12/vue3.0.png)\n\n> ### 9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\n>\n> 1.Virtual DOM 完全重写，mounting & patching 提速  100% ;\n> 2.更多编译时（compile-time）提醒以减少 runtime 开销;\n> 3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;\n> 4.放弃 Object.defineProperty ，使用更快的原生 Proxy;\n> 5.组件实例初始化速度提高 100％;\n> 6.提速一倍/内存使用降低一半。\n\n> ### 对于 3.0 的 proxy 特性有必要讲一讲\n> 对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）\n\n&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](https://docs.googl初探 Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!\n&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！\n\n![image](/assets/img/2018/12/1.png)\n![image](/assets/img/2018/12/2.png)\n\n> ### \n>\n\n\n最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！\n参考文献：\n- [初探 Vue3.0 中的一大亮点——Proxy !](https://juejin.im/post/5bfcbab0518825741e7bd67f)\n- [重磅！尤雨溪发布Vue 3.0开发路线](https://mp.weixin.qq.com/s/k6OhMNrpagtTmbhkW-tmZg)\n- [尤大大的PPT(需要翻墙下载)](https://docs.google.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)\n- [Proxy MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","source":"_posts/Vue3.0.md","raw":"---\nlayout: post\ntitle: \"初探Vue3.0新特性(未完待续)\"\nsubtitle: \"修改监察者模式、重写Virtual DOM等等等。。。\"\ndate: 2018-12-10 12:00:00\nauthor: \"Mark\"\ncategories: Vue #分类\nheader-img: \"img/post-bg-js-version.jpg\"\ntop: 7\ntags:\n  - 前端开发\n  - JavaScript\n  - Vue\n---\n\n<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n<img \n  width=\"200\"\n  height=\"200\"\n  src=\"https://cn.vuejs.org/images/logo.png\"\n  alt=\"Vue\"></a></p>\n\n> ### 初探 Vue3.0 新特性\n>\n> &emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖----” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。\n> &emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”\n> &emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。\n\n![image](/assets/img/2018/12/vue3.0.png)\n\n> ### 9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\n>\n> 1.Virtual DOM 完全重写，mounting & patching 提速  100% ;\n> 2.更多编译时（compile-time）提醒以减少 runtime 开销;\n> 3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;\n> 4.放弃 Object.defineProperty ，使用更快的原生 Proxy;\n> 5.组件实例初始化速度提高 100％;\n> 6.提速一倍/内存使用降低一半。\n\n> ### 对于 3.0 的 proxy 特性有必要讲一讲\n> 对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）\n\n&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](https://docs.googl初探 Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!\n&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！\n\n![image](/assets/img/2018/12/1.png)\n![image](/assets/img/2018/12/2.png)\n\n> ### \n>\n\n\n最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！\n参考文献：\n- [初探 Vue3.0 中的一大亮点——Proxy !](https://juejin.im/post/5bfcbab0518825741e7bd67f)\n- [重磅！尤雨溪发布Vue 3.0开发路线](https://mp.weixin.qq.com/s/k6OhMNrpagtTmbhkW-tmZg)\n- [尤大大的PPT(需要翻墙下载)](https://docs.google.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)\n- [Proxy MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","slug":"Vue3.0","published":1,"updated":"2019-03-25T07:06:07.843Z","comments":1,"photos":[],"link":"","_id":"cjwppw0iz000cf8czuraq4m99","content":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><br><img width=\"200\" height=\"200\" src=\"https://cn.vuejs.org/images/logo.png\" alt=\"Vue\"></a></p>\n\n<blockquote>\n<h3 id=\"初探-Vue3-0-新特性\"><a href=\"#初探-Vue3-0-新特性\" class=\"headerlink\" title=\"初探 Vue3.0 新特性\"></a>初探 Vue3.0 新特性</h3><p>&emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖—-” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。<br>&emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”<br>&emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。</p>\n</blockquote>\n<p><img src=\"/assets/img/2018/12/vue3.0.png\" alt=\"image\"></p>\n<blockquote>\n<h3 id=\"9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"><a href=\"#9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\" class=\"headerlink\" title=\"9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"></a>9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。</h3><p>1.Virtual DOM 完全重写，mounting &amp; patching 提速  100% ;<br>2.更多编译时（compile-time）提醒以减少 runtime 开销;<br>3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;<br>4.放弃 Object.defineProperty ，使用更快的原生 Proxy;<br>5.组件实例初始化速度提高 100％;<br>6.提速一倍/内存使用降低一半。</p>\n</blockquote>\n<blockquote>\n<h3 id=\"对于-3-0-的-proxy-特性有必要讲一讲\"><a href=\"#对于-3-0-的-proxy-特性有必要讲一讲\" class=\"headerlink\" title=\"对于 3.0 的 proxy 特性有必要讲一讲\"></a>对于 3.0 的 proxy 特性有必要讲一讲</h3><p>对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）</p>\n</blockquote>\n<p>&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2ds5Yid5o6iIFZ1ZTMuMCDmlrDnibnmgKdlLmNvbS9wcmVzZW50YXRpb24vZC8xeWhQR3loUXJKY3BKSTJaRnZCbWUzcEdLYUdOaUxpNzA5YzM3c3ZpdnYwby9lZGl0P3VzcD1zaGFyaW5n\" title=\"https://docs.googl初探 Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing\">PPT<i class=\"fa fa-external-link\"></i></span>），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!<br>&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！</p>\n<p><img src=\"/assets/img/2018/12/1.png\" alt=\"image\"><br><img src=\"/assets/img/2018/12/2.png\" alt=\"image\"></p>\n<blockquote>\n<p>### </p>\n</blockquote>\n<p>最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！<br>参考文献：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmZjYmFiMDUxODgyNTc0MWU3YmQ2N2Y=\" title=\"https://juejin.im/post/5bfcbab0518825741e7bd67f\">初探 Vue3.0 中的一大亮点——Proxy !<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvazZPaE1OcnBhZ3RUbWJoa1ctdG1aZw==\" title=\"https://mp.weixin.qq.com/s/k6OhMNrpagtTmbhkW-tmZg\">重磅！尤雨溪发布Vue 3.0开发路线<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMXloUEd5aFFySmNwSkkyWkZ2Qm1lM3BHS2FHTmlMaTcwOWMzN3N2aXZ2MG8vZWRpdD91c3A9c2hhcmluZw==\" title=\"https://docs.google.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing\">尤大大的PPT(需要翻墙下载)<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\">Proxy MDN<i class=\"fa fa-external-link\"></i></span></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\"><br><img width=\"200\" height=\"200\" src=\"https://cn.vuejs.org/images/logo.png\" alt=\"Vue\"></a></p>\n\n<blockquote>\n<h3 id=\"初探-Vue3-0-新特性\"><a href=\"#初探-Vue3-0-新特性\" class=\"headerlink\" title=\"初探 Vue3.0 新特性\"></a>初探 Vue3.0 新特性</h3><p>&emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖—-” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。<br>&emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”<br>&emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。</p>\n</blockquote>\n<p><img src=\"/assets/img/2018/12/vue3.0.png\" alt=\"image\"></p>\n<blockquote>\n<h3 id=\"9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"><a href=\"#9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\" class=\"headerlink\" title=\"9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"></a>9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。</h3><p>1.Virtual DOM 完全重写，mounting &amp; patching 提速  100% ;<br>2.更多编译时（compile-time）提醒以减少 runtime 开销;<br>3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;<br>4.放弃 Object.defineProperty ，使用更快的原生 Proxy;<br>5.组件实例初始化速度提高 100％;<br>6.提速一倍/内存使用降低一半。</p>\n</blockquote>\n<blockquote>\n<h3 id=\"对于-3-0-的-proxy-特性有必要讲一讲\"><a href=\"#对于-3-0-的-proxy-特性有必要讲一讲\" class=\"headerlink\" title=\"对于 3.0 的 proxy 特性有必要讲一讲\"></a>对于 3.0 的 proxy 特性有必要讲一讲</h3><p>对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）</p>\n</blockquote>\n<p>&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 <a href=\"https://docs.googl初探 Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">PPT</a>），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!<br>&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！</p>\n<p><img src=\"/assets/img/2018/12/1.png\" alt=\"image\"><br><img src=\"/assets/img/2018/12/2.png\" alt=\"image\"></p>\n<blockquote>\n<p>### </p>\n</blockquote>\n<p>最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！<br>参考文献：</p>\n<ul>\n<li><a href=\"https://juejin.im/post/5bfcbab0518825741e7bd67f\" target=\"_blank\" rel=\"noopener\">初探 Vue3.0 中的一大亮点——Proxy !</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/k6OhMNrpagtTmbhkW-tmZg\" target=\"_blank\" rel=\"noopener\">重磅！尤雨溪发布Vue 3.0开发路线</a></li>\n<li><a href=\"https://docs.google.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing\" target=\"_blank\" rel=\"noopener\">尤大大的PPT(需要翻墙下载)</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy\" target=\"_blank\" rel=\"noopener\">Proxy MDN</a></li>\n</ul>\n"},{"title":"Webpack打包工具总结","date":"2017-12-28T17:01:16.000Z","description":"Webpack打包工具语法学习","top":10,"_content":"\n# Webpack\n\n- 安装 webpack\n- 配置 webpack.config.js\n  > 官方教程：https://doc.webpack-china.org/configuration/#-\n\n```javascript\nvar path = require('path');\nmodule.exports = {\n\tentry: './foo.js',\n\t\toutput: {\n\t\tpath: path.resolve(__dirname, 'dist'),\n\t\tfilename: 'foo.bundle.js'\n\t}\n\tmodule:\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.(js|jsx)$/,\n\t\t\t\tuse: 'babel-loader'，\n\t\t\t\tinclude: [\n\t\t  path.resolve(__dirname, \"app\")\n\t\t],\n\t\texclude: [\n\t\t  path.resolve(__dirname, \"app/demo-files\")\n\t\t],\n\t\t// 这里是匹配条件，每个选项都接收一个正则表达式或字符串\n\t\t// test 和 include 具有相同的作用，都是必须匹配选项\n\t\t// exclude 是必不匹配选项（优先于 test 和 include）\n\t\t// 最佳实践：\n\t\t// - 只在 test 和 文件名匹配 中使用正则表达式\n\t\t// - 在 include 和 exclude 中使用绝对路径数组\n\t\t// - 尽量避免 exclude，更倾向于使用 include\n\t\t\t}\n\t\t]\n\t\tplugins: [\n\t\tnew (webpack.optimize.UglifyJsPlugin)\n\t\tnew HtmlWebpackPlugin(template: './src/index.html')\n\t  ]\n};\n```\n\n- 模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,\n- Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：\n  在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装\n\n```javascript\n// npm install --save-dev html-webpack-plugin\n// 在webpack.config.js中配置：\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n\tentry: {\n\t\tapp: './src/index.js',\n\t\tprint: './src/print.js'\n\t},\n\tplugins: [\n\t\tnew cleanWebpackPlugin(['dist']), //数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前\n\t\tnew HtmlWebpackPlugin({\n\t\t\ttitle: '页面标题', //生成页面标题\n\t\t\tfilename: 'index.html', //要生成的文件名\n\t\t\ttemplate: 'index.html' //要生成页面的时候的模板\n\t\t})\n\t],\n\toutput: {\n\t\tfilename: '[name].bundle.js',\n\t\tpath: path.resolve(__dirname, 'dist')\n\t}\n}\n```\n\n- JSon 文件中不能以有注释\n- 使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；\n\n```javascript\n  // 例:\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm run dev\n  // 例:\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm start\n\t// 如果键名是start，可以省略写run\n```\n\n- 配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json\n\n```javascript\n- \"scripts\": {\n\t\"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n\t}\n```\n\n- 配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库\n\n```javascript\n{\n  test: /\\.js$/,\n  exclude: /(node_modules|bower_components)/,//忽略目录\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: ['@babel/preset-env']\n    }\n  }\n}\n```\n\n- 解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！\n- 解析文件的话，要去下载各种文件类型的 loader\n- webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了\n- package.json 对象中最后一个参数项，不能书写逗号\n\n### CLI\n\n- （command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思\n- vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具\n\n### 打包的工程目录中 src 源码所在文件，dist 发布的目录\n","source":"_posts/Webpack.md","raw":"---\ntitle: Webpack打包工具总结\ndate: 2017-12-29 01:01:16\ncategories: JavaScript\ntags: [Webpack3.10, 语法, JS]\ndescription: Webpack打包工具语法学习\ntop: 10\n---\n\n# Webpack\n\n- 安装 webpack\n- 配置 webpack.config.js\n  > 官方教程：https://doc.webpack-china.org/configuration/#-\n\n```javascript\nvar path = require('path');\nmodule.exports = {\n\tentry: './foo.js',\n\t\toutput: {\n\t\tpath: path.resolve(__dirname, 'dist'),\n\t\tfilename: 'foo.bundle.js'\n\t}\n\tmodule:\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.(js|jsx)$/,\n\t\t\t\tuse: 'babel-loader'，\n\t\t\t\tinclude: [\n\t\t  path.resolve(__dirname, \"app\")\n\t\t],\n\t\texclude: [\n\t\t  path.resolve(__dirname, \"app/demo-files\")\n\t\t],\n\t\t// 这里是匹配条件，每个选项都接收一个正则表达式或字符串\n\t\t// test 和 include 具有相同的作用，都是必须匹配选项\n\t\t// exclude 是必不匹配选项（优先于 test 和 include）\n\t\t// 最佳实践：\n\t\t// - 只在 test 和 文件名匹配 中使用正则表达式\n\t\t// - 在 include 和 exclude 中使用绝对路径数组\n\t\t// - 尽量避免 exclude，更倾向于使用 include\n\t\t\t}\n\t\t]\n\t\tplugins: [\n\t\tnew (webpack.optimize.UglifyJsPlugin)\n\t\tnew HtmlWebpackPlugin(template: './src/index.html')\n\t  ]\n};\n```\n\n- 模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,\n- Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：\n  在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装\n\n```javascript\n// npm install --save-dev html-webpack-plugin\n// 在webpack.config.js中配置：\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n\tentry: {\n\t\tapp: './src/index.js',\n\t\tprint: './src/print.js'\n\t},\n\tplugins: [\n\t\tnew cleanWebpackPlugin(['dist']), //数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前\n\t\tnew HtmlWebpackPlugin({\n\t\t\ttitle: '页面标题', //生成页面标题\n\t\t\tfilename: 'index.html', //要生成的文件名\n\t\t\ttemplate: 'index.html' //要生成页面的时候的模板\n\t\t})\n\t],\n\toutput: {\n\t\tfilename: '[name].bundle.js',\n\t\tpath: path.resolve(__dirname, 'dist')\n\t}\n}\n```\n\n- JSon 文件中不能以有注释\n- 使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；\n\n```javascript\n  // 例:\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm run dev\n  // 例:\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm start\n\t// 如果键名是start，可以省略写run\n```\n\n- 配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json\n\n```javascript\n- \"scripts\": {\n\t\"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n\t}\n```\n\n- 配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库\n\n```javascript\n{\n  test: /\\.js$/,\n  exclude: /(node_modules|bower_components)/,//忽略目录\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: ['@babel/preset-env']\n    }\n  }\n}\n```\n\n- 解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！\n- 解析文件的话，要去下载各种文件类型的 loader\n- webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了\n- package.json 对象中最后一个参数项，不能书写逗号\n\n### CLI\n\n- （command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思\n- vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具\n\n### 打包的工程目录中 src 源码所在文件，dist 发布的目录\n","slug":"Webpack","published":1,"updated":"2019-03-25T07:06:07.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwppw0j1000df8cz42tzxx9w","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><ul>\n<li>安装 webpack</li>\n<li>配置 webpack.config.js<blockquote>\n<p>官方教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2Mud2VicGFjay1jaGluYS5vcmcvY29uZmlndXJhdGlvbi8jLQ==\" title=\"https://doc.webpack-china.org/configuration/#-\">https://doc.webpack-china.org/configuration/#-<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: <span class=\"string\">'./foo.js'</span>,</span><br><span class=\"line\">\t\toutput: &#123;</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'foo.bundle.js'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: <span class=\"string\">'babel-loader'</span>，</span><br><span class=\"line\">\t\t\t\tinclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\texclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app/demo-files\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最佳实践：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> (webpack.optimize.UglifyJsPlugin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(template: <span class=\"string\">'./src/index.html'</span>)</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>\n<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install --save-dev html-webpack-plugin</span></span><br><span class=\"line\"><span class=\"comment\">// 在webpack.config.js中配置：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">\t\tprint: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> cleanWebpackPlugin([<span class=\"string\">'dist'</span>]), <span class=\"comment\">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttitle: <span class=\"string\">'页面标题'</span>, <span class=\"comment\">//生成页面标题</span></span><br><span class=\"line\">\t\t\tfilename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">//要生成的文件名</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'index.html'</span> <span class=\"comment\">//要生成页面的时候的模板</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput: &#123;</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSon 文件中不能以有注释</li>\n<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm run dev</span></span><br><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm start</span></span><br><span class=\"line\"><span class=\"comment\">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,<span class=\"comment\">//忽略目录</span></span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>\n<li>解析文件的话，要去下载各种文件类型的 loader</li>\n<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>\n<li>package.json 对象中最后一个参数项，不能书写逗号</li>\n</ul>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><ul>\n<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>\n<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>\n</ul>\n<h3 id=\"打包的工程目录中-src-源码所在文件，dist-发布的目录\"><a href=\"#打包的工程目录中-src-源码所在文件，dist-发布的目录\" class=\"headerlink\" title=\"打包的工程目录中 src 源码所在文件，dist 发布的目录\"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><ul>\n<li>安装 webpack</li>\n<li>配置 webpack.config.js<blockquote>\n<p>官方教程：<a href=\"https://doc.webpack-china.org/configuration/#-\" target=\"_blank\" rel=\"noopener\">https://doc.webpack-china.org/configuration/#-</a></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: <span class=\"string\">'./foo.js'</span>,</span><br><span class=\"line\">\t\toutput: &#123;</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'foo.bundle.js'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: <span class=\"string\">'babel-loader'</span>，</span><br><span class=\"line\">\t\t\t\tinclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\texclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app/demo-files\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最佳实践：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> (webpack.optimize.UglifyJsPlugin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(template: <span class=\"string\">'./src/index.html'</span>)</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>\n<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install --save-dev html-webpack-plugin</span></span><br><span class=\"line\"><span class=\"comment\">// 在webpack.config.js中配置：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">\t\tprint: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> cleanWebpackPlugin([<span class=\"string\">'dist'</span>]), <span class=\"comment\">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttitle: <span class=\"string\">'页面标题'</span>, <span class=\"comment\">//生成页面标题</span></span><br><span class=\"line\">\t\t\tfilename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">//要生成的文件名</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'index.html'</span> <span class=\"comment\">//要生成页面的时候的模板</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput: &#123;</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>JSon 文件中不能以有注释</li>\n<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm run dev</span></span><br><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm start</span></span><br><span class=\"line\"><span class=\"comment\">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,<span class=\"comment\">//忽略目录</span></span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>\n<li>解析文件的话，要去下载各种文件类型的 loader</li>\n<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>\n<li>package.json 对象中最后一个参数项，不能书写逗号</li>\n</ul>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><ul>\n<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>\n<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>\n</ul>\n<h3 id=\"打包的工程目录中-src-源码所在文件，dist-发布的目录\"><a href=\"#打包的工程目录中-src-源码所在文件，dist-发布的目录\" class=\"headerlink\" title=\"打包的工程目录中 src 源码所在文件，dist 发布的目录\"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3>"},{"title":"Vuex 状态管理插件学习","date":"2018-03-12T08:16:16.000Z","description":"Vuex 学习","author":"Mark","top":9,"_content":"\n# Vue 状态管理插件学习\n\n- vuex vue 提供的数据状态管理插件（俗称数据共享中心）\n- state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）\n\n- 获取仓库中定义值的方法\n\n```javascript\n// {{$store.state.定义的属性}}\n// 使用计算属性\ncomputed:{\n\tcount(){\n\t\treturn this.$store.state.定义的属性\n\t}\n}\n```\n\n- 3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法\n\n```javascript\n//es6写法\ncomputed: mapState({\n\tcount: state => state.count\n})\n```\n\n- 等同于\n\n```javascript\ncomputed: mapState({\n\tcount: state => {\n\t\treturn state.count\n\t}\n})\n```\n\n- 4.mapState 扩展使用\n\n```javascript\ncomputed: mapState(['在state中定义的属性'])\n// 这个会根据你定义的属性名绑定到vue实例上\n```\n\n- 5.mutations 提交更改仓库中定义值的方法（修改状态）\n- 使用$store.commit('调用定义在 mutations 中定义的方法名'，要传递给调用方法的参数)\n- 获取状态管理器中定义的方法(mutations)\n\n```javascript\nconst mutations = {\n\t// 定义一个加的方法\n\tadd(state) {\n\t\tstate.count++\n\t},\n\t// 定义一个减的方法\n\treduce(state) {\n\t\tstate.count--\n\t}\n}\n// 调用方法\n// 在vue中使用import导入辅助函数\nimport { mapState, mapMutations } from 'vuex'\n\nmethods: mapMutations(['add', 'reduce'])\n// 或\nmethods: mapMutations([(countAdd: 'add'), (countReauce: 'reduce')])\n```\n\n- 6.vuex 中的计算属性（过滤属性）getters\n\n```javascript\n// 定义方法\nconst getters = {\n  count:function(state){\n    return state.count += 100;\n\t}\n\t// 或者\n\tcount: state => { return state.count += 100 }\n}\n\n// 调用方法\nimport { mapState,mapMutations,mapGetters } from 'vuex';\n\ncomputed: mapGetters({\n\tcount: (state) => { return state.count }\n})\n```\n\n- 7.vuex 中的 actions，异步提交方式\n\n```javascript\nconst actions = {\n\t// context：上下文对象，这里你可以理解称store本身。\n\taddAction(context) {\n\t\tcontext.commit('add', 10)\n\t},\n\t// {commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。\n\treduceAction({ commit }) {\n\t\tcommit('reduce')\n\t}\n}\n```\n\n- 8.module 模块组\n\n```javascript\n// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中\nconst moduleA={\n  state,\n  mutations,\n  getters,\n  actions\n}\n// 调用方法\nmodules: {\n  //模块别名:模块名，记得要使用import引入模块\n\ta:moduleA\n}\n\n//使用模块值和方法\n和以上的使用方法一样，只不过前边加一个模块别名\n```\n","source":"_posts/Vuex.md","raw":"---\ntitle: Vuex 状态管理插件学习 #文章页面上的显示名称，一般是中文\ndate: 2018-03-12 16:16:16 #文章生成时间，一般不改，当然也可以任意修改\ntags: [vue, vuex, JS] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: Vuex 学习 #附加一段文章摘要，字数最好在 140 字以内，会出现在 meta 的 description 里面\ncategories: Vue #分类\nauthor: 'Mark'\ntop: 9\n---\n\n# Vue 状态管理插件学习\n\n- vuex vue 提供的数据状态管理插件（俗称数据共享中心）\n- state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）\n\n- 获取仓库中定义值的方法\n\n```javascript\n// {{$store.state.定义的属性}}\n// 使用计算属性\ncomputed:{\n\tcount(){\n\t\treturn this.$store.state.定义的属性\n\t}\n}\n```\n\n- 3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法\n\n```javascript\n//es6写法\ncomputed: mapState({\n\tcount: state => state.count\n})\n```\n\n- 等同于\n\n```javascript\ncomputed: mapState({\n\tcount: state => {\n\t\treturn state.count\n\t}\n})\n```\n\n- 4.mapState 扩展使用\n\n```javascript\ncomputed: mapState(['在state中定义的属性'])\n// 这个会根据你定义的属性名绑定到vue实例上\n```\n\n- 5.mutations 提交更改仓库中定义值的方法（修改状态）\n- 使用$store.commit('调用定义在 mutations 中定义的方法名'，要传递给调用方法的参数)\n- 获取状态管理器中定义的方法(mutations)\n\n```javascript\nconst mutations = {\n\t// 定义一个加的方法\n\tadd(state) {\n\t\tstate.count++\n\t},\n\t// 定义一个减的方法\n\treduce(state) {\n\t\tstate.count--\n\t}\n}\n// 调用方法\n// 在vue中使用import导入辅助函数\nimport { mapState, mapMutations } from 'vuex'\n\nmethods: mapMutations(['add', 'reduce'])\n// 或\nmethods: mapMutations([(countAdd: 'add'), (countReauce: 'reduce')])\n```\n\n- 6.vuex 中的计算属性（过滤属性）getters\n\n```javascript\n// 定义方法\nconst getters = {\n  count:function(state){\n    return state.count += 100;\n\t}\n\t// 或者\n\tcount: state => { return state.count += 100 }\n}\n\n// 调用方法\nimport { mapState,mapMutations,mapGetters } from 'vuex';\n\ncomputed: mapGetters({\n\tcount: (state) => { return state.count }\n})\n```\n\n- 7.vuex 中的 actions，异步提交方式\n\n```javascript\nconst actions = {\n\t// context：上下文对象，这里你可以理解称store本身。\n\taddAction(context) {\n\t\tcontext.commit('add', 10)\n\t},\n\t// {commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。\n\treduceAction({ commit }) {\n\t\tcommit('reduce')\n\t}\n}\n```\n\n- 8.module 模块组\n\n```javascript\n// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中\nconst moduleA={\n  state,\n  mutations,\n  getters,\n  actions\n}\n// 调用方法\nmodules: {\n  //模块别名:模块名，记得要使用import引入模块\n\ta:moduleA\n}\n\n//使用模块值和方法\n和以上的使用方法一样，只不过前边加一个模块别名\n```\n","slug":"Vuex","published":1,"updated":"2019-03-25T07:06:07.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwppw0j4000hf8cze7gxn2ij","content":"<h1 id=\"Vue-状态管理插件学习\"><a href=\"#Vue-状态管理插件学习\" class=\"headerlink\" title=\"Vue 状态管理插件学习\"></a>Vue 状态管理插件学习</h1><ul>\n<li>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</li>\n<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>\n</li>\n<li><p>获取仓库中定义值的方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#123;$store.state.定义的属性&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用计算属性</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tcount()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.定义的属性</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>等同于</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.mapState 扩展使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([<span class=\"string\">'在state中定义的属性'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>\n<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>\n<li>获取状态管理器中定义的方法(mutations)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个加的方法</span></span><br><span class=\"line\">\tadd(state) &#123;</span><br><span class=\"line\">\t\tstate.count++</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个减的方法</span></span><br><span class=\"line\">\treduce(state) &#123;</span><br><span class=\"line\">\t\tstate.count--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">// 在vue中使用import导入辅助函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: mapMutations([<span class=\"string\">'add'</span>, <span class=\"string\">'reduce'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">methods: mapMutations([(countAdd: <span class=\"string\">'add'</span>), (countReauce: <span class=\"string\">'reduce'</span>)])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>6.vuex 中的计算属性（过滤属性）getters</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  count:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 或者</span></span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState,mapMutations,mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>7.vuex 中的 actions，异步提交方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class=\"line\">\taddAction(context) &#123;</span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">'add'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;commit&#125;：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class=\"line\">\treduceAction(&#123; commit &#125;) &#123;</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'reduce'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>8.module 模块组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA=&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">modules: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class=\"line\">\ta:moduleA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用模块值和方法</span></span><br><span class=\"line\">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Vue-状态管理插件学习\"><a href=\"#Vue-状态管理插件学习\" class=\"headerlink\" title=\"Vue 状态管理插件学习\"></a>Vue 状态管理插件学习</h1><ul>\n<li>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</li>\n<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>\n</li>\n<li><p>获取仓库中定义值的方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#123;$store.state.定义的属性&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用计算属性</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tcount()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.定义的属性</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>等同于</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>4.mapState 扩展使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([<span class=\"string\">'在state中定义的属性'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>\n<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>\n<li>获取状态管理器中定义的方法(mutations)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个加的方法</span></span><br><span class=\"line\">\tadd(state) &#123;</span><br><span class=\"line\">\t\tstate.count++</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个减的方法</span></span><br><span class=\"line\">\treduce(state) &#123;</span><br><span class=\"line\">\t\tstate.count--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">// 在vue中使用import导入辅助函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: mapMutations([<span class=\"string\">'add'</span>, <span class=\"string\">'reduce'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">methods: mapMutations([(countAdd: <span class=\"string\">'add'</span>), (countReauce: <span class=\"string\">'reduce'</span>)])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>6.vuex 中的计算属性（过滤属性）getters</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  count:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 或者</span></span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState,mapMutations,mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>7.vuex 中的 actions，异步提交方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class=\"line\">\taddAction(context) &#123;</span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">'add'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;commit&#125;：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class=\"line\">\treduceAction(&#123; commit &#125;) &#123;</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'reduce'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>8.module 模块组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA=&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">modules: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class=\"line\">\ta:moduleA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用模块值和方法</span></span><br><span class=\"line\">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></table></figure>\n"},{"title":"MAC常用软件推荐","subtitle":"Mac","author":"Mark","date":"2019-06-10T01:44:40.000Z","_content":"\n#### coding 软件\n\n- Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件。\n- atom github 出品开源编辑器。\n- sublime3 收费编辑器\n- 微信开发者工具（开发微信小程序和微信公众号）\n- 支付宝小程序（开发支付宝小程序）\n- HBuilder DCloud 出品 IDE\n- Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。\n\n### 调试软件\n\n### 文档编写\n\n### 邮件收发\n\n### 终端\n\n### Tip\n\n- 本文不提供下载链接，只推荐 Best SoftWare！\n","source":"_posts/mac常用软件.md","raw":"---\ntitle: MAC常用软件推荐\nsubtitle: \"Mac\"\nauthor: \"Mark\"\ncategories: Mac #分类\ndate: 2019-06-10 09:44:40\ntags:\n  - 前端开发\n  - Mac\n---\n\n#### coding 软件\n\n- Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件。\n- atom github 出品开源编辑器。\n- sublime3 收费编辑器\n- 微信开发者工具（开发微信小程序和微信公众号）\n- 支付宝小程序（开发支付宝小程序）\n- HBuilder DCloud 出品 IDE\n- Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。\n\n### 调试软件\n\n### 文档编写\n\n### 邮件收发\n\n### 终端\n\n### Tip\n\n- 本文不提供下载链接，只推荐 Best SoftWare！\n","slug":"mac常用软件","published":1,"updated":"2019-06-10T02:08:15.390Z","_id":"cjwppw0j5000jf8cz8fzsssnp","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"coding-软件\"><a href=\"#coding-软件\" class=\"headerlink\" title=\"coding 软件\"></a>coding 软件</h4><ul>\n<li>Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件。</li>\n<li>atom github 出品开源编辑器。</li>\n<li>sublime3 收费编辑器</li>\n<li>微信开发者工具（开发微信小程序和微信公众号）</li>\n<li>支付宝小程序（开发支付宝小程序）</li>\n<li>HBuilder DCloud 出品 IDE</li>\n<li>Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。</li>\n</ul>\n<h3 id=\"调试软件\"><a href=\"#调试软件\" class=\"headerlink\" title=\"调试软件\"></a>调试软件</h3><h3 id=\"文档编写\"><a href=\"#文档编写\" class=\"headerlink\" title=\"文档编写\"></a>文档编写</h3><h3 id=\"邮件收发\"><a href=\"#邮件收发\" class=\"headerlink\" title=\"邮件收发\"></a>邮件收发</h3><h3 id=\"终端\"><a href=\"#终端\" class=\"headerlink\" title=\"终端\"></a>终端</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><ul>\n<li>本文不提供下载链接，只推荐 Best SoftWare！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"coding-软件\"><a href=\"#coding-软件\" class=\"headerlink\" title=\"coding 软件\"></a>coding 软件</h4><ul>\n<li>Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件。</li>\n<li>atom github 出品开源编辑器。</li>\n<li>sublime3 收费编辑器</li>\n<li>微信开发者工具（开发微信小程序和微信公众号）</li>\n<li>支付宝小程序（开发支付宝小程序）</li>\n<li>HBuilder DCloud 出品 IDE</li>\n<li>Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。</li>\n</ul>\n<h3 id=\"调试软件\"><a href=\"#调试软件\" class=\"headerlink\" title=\"调试软件\"></a>调试软件</h3><h3 id=\"文档编写\"><a href=\"#文档编写\" class=\"headerlink\" title=\"文档编写\"></a>文档编写</h3><h3 id=\"邮件收发\"><a href=\"#邮件收发\" class=\"headerlink\" title=\"邮件收发\"></a>邮件收发</h3><h3 id=\"终端\"><a href=\"#终端\" class=\"headerlink\" title=\"终端\"></a>终端</h3><h3 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h3><ul>\n<li>本文不提供下载链接，只推荐 Best SoftWare！</li>\n</ul>\n"},{"layout":"post","title":"eslint-vscode-setting","subtitle":"eslint-vscode-setting","date":"2018-11-29T16:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","top":2,"_content":"> ## 第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\n\n```bash\nnpm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g\n```\n\n> ## 第二步：在任意目录放置.eslintrc.js\n>\n> ## 第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\n>\n> ## 第四步：在 vscode 中的配置\n\n```javascript\n\t// eslint config start\n\t\"eslint.autoFixOnSave\": true,\n\t\"eslint.options\": {\n\t\t\"configFile\": \"C:/Users/Mark/.eslint/.eslintrc.js\"\n\t},\n\t\"eslint.validate\": [\n\t\t\"javascript\",\n\t\t\"javascriptreact\",\n\t\t\"html\",\n\t\t\"vue\",\n\t\t{\n\t\t\t\"language\": \"vue\",\n\t\t\t\"autoFix\": true\n\t\t}\n\t],\n\t\"vetur.format.options.tabSize\": 2,\n\t\"vetur.format.options.useTabs\": true,\n\t\"vetur.format.defaultFormatterOptions\": {\n\t\t\"prettier\": {\n\t\t\t// Prettier option here\n\t\t\t\"semi\": false,\n\t\t\t\"tabWidth\": 2,\n\t\t\t\"useTabs\": true,\n\t\t\t\"singleQuote\": true\n\t\t},\n\t\t\"prettyhtml\": {\n\t\t\t\"printWidth\": 100, // No line exceeds 100 characters\n\t\t\t\"singleQuote\": false // Prefer double quotes over single quotes\n\t\t}\n\t},\n\t// prettier 格式化配置\n\t\"prettier.tabWidth\": 2,\n\t\"prettier.useTabs\": true,\n\t\"prettier.singleQuote\": true,\n\t\"prettier.semi\": false,\n\t\"stylusSupremacy.insertColons\": false, // 是否插入冒号\n\t\"stylusSupremacy.insertSemicolons\": false, // 是否插入分好\n\t\"stylusSupremacy.insertBraces\": false, // 是否插入大括号\n\t\"stylusSupremacy.insertNewLineAroundImports\": false, // import之后是否换行\n\t\"stylusSupremacy.insertNewLineAroundBlocks\": false,\n```\n","source":"_posts/eslint-vscode-setting.md","raw":"---\nlayout: post\ntitle: 'eslint-vscode-setting'\nsubtitle: \"eslint-vscode-setting\"\ndate: 2018-11-30\nauthor: 'Mark'\ncategories: JavaScript #分类\nheader-img: 'img/post-bg-js-version.jpg'\ntop: 2\ntags:\n  - 前端开发\n  - JavaScript\n  - VSCode\n  - ESLint\n---\n> ## 第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\n\n```bash\nnpm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g\n```\n\n> ## 第二步：在任意目录放置.eslintrc.js\n>\n> ## 第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\n>\n> ## 第四步：在 vscode 中的配置\n\n```javascript\n\t// eslint config start\n\t\"eslint.autoFixOnSave\": true,\n\t\"eslint.options\": {\n\t\t\"configFile\": \"C:/Users/Mark/.eslint/.eslintrc.js\"\n\t},\n\t\"eslint.validate\": [\n\t\t\"javascript\",\n\t\t\"javascriptreact\",\n\t\t\"html\",\n\t\t\"vue\",\n\t\t{\n\t\t\t\"language\": \"vue\",\n\t\t\t\"autoFix\": true\n\t\t}\n\t],\n\t\"vetur.format.options.tabSize\": 2,\n\t\"vetur.format.options.useTabs\": true,\n\t\"vetur.format.defaultFormatterOptions\": {\n\t\t\"prettier\": {\n\t\t\t// Prettier option here\n\t\t\t\"semi\": false,\n\t\t\t\"tabWidth\": 2,\n\t\t\t\"useTabs\": true,\n\t\t\t\"singleQuote\": true\n\t\t},\n\t\t\"prettyhtml\": {\n\t\t\t\"printWidth\": 100, // No line exceeds 100 characters\n\t\t\t\"singleQuote\": false // Prefer double quotes over single quotes\n\t\t}\n\t},\n\t// prettier 格式化配置\n\t\"prettier.tabWidth\": 2,\n\t\"prettier.useTabs\": true,\n\t\"prettier.singleQuote\": true,\n\t\"prettier.semi\": false,\n\t\"stylusSupremacy.insertColons\": false, // 是否插入冒号\n\t\"stylusSupremacy.insertSemicolons\": false, // 是否插入分好\n\t\"stylusSupremacy.insertBraces\": false, // 是否插入大括号\n\t\"stylusSupremacy.insertNewLineAroundImports\": false, // import之后是否换行\n\t\"stylusSupremacy.insertNewLineAroundBlocks\": false,\n```\n","slug":"eslint-vscode-setting","published":1,"updated":"2019-03-25T07:06:07.849Z","comments":1,"photos":[],"link":"","_id":"cjwppw0j7000nf8czvxoocpsj","content":"<blockquote>\n<h2 id=\"第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\"><a href=\"#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\" class=\"headerlink\" title=\"第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"第二步：在任意目录放置-eslintrc-js\"><a href=\"#第二步：在任意目录放置-eslintrc-js\" class=\"headerlink\" title=\"第二步：在任意目录放置.eslintrc.js\"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id=\"第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\"><a href=\"#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\" class=\"headerlink\" title=\"第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id=\"第四步：在-vscode-中的配置\"><a href=\"#第四步：在-vscode-中的配置\" class=\"headerlink\" title=\"第四步：在 vscode 中的配置\"></a>第四步：在 vscode 中的配置</h2></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint config start</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"C:/Users/Mark/.eslint/.eslintrc.js\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">\t<span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prettier option here</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"printWidth\"</span>: <span class=\"number\">100</span>, <span class=\"comment\">// No line exceeds 100 characters</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">false</span> <span class=\"comment\">// Prefer double quotes over single quotes</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// prettier 格式化配置</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<h2 id=\"第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\"><a href=\"#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\" class=\"headerlink\" title=\"第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<h2 id=\"第二步：在任意目录放置-eslintrc-js\"><a href=\"#第二步：在任意目录放置-eslintrc-js\" class=\"headerlink\" title=\"第二步：在任意目录放置.eslintrc.js\"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id=\"第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\"><a href=\"#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\" class=\"headerlink\" title=\"第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id=\"第四步：在-vscode-中的配置\"><a href=\"#第四步：在-vscode-中的配置\" class=\"headerlink\" title=\"第四步：在 vscode 中的配置\"></a>第四步：在 vscode 中的配置</h2></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint config start</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"C:/Users/Mark/.eslint/.eslintrc.js\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">\t<span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prettier option here</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"printWidth\"</span>: <span class=\"number\">100</span>, <span class=\"comment\">// No line exceeds 100 characters</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">false</span> <span class=\"comment\">// Prefer double quotes over single quotes</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// prettier 格式化配置</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n"},{"title":"分享 stylus 语法学习笔记","subtitle":"stylus 语法笔记","author":"Mark","date":"2019-05-28T07:51:21.000Z","_content":"\n### 1、定义变量\n\n```stylus\n$var_name = value\n```\n\nis defined 用来判断一个变量是否已经被赋值。\n\n```stylus\nfoo is defined\n// => false\n```\n\n或者采用内置函数 lookup(name)：\n\n```stylus\nname = #80e2e9\nlookup(name) // 变量名，判断是否已经定义该变量\n// => #80e2e9\n```\n\n### 2、for 循环\n\n```stylus\nfor $i in (0 .. 24)\n   .cc-{$i}\n      width 100 / $i\n```\n\n### 3、导入\n\n@import \"文件路径\"\n@import \"文件路径/\\*\"导入目录下所有 styl 文件\n\n@require \"文件路径\"\n@require \"文件路径/\\*\"导入目录下所有 styl 文件\n\n### 4、插值\n\n{}使用该花括号进行插值\nStylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。\n例如：\n\n```stylus\n-webkit-{'border' + '-radius'}评估为-webkit-border-radius。\n```\n\n选择器插值\n\n```stylus\ntable\n  for row in 1 2 3 4 5\n    tr:nth-child({row})\n      height: 10px * row\n```\n\n会产生如下 css\n\n```css\ntable tr:nth-child(1) {\n\theight: 10px;\n}\ntable tr:nth-child(2) {\n\theight: 20px;\n}\ntable tr:nth-child(3) {\n\theight: 30px;\n}\ntable tr:nth-child(4) {\n\theight: 40px;\n}\ntable tr:nth-child(5) {\n\theight: 50px;\n}\n```\n\n您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：\n\n```stylus\nmySelectors = '#foo,#bar,.baz'\n\n{mySelectors}\n  background: #000\n```\n\n产生如下\n\n```css\n#foo,\n#bar,\n.baz {\n\tbackground: #000;\n}\n```\n\n### 5、mixin\n\nmixin 和函数都以相同的方式定义，但它们以不同的方式应用。\n\n例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。\n\n在 border-radius()选择器中调用时，属性将展开并复制到选择器中。\n\n```stylus\nborder-radius(n)\n  -webkit-border-radius n\n  -moz-border-radius n\n  border-radius n\n\nform input[type=button]\n  border-radius(5px)\n```\n\n编译后\n\n```css\nform input[type=\"button\"] {\n\t-webkit-border-radius: 5px;\n\t-moz-border-radius: 5px;\n\tborder-radius: 5px;\n}\n```\n\n使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！\n\n```stylus\nborder-radius(n)\n  -webkit-border-radius n\n  -moz-border-radius n\n  border-radius n\n\nform input[type=button]\n  border-radius 5px\n```\n\n请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。\n为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：\narguments 和 js 函数的 arguments 差不多都是获取函数实际参数\nlength(arguments) 获取参数个数\n\n```stylus\nborder-radius()\n  -webkit-border-radius arguments\n  -moz-border-radius arguments\n  border-radius arguments\n```\n\n现在我们可以传递像 border-radius 1px 2px / 3px 4px！\n\n### 6、选择器\n\n^[N],选择嵌套选择器的第个\n^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。\n^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。\n\n```stylus\n.foo\n  &__bar\n    width: 10px\n\n    ^[0]:hover &\n      width: 20px\n```\n\n注：第一层和第二层是一个完整的选择器.foo\\_\\_bar，但^[0]部分引用第一层，即.foo。\n编译后：\n\n```stylus\n.foo__bar {\n  width: 10px;\n}\n.foo:hover .foo__bar {\n  width: 20px;\n}\n```\n\n若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。\n\n```stylus\n.foo\n  &__bar\n    &_baz\n      width: 10px\n\n      ^[-1]:hover &\n        width: 20px\n```\n\n编译后：\n\n```stylus\n.foo__bar_baz {\n  width: 10px;\n}\n.foo__bar:hover .foo__bar_baz {\n  width: 20px;\n}\n```\n\n### 7、块混合 Block mixins\n\n我们使用+前缀可以给混合(mixins)传递块(blocks):\n\n```stylus\nfoo()\n  .bar\n    {block}// 调用 mixins里的代码块类似vue 的slot一样\n\n+foo()\n  width: 10px\n编译后：\n\n.bar {\n   width: 10px;\n }\n```\n\n### 内置方法\n\n[文档](http://stylus-lang.com/docs/bifs.html)\n","source":"_posts/stylus语法笔记.md","raw":"---\ntitle: 分享 stylus 语法学习笔记\nsubtitle: \"stylus 语法笔记\"\nauthor: \"Mark\"\ncategories: JavaScript #分类\ndate: 2019-05-28 15:51:21\ntags:\n  - 前端开发\n  - stylus\n  - css\n---\n\n### 1、定义变量\n\n```stylus\n$var_name = value\n```\n\nis defined 用来判断一个变量是否已经被赋值。\n\n```stylus\nfoo is defined\n// => false\n```\n\n或者采用内置函数 lookup(name)：\n\n```stylus\nname = #80e2e9\nlookup(name) // 变量名，判断是否已经定义该变量\n// => #80e2e9\n```\n\n### 2、for 循环\n\n```stylus\nfor $i in (0 .. 24)\n   .cc-{$i}\n      width 100 / $i\n```\n\n### 3、导入\n\n@import \"文件路径\"\n@import \"文件路径/\\*\"导入目录下所有 styl 文件\n\n@require \"文件路径\"\n@require \"文件路径/\\*\"导入目录下所有 styl 文件\n\n### 4、插值\n\n{}使用该花括号进行插值\nStylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。\n例如：\n\n```stylus\n-webkit-{'border' + '-radius'}评估为-webkit-border-radius。\n```\n\n选择器插值\n\n```stylus\ntable\n  for row in 1 2 3 4 5\n    tr:nth-child({row})\n      height: 10px * row\n```\n\n会产生如下 css\n\n```css\ntable tr:nth-child(1) {\n\theight: 10px;\n}\ntable tr:nth-child(2) {\n\theight: 20px;\n}\ntable tr:nth-child(3) {\n\theight: 30px;\n}\ntable tr:nth-child(4) {\n\theight: 40px;\n}\ntable tr:nth-child(5) {\n\theight: 50px;\n}\n```\n\n您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：\n\n```stylus\nmySelectors = '#foo,#bar,.baz'\n\n{mySelectors}\n  background: #000\n```\n\n产生如下\n\n```css\n#foo,\n#bar,\n.baz {\n\tbackground: #000;\n}\n```\n\n### 5、mixin\n\nmixin 和函数都以相同的方式定义，但它们以不同的方式应用。\n\n例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。\n\n在 border-radius()选择器中调用时，属性将展开并复制到选择器中。\n\n```stylus\nborder-radius(n)\n  -webkit-border-radius n\n  -moz-border-radius n\n  border-radius n\n\nform input[type=button]\n  border-radius(5px)\n```\n\n编译后\n\n```css\nform input[type=\"button\"] {\n\t-webkit-border-radius: 5px;\n\t-moz-border-radius: 5px;\n\tborder-radius: 5px;\n}\n```\n\n使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！\n\n```stylus\nborder-radius(n)\n  -webkit-border-radius n\n  -moz-border-radius n\n  border-radius n\n\nform input[type=button]\n  border-radius 5px\n```\n\n请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。\n为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：\narguments 和 js 函数的 arguments 差不多都是获取函数实际参数\nlength(arguments) 获取参数个数\n\n```stylus\nborder-radius()\n  -webkit-border-radius arguments\n  -moz-border-radius arguments\n  border-radius arguments\n```\n\n现在我们可以传递像 border-radius 1px 2px / 3px 4px！\n\n### 6、选择器\n\n^[N],选择嵌套选择器的第个\n^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。\n^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。\n\n```stylus\n.foo\n  &__bar\n    width: 10px\n\n    ^[0]:hover &\n      width: 20px\n```\n\n注：第一层和第二层是一个完整的选择器.foo\\_\\_bar，但^[0]部分引用第一层，即.foo。\n编译后：\n\n```stylus\n.foo__bar {\n  width: 10px;\n}\n.foo:hover .foo__bar {\n  width: 20px;\n}\n```\n\n若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。\n\n```stylus\n.foo\n  &__bar\n    &_baz\n      width: 10px\n\n      ^[-1]:hover &\n        width: 20px\n```\n\n编译后：\n\n```stylus\n.foo__bar_baz {\n  width: 10px;\n}\n.foo__bar:hover .foo__bar_baz {\n  width: 20px;\n}\n```\n\n### 7、块混合 Block mixins\n\n我们使用+前缀可以给混合(mixins)传递块(blocks):\n\n```stylus\nfoo()\n  .bar\n    {block}// 调用 mixins里的代码块类似vue 的slot一样\n\n+foo()\n  width: 10px\n编译后：\n\n.bar {\n   width: 10px;\n }\n```\n\n### 内置方法\n\n[文档](http://stylus-lang.com/docs/bifs.html)\n","slug":"stylus语法笔记","published":1,"updated":"2019-05-28T07:54:52.408Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwppw0j9000pf8czug1attml","content":"<h3 id=\"1、定义变量\"><a href=\"#1、定义变量\" class=\"headerlink\" title=\"1、定义变量\"></a>1、定义变量</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$var_name</span> = value</span><br></pre></td></tr></table></figure>\n<p>is defined 用来判断一个变量是否已经被赋值。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo is defined</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>或者采用内置函数 lookup(name)：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"number\">#80e2e9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">lookup</span><span class=\"params\">(name)</span></span> <span class=\"comment\">// 变量名，判断是否已经定义该变量</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; #80e2e9</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、for-循环\"><a href=\"#2、for-循环\" class=\"headerlink\" title=\"2、for 循环\"></a>2、for 循环</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">$i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span> .. <span class=\"number\">24</span>)</span><br><span class=\"line\">   .cc-&#123;<span class=\"variable\">$i</span>&#125;</span><br><span class=\"line\">      <span class=\"attribute\">width</span> <span class=\"number\">100</span> / <span class=\"variable\">$i</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、导入\"><a href=\"#3、导入\" class=\"headerlink\" title=\"3、导入\"></a>3、导入</h3><p>@import “文件路径”<br>@import “文件路径/*“导入目录下所有 styl 文件</p>\n<p>@require “文件路径”<br>@require “文件路径/*“导入目录下所有 styl 文件</p>\n<h3 id=\"4、插值\"><a href=\"#4、插值\" class=\"headerlink\" title=\"4、插值\"></a>4、插值</h3><p>{}使用该花括号进行插值<br>Stylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。<br>例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-&#123;<span class=\"string\">'border'</span> + <span class=\"string\">'-radius'</span>&#125;评估为-webkit-<span class=\"attribute\">border-radius</span>。</span><br></pre></td></tr></table></figure>\n<p>选择器插值</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table</span><br><span class=\"line\">  <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"selector-tag\">tr</span>:nth-child(&#123;row&#125;)</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">10px</span> * row</span><br></pre></td></tr></table></figure>\n<p>会产生如下 css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(2)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(3)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(4)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(5)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mySelectors = <span class=\"string\">'#foo,#bar,.baz'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;mySelectors&#125;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span></span><br></pre></td></tr></table></figure>\n<p>产生如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#foo</span>,</span><br><span class=\"line\"><span class=\"selector-id\">#bar</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.baz</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、mixin\"><a href=\"#5、mixin\" class=\"headerlink\" title=\"5、mixin\"></a>5、mixin</h3><p>mixin 和函数都以相同的方式定义，但它们以不同的方式应用。</p>\n<p>例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。</p>\n<p>在 border-radius()选择器中调用时，属性将展开并复制到选择器中。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>(<span class=\"number\">5px</span>)</span><br></pre></td></tr></table></figure>\n<p>编译后</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"button\"]</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> <span class=\"number\">5px</span></span><br></pre></td></tr></table></figure>\n<p>请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。<br>为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：<br>arguments 和 js 函数的 arguments 差不多都是获取函数实际参数<br>length(arguments) 获取参数个数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> arguments</span><br></pre></td></tr></table></figure>\n<p>现在我们可以传递像 border-radius 1px 2px / 3px 4px！</p>\n<h3 id=\"6、选择器\"><a href=\"#6、选择器\" class=\"headerlink\" title=\"6、选择器\"></a>6、选择器</h3><p>^[N],选择嵌套选择器的第个<br>^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。<br>^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ^[<span class=\"number\">0</span>]:hover &amp;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n<p>注：第一层和第二层是一个完整的选择器.foo__bar，但^[0]部分引用第一层，即.foo。<br>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span>:hover <span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    &amp;_baz</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">      ^[-<span class=\"number\">1</span>]:hover &amp;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n<p>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo__bar</span>:hover <span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、块混合-Block-mixins\"><a href=\"#7、块混合-Block-mixins\" class=\"headerlink\" title=\"7、块混合 Block mixins\"></a>7、块混合 Block mixins</h3><p>我们使用+前缀可以给混合(mixins)传递块(blocks):</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  .bar</span><br><span class=\"line\">    &#123;block&#125;<span class=\"comment\">// 调用 mixins里的代码块类似vue 的slot一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">+foo()</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\">编译后：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL3N0eWx1cy1sYW5nLmNvbS9kb2NzL2JpZnMuaHRtbA==\" title=\"http://stylus-lang.com/docs/bifs.html\">文档<i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1、定义变量\"><a href=\"#1、定义变量\" class=\"headerlink\" title=\"1、定义变量\"></a>1、定义变量</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$var_name</span> = value</span><br></pre></td></tr></table></figure>\n<p>is defined 用来判断一个变量是否已经被赋值。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo is defined</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<p>或者采用内置函数 lookup(name)：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"number\">#80e2e9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">lookup</span><span class=\"params\">(name)</span></span> <span class=\"comment\">// 变量名，判断是否已经定义该变量</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; #80e2e9</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2、for-循环\"><a href=\"#2、for-循环\" class=\"headerlink\" title=\"2、for 循环\"></a>2、for 循环</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">$i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span> .. <span class=\"number\">24</span>)</span><br><span class=\"line\">   .cc-&#123;<span class=\"variable\">$i</span>&#125;</span><br><span class=\"line\">      <span class=\"attribute\">width</span> <span class=\"number\">100</span> / <span class=\"variable\">$i</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3、导入\"><a href=\"#3、导入\" class=\"headerlink\" title=\"3、导入\"></a>3、导入</h3><p>@import “文件路径”<br>@import “文件路径/*“导入目录下所有 styl 文件</p>\n<p>@require “文件路径”<br>@require “文件路径/*“导入目录下所有 styl 文件</p>\n<h3 id=\"4、插值\"><a href=\"#4、插值\" class=\"headerlink\" title=\"4、插值\"></a>4、插值</h3><p>{}使用该花括号进行插值<br>Stylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。<br>例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-&#123;<span class=\"string\">'border'</span> + <span class=\"string\">'-radius'</span>&#125;评估为-webkit-<span class=\"attribute\">border-radius</span>。</span><br></pre></td></tr></table></figure>\n<p>选择器插值</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table</span><br><span class=\"line\">  <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"selector-tag\">tr</span>:nth-child(&#123;row&#125;)</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">10px</span> * row</span><br></pre></td></tr></table></figure>\n<p>会产生如下 css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(2)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(3)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(4)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(5)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mySelectors = <span class=\"string\">'#foo,#bar,.baz'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;mySelectors&#125;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span></span><br></pre></td></tr></table></figure>\n<p>产生如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#foo</span>,</span><br><span class=\"line\"><span class=\"selector-id\">#bar</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.baz</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、mixin\"><a href=\"#5、mixin\" class=\"headerlink\" title=\"5、mixin\"></a>5、mixin</h3><p>mixin 和函数都以相同的方式定义，但它们以不同的方式应用。</p>\n<p>例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。</p>\n<p>在 border-radius()选择器中调用时，属性将展开并复制到选择器中。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>(<span class=\"number\">5px</span>)</span><br></pre></td></tr></table></figure>\n<p>编译后</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"button\"]</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> <span class=\"number\">5px</span></span><br></pre></td></tr></table></figure>\n<p>请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。<br>为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：<br>arguments 和 js 函数的 arguments 差不多都是获取函数实际参数<br>length(arguments) 获取参数个数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> arguments</span><br></pre></td></tr></table></figure>\n<p>现在我们可以传递像 border-radius 1px 2px / 3px 4px！</p>\n<h3 id=\"6、选择器\"><a href=\"#6、选择器\" class=\"headerlink\" title=\"6、选择器\"></a>6、选择器</h3><p>^[N],选择嵌套选择器的第个<br>^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。<br>^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ^[<span class=\"number\">0</span>]:hover &amp;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n<p>注：第一层和第二层是一个完整的选择器.foo__bar，但^[0]部分引用第一层，即.foo。<br>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span>:hover <span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    &amp;_baz</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">      ^[-<span class=\"number\">1</span>]:hover &amp;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n<p>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo__bar</span>:hover <span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7、块混合-Block-mixins\"><a href=\"#7、块混合-Block-mixins\" class=\"headerlink\" title=\"7、块混合 Block mixins\"></a>7、块混合 Block mixins</h3><p>我们使用+前缀可以给混合(mixins)传递块(blocks):</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  .bar</span><br><span class=\"line\">    &#123;block&#125;<span class=\"comment\">// 调用 mixins里的代码块类似vue 的slot一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">+foo()</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\">编译后：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p><a href=\"http://stylus-lang.com/docs/bifs.html\" target=\"_blank\" rel=\"noopener\">文档</a></p>\n"},{"layout":"post","title":"shell脚本学习","subtitle":"shell脚本学习","date":"2018-12-23T16:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","top":5,"_content":"\n### 前言\n\n- 为什么学习脚本编写???\n- 你有没有遇到过这样场景，繁杂并且重复的操作 N 多件~~~\n- 那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）\n  ![image](/assets/img/2018/12/20150424040700733.jpg)\n  好了！那么我们步入今天的正题！\n\n### 一、shell 中特殊变量\n\n```sh\n#!/bin/bash\necho $0    # 当前脚本的文件名（间接运行时还包括绝对路径）。\necho $n    # 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。\necho $#    # 传递给脚本或函数的参数个数。\necho $*    # 传递给脚本或函数的所有参数。\necho $@    # 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。\necho $?    # 上个命令的退出状态，或函数的返回值。\necho $$    # 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。\necho $_    # 上一个命令的最后一个参数\necho $!    # 后台运行的最后一个进程的 ID 号\n\n```\n\n示例：\n\n```sh\n# 现在保存为一个test.sh脚本，然后加上几个参数运行：\n$ ./test.sh test test1 test2 test3 test4\n# 输出结果\n./test.sh                      # $0\n                               # $n\n5                              # $#\ntest test1 test2 test3 test4   # $*\ntest test1 test2 test3 test4   # $@\n0                              # $?\n12305                          # $$\n12305                          # $_\n                               # $!\n\n```\n> &emsp;$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (\"\") 包含时，都以\"$1\"\"$2\" … \"$n\" 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (\"\") 包含时，\"$*\"会将所有的参数作为一个整体，以\"$1 $2 … $n\"的形式输出所有参数；\"$@\"会将各个参数分开，以\"$1\"\"$2\" … \"$n\" 的形式输出所有参数。\n\n例如：\n```sh\n#!/bin/bash\necho \"\\$*=\" $*\necho \"\\\"\\$*\\\"=\" \"$*\"\n\necho \"\\$@=\" $@\necho \"\\\"\\$@\\\"=\" \"$@\"\n\necho \"print each param from \\$*\"\nfor var in $*\ndo\n    echo \"$var\"\ndone\n\necho \"print each param from \\$@\"\nfor var in $@\ndo\n    echo \"$var\"\ndone\n\necho \"从 \\\"\\$*\\\" 获取并打印每一个参数\"\nfor var in \"$*\"\ndo\n    echo \"$var\"\ndone\n\necho \"从 \\\"\\$@\\\" 获取并打印每一个参数\"\nfor var in \"$@\"\ndo\n    echo \"$var\"\ndone\n\n```\n返回结果： \n\n```sh\n\n$*= test test1 test2\n\"$*\"= test test1 test2\n$@= test test1 test2\n\"$@\"= test test1 test2\nprint each param from $*\ntest\ntest1\ntest2\nprint each param from $@\ntest\ntest1\ntest2\n从 \"$*\" 获取并打印每一个参数\ntest test1 test2\n从 \"$@\" 获取并打印每一个参数\ntest\ntest1\ntest2\n\n```\n### 二、手工处理参数\n\n```sh\nwhile [ -n \"$1\" ]  \ndo  \n  case \"$1\" in   \n    -a)  \n        echo \"发现 -a 选项\"  \n        ;;  \n    -b)  \n        echo \"发现 -b 选项\"  \n        echo \"-b 选项的参数值是：$2\"   \n        shift  \n        ;;  \n    -c)  \n        echo \"发现 -c 选项\"  \n        echo \"-c 选项的参数值是：$2\"  \n        shift  \n        ;;  \n    -d)  \n        echo \"发现 -d 选项\"  \n        ;;  \n    *)  \n        echo \"$1 is not an option\"  \n        ;;  \n  esac  \n  shift  \ndone\n\n# 运行：./test.sh -a -b t2 -c t3 -d\n# 返回结果\n发现 -a 选项\n发现 -b 选项\n-b 选项的参数值是：t2\n发现 -c 选项\n-c 选项的参数值是：t3\n发现 -d 选项\n```\n\n### 三、getopt 处理参数\n\n下面 getopt ab:c:d \"$@\" 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。\n```sh\nGETOPTOUT=`getopt ab:c:d \"$@\"`\n  set -- $GETOPTOUT\n  while [ -n \"$1\" ]\n  do  \n  case $1 in\n    -a)  \n      echo \"发现 -a 选项\"\n      ;;  \n    -b)  \n      echo \"发现 -b 选项\"\n      echo \"-b 选项的参数值是：$2\"\n      shift  \n      ;;  \n    -c)  \n      echo \"发现 -c 选项\"\n      echo \"-c 选项的参数值是：$2\"\n      shift  \n      ;;  \n    -d)  \n      echo \"发现 -d 选项\"\n      ;;  \n    --)  \n      shift  \n      break  \n      ;;  \n    *)  \n      echo \"未知选项:\"$1\"\"  \n      ;;  \n  esac  \n  shift  \n  done\n\n# 运行\n ./proxychains4.sh -a -b t2 -c t3 -d\n# 返回\n发现 -a 选项\n发现 -b 选项\n-b 选项的参数值是：t2\n发现 -c 选项\n-c 选项的参数值是：t3\n发现 -d 选项\n```\n\n```sh\nARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- \"$@\"))\neval set -- \"$ARGV\"\nwhile true\ndo\ncase \"$1\" in\n  -短选项1|--长选项1)\n    process\n    shift\n    ;;\n  -短选项2|--长选项2)\n    # 获取选项\n    opt = $2\n    process\n    shift 2\n    ;;\n\n  ... ...\n\n  -短选项3|--长选项3)\n    process\n    ;;\n  --)\n    break\n    ;;\nesac\ndone\n\n```\n> 关于 eval 这个命令，用一个小例子解释：\n\n```sh\nfoo=10\nx=foo\ny='$'$x\necho $y\necho $foo\neval y='$'$x\necho $y\n\n# 返回\n$foo\n10\n10\n\n# 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。\n```\n\n### 四、getopts 处理参数\n\n```sh\nwhile getopts :ab:c:d ARGS  \ndo  \ncase $ARGS in   \n  a)  \n    echo \"发现 -a 选项\"  \n    ;;  \n  b)  \n    echo \"发现 -b 选项\"  \n    echo \"-b 选项的值是：$OPTARG\"  \n    ;;  \n  c)  \n    echo \"发现 -c 选项\"  \n    echo \"-c 选项的值是：$OPTARG\"  \n    ;;  \n  d)  \n    echo \"发现 -d 参数\"  \n    ;;  \n  *)  \n    echo \"未知选项：$ARGS\"\n    ;;\nesac\ndone\n\n```\n这种方法最方便简单。接下来基于这种方法深入讲解。\n\n\n### 五、传参意外处理\n```sh\n\"?\")\n  echo \"未知选项 $OPTARG\"\n  ;;\n\":\")\n  echo \"没有输入任何选项 $OPTARG\"\n  ;;\n*)\n  # 发生不能预料的错误时。\n  echo \"处理选项时出现未知错误\"\n  ;;\n\n```\n### 参考链接： \n> [Shell 脚本传参方法总结](https://www.jianshu.com/p/d3cd36c97abc)</br>[Bash 参数和参数扩展](https://www.ibm.com/developerworks/cn/linux/l-bash-parameters.html)</br>[shell中的getopt与getopts](http://www.361way.com/shell-getopt/4981.html)","source":"_posts/shell脚本学习.md","raw":"---\nlayout: post\ntitle: \"shell脚本学习\"\nsubtitle: \"shell脚本学习\"\ndate: 2018-12-24\nauthor: \"Mark\"\nheader-img: \"img/post-bg-js-version.jpg\"\ncategories: 系统命令 #分类\ntop: 5\ntags:\n  - 系统底层\n  - Shell\n  - VSCode\n  - 脚本操作\n---\n\n### 前言\n\n- 为什么学习脚本编写???\n- 你有没有遇到过这样场景，繁杂并且重复的操作 N 多件~~~\n- 那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）\n  ![image](/assets/img/2018/12/20150424040700733.jpg)\n  好了！那么我们步入今天的正题！\n\n### 一、shell 中特殊变量\n\n```sh\n#!/bin/bash\necho $0    # 当前脚本的文件名（间接运行时还包括绝对路径）。\necho $n    # 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。\necho $#    # 传递给脚本或函数的参数个数。\necho $*    # 传递给脚本或函数的所有参数。\necho $@    # 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。\necho $?    # 上个命令的退出状态，或函数的返回值。\necho $$    # 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。\necho $_    # 上一个命令的最后一个参数\necho $!    # 后台运行的最后一个进程的 ID 号\n\n```\n\n示例：\n\n```sh\n# 现在保存为一个test.sh脚本，然后加上几个参数运行：\n$ ./test.sh test test1 test2 test3 test4\n# 输出结果\n./test.sh                      # $0\n                               # $n\n5                              # $#\ntest test1 test2 test3 test4   # $*\ntest test1 test2 test3 test4   # $@\n0                              # $?\n12305                          # $$\n12305                          # $_\n                               # $!\n\n```\n> &emsp;$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (\"\") 包含时，都以\"$1\"\"$2\" … \"$n\" 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (\"\") 包含时，\"$*\"会将所有的参数作为一个整体，以\"$1 $2 … $n\"的形式输出所有参数；\"$@\"会将各个参数分开，以\"$1\"\"$2\" … \"$n\" 的形式输出所有参数。\n\n例如：\n```sh\n#!/bin/bash\necho \"\\$*=\" $*\necho \"\\\"\\$*\\\"=\" \"$*\"\n\necho \"\\$@=\" $@\necho \"\\\"\\$@\\\"=\" \"$@\"\n\necho \"print each param from \\$*\"\nfor var in $*\ndo\n    echo \"$var\"\ndone\n\necho \"print each param from \\$@\"\nfor var in $@\ndo\n    echo \"$var\"\ndone\n\necho \"从 \\\"\\$*\\\" 获取并打印每一个参数\"\nfor var in \"$*\"\ndo\n    echo \"$var\"\ndone\n\necho \"从 \\\"\\$@\\\" 获取并打印每一个参数\"\nfor var in \"$@\"\ndo\n    echo \"$var\"\ndone\n\n```\n返回结果： \n\n```sh\n\n$*= test test1 test2\n\"$*\"= test test1 test2\n$@= test test1 test2\n\"$@\"= test test1 test2\nprint each param from $*\ntest\ntest1\ntest2\nprint each param from $@\ntest\ntest1\ntest2\n从 \"$*\" 获取并打印每一个参数\ntest test1 test2\n从 \"$@\" 获取并打印每一个参数\ntest\ntest1\ntest2\n\n```\n### 二、手工处理参数\n\n```sh\nwhile [ -n \"$1\" ]  \ndo  \n  case \"$1\" in   \n    -a)  \n        echo \"发现 -a 选项\"  \n        ;;  \n    -b)  \n        echo \"发现 -b 选项\"  \n        echo \"-b 选项的参数值是：$2\"   \n        shift  \n        ;;  \n    -c)  \n        echo \"发现 -c 选项\"  \n        echo \"-c 选项的参数值是：$2\"  \n        shift  \n        ;;  \n    -d)  \n        echo \"发现 -d 选项\"  \n        ;;  \n    *)  \n        echo \"$1 is not an option\"  \n        ;;  \n  esac  \n  shift  \ndone\n\n# 运行：./test.sh -a -b t2 -c t3 -d\n# 返回结果\n发现 -a 选项\n发现 -b 选项\n-b 选项的参数值是：t2\n发现 -c 选项\n-c 选项的参数值是：t3\n发现 -d 选项\n```\n\n### 三、getopt 处理参数\n\n下面 getopt ab:c:d \"$@\" 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。\n```sh\nGETOPTOUT=`getopt ab:c:d \"$@\"`\n  set -- $GETOPTOUT\n  while [ -n \"$1\" ]\n  do  \n  case $1 in\n    -a)  \n      echo \"发现 -a 选项\"\n      ;;  \n    -b)  \n      echo \"发现 -b 选项\"\n      echo \"-b 选项的参数值是：$2\"\n      shift  \n      ;;  \n    -c)  \n      echo \"发现 -c 选项\"\n      echo \"-c 选项的参数值是：$2\"\n      shift  \n      ;;  \n    -d)  \n      echo \"发现 -d 选项\"\n      ;;  \n    --)  \n      shift  \n      break  \n      ;;  \n    *)  \n      echo \"未知选项:\"$1\"\"  \n      ;;  \n  esac  \n  shift  \n  done\n\n# 运行\n ./proxychains4.sh -a -b t2 -c t3 -d\n# 返回\n发现 -a 选项\n发现 -b 选项\n-b 选项的参数值是：t2\n发现 -c 选项\n-c 选项的参数值是：t3\n发现 -d 选项\n```\n\n```sh\nARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- \"$@\"))\neval set -- \"$ARGV\"\nwhile true\ndo\ncase \"$1\" in\n  -短选项1|--长选项1)\n    process\n    shift\n    ;;\n  -短选项2|--长选项2)\n    # 获取选项\n    opt = $2\n    process\n    shift 2\n    ;;\n\n  ... ...\n\n  -短选项3|--长选项3)\n    process\n    ;;\n  --)\n    break\n    ;;\nesac\ndone\n\n```\n> 关于 eval 这个命令，用一个小例子解释：\n\n```sh\nfoo=10\nx=foo\ny='$'$x\necho $y\necho $foo\neval y='$'$x\necho $y\n\n# 返回\n$foo\n10\n10\n\n# 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。\n```\n\n### 四、getopts 处理参数\n\n```sh\nwhile getopts :ab:c:d ARGS  \ndo  \ncase $ARGS in   \n  a)  \n    echo \"发现 -a 选项\"  \n    ;;  \n  b)  \n    echo \"发现 -b 选项\"  \n    echo \"-b 选项的值是：$OPTARG\"  \n    ;;  \n  c)  \n    echo \"发现 -c 选项\"  \n    echo \"-c 选项的值是：$OPTARG\"  \n    ;;  \n  d)  \n    echo \"发现 -d 参数\"  \n    ;;  \n  *)  \n    echo \"未知选项：$ARGS\"\n    ;;\nesac\ndone\n\n```\n这种方法最方便简单。接下来基于这种方法深入讲解。\n\n\n### 五、传参意外处理\n```sh\n\"?\")\n  echo \"未知选项 $OPTARG\"\n  ;;\n\":\")\n  echo \"没有输入任何选项 $OPTARG\"\n  ;;\n*)\n  # 发生不能预料的错误时。\n  echo \"处理选项时出现未知错误\"\n  ;;\n\n```\n### 参考链接： \n> [Shell 脚本传参方法总结](https://www.jianshu.com/p/d3cd36c97abc)</br>[Bash 参数和参数扩展](https://www.ibm.com/developerworks/cn/linux/l-bash-parameters.html)</br>[shell中的getopt与getopts](http://www.361way.com/shell-getopt/4981.html)","slug":"shell脚本学习","published":1,"updated":"2019-03-25T07:06:07.851Z","comments":1,"photos":[],"link":"","_id":"cjwppw0jc000tf8cza0e2dq8r","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>为什么学习脚本编写???</li>\n<li>你有没有遇到过这样场景，繁杂并且重复的操作 N 多件~~~</li>\n<li>那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）<br><img src=\"/assets/img/2018/12/20150424040700733.jpg\" alt=\"image\"><br>好了！那么我们步入今天的正题！</li>\n</ul>\n<h3 id=\"一、shell-中特殊变量\"><a href=\"#一、shell-中特殊变量\" class=\"headerlink\" title=\"一、shell 中特殊变量\"></a>一、shell 中特殊变量</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span>    <span class=\"comment\"># 当前脚本的文件名（间接运行时还包括绝对路径）。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$n</span>    <span class=\"comment\"># 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$#</span>    <span class=\"comment\"># 传递给脚本或函数的参数个数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $*    <span class=\"comment\"># 传递给脚本或函数的所有参数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$@</span>    <span class=\"comment\"># 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $?    <span class=\"comment\"># 上个命令的退出状态，或函数的返回值。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $$    <span class=\"comment\"># 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$_</span>    <span class=\"comment\"># 上一个命令的最后一个参数</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $!    <span class=\"comment\"># 后台运行的最后一个进程的 ID 号</span></span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 现在保存为一个test.sh脚本，然后加上几个参数运行：</span></span><br><span class=\"line\">$ ./test.sh <span class=\"built_in\">test</span> test1 test2 test3 test4</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">./test.sh                      <span class=\"comment\"># $0</span></span><br><span class=\"line\">                               <span class=\"comment\"># $n</span></span><br><span class=\"line\">5                              <span class=\"comment\"># $#</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $*</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $@</span></span><br><span class=\"line\">0                              <span class=\"comment\"># $?</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $$</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $_</span></span><br><span class=\"line\">                               <span class=\"comment\"># $!</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&emsp;$<em> 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (“”) 包含时，都以”$1””$2” … “$n” 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (“”) 包含时，”$</em>“会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@”会将各个参数分开，以”$1””$2” … “$n” 的形式输出所有参数。</p>\n</blockquote>\n<p>例如：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$*=\"</span> $*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$*\\\"=\"</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$@=\"</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$@\\\"=\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> $*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$@\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$*\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$@\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>返回结果： </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$*= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"$*\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"variable\">$@</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from $*</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\">从 <span class=\"string\">\"$*\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\">从 <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、手工处理参数\"><a href=\"#二、手工处理参数\" class=\"headerlink\" title=\"二、手工处理参数\"></a>二、手工处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]  </span><br><span class=\"line\"><span class=\"keyword\">do</span>  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span>   </span><br><span class=\"line\">    -a)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    -b)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span>  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span>   </span><br><span class=\"line\">        <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    -c)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span>  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span>  </span><br><span class=\"line\">        <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    -d)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    *)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is not an option\"</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">  <span class=\"keyword\">esac</span>  </span><br><span class=\"line\">  <span class=\"built_in\">shift</span>  </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行：./test.sh -a -b t2 -c t3 -d</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、getopt-处理参数\"><a href=\"#三、getopt-处理参数\" class=\"headerlink\" title=\"三、getopt 处理参数\"></a>三、getopt 处理参数</h3><p>下面 getopt ab:c:d “$@” 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GETOPTOUT=`getopt ab:c:d <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>`</span><br><span class=\"line\">  <span class=\"built_in\">set</span> -- <span class=\"variable\">$GETOPTOUT</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">do</span>  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    -b)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    -c)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    -d)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span></span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    --)  </span><br><span class=\"line\">      <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">      <span class=\"built_in\">break</span>  </span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    *)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项:\"</span><span class=\"variable\">$1</span><span class=\"string\">\"\"</span>  </span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">  <span class=\"keyword\">esac</span>  </span><br><span class=\"line\">  <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\"> ./proxychains4.sh -a -b t2 -c t3 -d</span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"built_in\">set</span> -- <span class=\"string\">\"<span class=\"variable\">$ARGV</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  -短选项1|--长选项1)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  -短选项2|--长选项2)</span><br><span class=\"line\">    <span class=\"comment\"># 获取选项</span></span><br><span class=\"line\">    opt = <span class=\"variable\">$2</span></span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span> 2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">  -短选项3|--长选项3)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  --)</span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 eval 这个命令，用一个小例子解释：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo=10</span><br><span class=\"line\">x=foo</span><br><span class=\"line\">y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$foo</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span></span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"四、getopts-处理参数\"><a href=\"#四、getopts-处理参数\" class=\"headerlink\" title=\"四、getopts 处理参数\"></a>四、getopts 处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> :ab:c:d ARGS  </span><br><span class=\"line\"><span class=\"keyword\">do</span>  </span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$ARGS</span> <span class=\"keyword\">in</span>   </span><br><span class=\"line\">  a)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span>  </span><br><span class=\"line\">    ;;  </span><br><span class=\"line\">  b)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span>  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span>  </span><br><span class=\"line\">    ;;  </span><br><span class=\"line\">  c)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span>  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span>  </span><br><span class=\"line\">    ;;  </span><br><span class=\"line\">  d)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 参数\"</span>  </span><br><span class=\"line\">    ;;  </span><br><span class=\"line\">  *)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项：<span class=\"variable\">$ARGS</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这种方法最方便简单。接下来基于这种方法深入讲解。</p>\n<h3 id=\"五、传参意外处理\"><a href=\"#五、传参意外处理\" class=\"headerlink\" title=\"五、传参意外处理\"></a>五、传参意外处理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"><span class=\"string\">\":\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"没有输入任何选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">  <span class=\"comment\"># 发生不能预料的错误时。</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"处理选项时出现未知错误\"</span></span><br><span class=\"line\">  ;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kM2NkMzZjOTdhYmM=\" title=\"https://www.jianshu.com/p/d3cd36c97abc\">Shell 脚本传参方法总结<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWJhc2gtcGFyYW1ldGVycy5odG1s\" title=\"https://www.ibm.com/developerworks/cn/linux/l-bash-parameters.html\">Bash 参数和参数扩展<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4zNjF3YXkuY29tL3NoZWxsLWdldG9wdC80OTgxLmh0bWw=\" title=\"http://www.361way.com/shell-getopt/4981.html\">shell中的getopt与getopts<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>为什么学习脚本编写???</li>\n<li>你有没有遇到过这样场景，繁杂并且重复的操作 N 多件~~~</li>\n<li>那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）<br><img src=\"/assets/img/2018/12/20150424040700733.jpg\" alt=\"image\"><br>好了！那么我们步入今天的正题！</li>\n</ul>\n<h3 id=\"一、shell-中特殊变量\"><a href=\"#一、shell-中特殊变量\" class=\"headerlink\" title=\"一、shell 中特殊变量\"></a>一、shell 中特殊变量</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span>    <span class=\"comment\"># 当前脚本的文件名（间接运行时还包括绝对路径）。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$n</span>    <span class=\"comment\"># 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$#</span>    <span class=\"comment\"># 传递给脚本或函数的参数个数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $*    <span class=\"comment\"># 传递给脚本或函数的所有参数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$@</span>    <span class=\"comment\"># 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $?    <span class=\"comment\"># 上个命令的退出状态，或函数的返回值。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $$    <span class=\"comment\"># 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$_</span>    <span class=\"comment\"># 上一个命令的最后一个参数</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $!    <span class=\"comment\"># 后台运行的最后一个进程的 ID 号</span></span><br></pre></td></tr></table></figure>\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 现在保存为一个test.sh脚本，然后加上几个参数运行：</span></span><br><span class=\"line\">$ ./test.sh <span class=\"built_in\">test</span> test1 test2 test3 test4</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">./test.sh                      <span class=\"comment\"># $0</span></span><br><span class=\"line\">                               <span class=\"comment\"># $n</span></span><br><span class=\"line\">5                              <span class=\"comment\"># $#</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $*</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $@</span></span><br><span class=\"line\">0                              <span class=\"comment\"># $?</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $$</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $_</span></span><br><span class=\"line\">                               <span class=\"comment\"># $!</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&emsp;$<em> 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (“”) 包含时，都以”$1””$2” … “$n” 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (“”) 包含时，”$</em>“会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@”会将各个参数分开，以”$1””$2” … “$n” 的形式输出所有参数。</p>\n</blockquote>\n<p>例如：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$*=\"</span> $*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$*\\\"=\"</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$@=\"</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$@\\\"=\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> $*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$@\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$*\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$@\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure></p>\n<p>返回结果： </p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$*= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"$*\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"variable\">$@</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from $*</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\">从 <span class=\"string\">\"$*\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\">从 <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、手工处理参数\"><a href=\"#二、手工处理参数\" class=\"headerlink\" title=\"二、手工处理参数\"></a>二、手工处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]  </span><br><span class=\"line\"><span class=\"keyword\">do</span>  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span>   </span><br><span class=\"line\">    -a)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    -b)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span>  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span>   </span><br><span class=\"line\">        <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    -c)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span>  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span>  </span><br><span class=\"line\">        <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    -d)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">    *)  </span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is not an option\"</span>  </span><br><span class=\"line\">        ;;  </span><br><span class=\"line\">  <span class=\"keyword\">esac</span>  </span><br><span class=\"line\">  <span class=\"built_in\">shift</span>  </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行：./test.sh -a -b t2 -c t3 -d</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、getopt-处理参数\"><a href=\"#三、getopt-处理参数\" class=\"headerlink\" title=\"三、getopt 处理参数\"></a>三、getopt 处理参数</h3><p>下面 getopt ab:c:d “$@” 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GETOPTOUT=`getopt ab:c:d <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>`</span><br><span class=\"line\">  <span class=\"built_in\">set</span> -- <span class=\"variable\">$GETOPTOUT</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">do</span>  </span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    -b)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    -c)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    -d)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span></span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    --)  </span><br><span class=\"line\">      <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">      <span class=\"built_in\">break</span>  </span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">    *)  </span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项:\"</span><span class=\"variable\">$1</span><span class=\"string\">\"\"</span>  </span><br><span class=\"line\">      ;;  </span><br><span class=\"line\">  <span class=\"keyword\">esac</span>  </span><br><span class=\"line\">  <span class=\"built_in\">shift</span>  </span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\"> ./proxychains4.sh -a -b t2 -c t3 -d</span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"built_in\">set</span> -- <span class=\"string\">\"<span class=\"variable\">$ARGV</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  -短选项1|--长选项1)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  -短选项2|--长选项2)</span><br><span class=\"line\">    <span class=\"comment\"># 获取选项</span></span><br><span class=\"line\">    opt = <span class=\"variable\">$2</span></span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span> 2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">  -短选项3|--长选项3)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  --)</span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 eval 这个命令，用一个小例子解释：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo=10</span><br><span class=\"line\">x=foo</span><br><span class=\"line\">y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$foo</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span></span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"四、getopts-处理参数\"><a href=\"#四、getopts-处理参数\" class=\"headerlink\" title=\"四、getopts 处理参数\"></a>四、getopts 处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> :ab:c:d ARGS  </span><br><span class=\"line\"><span class=\"keyword\">do</span>  </span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$ARGS</span> <span class=\"keyword\">in</span>   </span><br><span class=\"line\">  a)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span>  </span><br><span class=\"line\">    ;;  </span><br><span class=\"line\">  b)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span>  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span>  </span><br><span class=\"line\">    ;;  </span><br><span class=\"line\">  c)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span>  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span>  </span><br><span class=\"line\">    ;;  </span><br><span class=\"line\">  d)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 参数\"</span>  </span><br><span class=\"line\">    ;;  </span><br><span class=\"line\">  *)  </span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项：<span class=\"variable\">$ARGS</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这种方法最方便简单。接下来基于这种方法深入讲解。</p>\n<h3 id=\"五、传参意外处理\"><a href=\"#五、传参意外处理\" class=\"headerlink\" title=\"五、传参意外处理\"></a>五、传参意外处理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"><span class=\"string\">\":\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"没有输入任何选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">  <span class=\"comment\"># 发生不能预料的错误时。</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"处理选项时出现未知错误\"</span></span><br><span class=\"line\">  ;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><blockquote>\n<p><a href=\"https://www.jianshu.com/p/d3cd36c97abc\" target=\"_blank\" rel=\"noopener\">Shell 脚本传参方法总结</a><br><a href=\"https://www.ibm.com/developerworks/cn/linux/l-bash-parameters.html\" target=\"_blank\" rel=\"noopener\">Bash 参数和参数扩展</a><br><a href=\"http://www.361way.com/shell-getopt/4981.html\" target=\"_blank\" rel=\"noopener\">shell中的getopt与getopts</a></p>\n</blockquote>\n"},{"layout":"post","title":"Typora For Markdown 语法","date":"2018-03-11T16:00:00.000Z","author":"Mark","top":6,"_content":"\n#Typora For Markdown 语法\n\n[Learning-Markdown (Markdown 入门参考)](http://xianbai.me/learn-md/index.html)\n[TOC]\n\n###数学表达式\n\n要启用这个功能，首先到`Preference`->`Editor`中启用。然后使用`$`符号包裹 Tex 命令，例如：`$lim_{x \\to \\infty} \\ exp(-x)=0$`将产生如下的数学表达式：\n\n$\\lim\\_{x \\to \\infty} \\exp(-x)=0$\n\n###下标\n\n下标使用`~`包裹，例如：`H~2~O`将产生 H~2~O, 即水的分子式。\n\n###上标\n\n上标使用`^`包裹，例如：`y^2^=4`将产生表达式 y^2^ = 4\n\n###插入表情:happy:\n\n使用`:happy:`输入表情:happy:,使用`:sad:`输入表情:sad:,使用`:cry:`输入表情:cry:等。以此类推！\n\n### 下划线\n\n用 HTML 的语法`<u>Underline</u>`将产生下划线<u>Underline</u>.\n\n### 删除线\n\nGFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用`~~`包裹的文本将会具有删除的样式，例如`~删除文本~`将产生~~删除文本~~的样式。\n\n### 代码\n\n- 使用`包裹的内容将会以代码样式显示，例如\n\n```\n使用`printf()`\n```\n\n则会产生`printf()`样式。\n\n- 输入`~~~`或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：\n\n- ````\n  ​```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ​```\n  ````\n\n  将会产生\n\n  ```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ```\n\n  ### 强调\n\n  使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n  ```\n  **使用两个*号强调内容**\n  __使用两个下划线强调内容__\n  ```\n\n  将会输出\n\n  **使用两个\\*号强调内容**\n  **使用两个下划线强调内容**\n  Typroa 推荐使用两个\\*号。\n\n  ### 斜体\n\n  在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n  ```\n  \\*\n  ```\n\n  ### 插入图片\n\n  我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n  ![drag and drop image](http://typora.io/img/drag-img.gif)\n\n  ​\n\n  ​\n\n### 插入 URL 连接\n\n使用尖括号包裹的 url 将产生一个连接，例如：`<www.baidu.com>`将产生连接:<www.baidu.com>.\n\n如果是标准的 url，则会自动产生连接，例如:www.google.com\n\n### 目录列表 Table of Contents（TOC）\n\n输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。\n\n### 水平分割线\n\n使用`***`或者`---`，然后回车，来产生水平分割线。\n\n---\n\n### 标注\n\n我们可以对某一个词语进行标注。例如\n\n```\n某些人用过了才知道[^注释]\n[^注释]:Somebody that I used to know.\n```\n\n将产生：\n\n某些人用过了才知道[^注释]\n[^注释]: Somebody that I used to know.\n\n把鼠标放在`注释`上，将会有提示内容。\n\n### 表格\n\n```\n|姓名|性别|毕业学校|工资|\n|:---|:---:|:---:|---:|\n|杨洋|男|重庆交通大学|3200|\n|峰哥|男|贵州大学|5000|\n|坑货|女|北京大学|2000|\n```\n\n将产生:\n\n| 姓名 | 性别 |   毕业学校   | 工资 |\n| :--- | :--: | :----------: | ---: |\n| 杨洋 |  男  | 重庆交通大学 | 3200 |\n| 峰哥 |  男  |   贵州大学   | 5000 |\n| 坑货 |  女  |   北京大学   | 2000 |\n\n其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。\n\n### 数学表达式块\n\n输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：\n\n```\n $$\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n```\n\n将会产生:\n\n$$\\mathbf{V}\\_1 \\times \\mathbf{V}\\_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n\n### 任务列表\n\n使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。\n\n```\n- [ ] 吃饭\n- [ ] 逛街\n- [ ] 看电影\n- [ ] 约泡\n```\n\n- [x] 吃饭\n\n      ​\n\n- [x] 逛街\n\n      ​\n\n- [x] 看电影\n\n      ​\n\n- [x] 约泡\n\n### 列表\n\n输入+, -, \\*,创建无序的列表，使用任意数字开头，创建有序列表，例如：\n\n```\n**无序的列表**\n* tfboys\n* 杨洋\n* 我爱你\n```\n\n**无序的列表**\n\n- tfboys\n- 杨洋\n- 我爱你\n\n```\n**有序的列表**\n1. 苹果\n6. 香蕉\n10. 我都不喜欢\n```\n\n**有序的列表**\n\n1. 苹果\n2. 香蕉\n3. 我都不喜欢\n\n### 块引用\n\n使用>来插入块引用。例如：\n\n```\n>这是一个块引用！\n```\n\n将产生：\n\n> 这是一个块引用！\n\n### 标题\n\n使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。\n","source":"_posts/typora.md","raw":"---\nlayout: post\ntitle: 'Typora For Markdown 语法'\ndate: 2018-03-12\nauthor: 'Mark'\ncategories: 软件工具 #分类\ntop: 6\ntags:\n  - 前端开发\n  - Markdown\n---\n\n#Typora For Markdown 语法\n\n[Learning-Markdown (Markdown 入门参考)](http://xianbai.me/learn-md/index.html)\n[TOC]\n\n###数学表达式\n\n要启用这个功能，首先到`Preference`->`Editor`中启用。然后使用`$`符号包裹 Tex 命令，例如：`$lim_{x \\to \\infty} \\ exp(-x)=0$`将产生如下的数学表达式：\n\n$\\lim\\_{x \\to \\infty} \\exp(-x)=0$\n\n###下标\n\n下标使用`~`包裹，例如：`H~2~O`将产生 H~2~O, 即水的分子式。\n\n###上标\n\n上标使用`^`包裹，例如：`y^2^=4`将产生表达式 y^2^ = 4\n\n###插入表情:happy:\n\n使用`:happy:`输入表情:happy:,使用`:sad:`输入表情:sad:,使用`:cry:`输入表情:cry:等。以此类推！\n\n### 下划线\n\n用 HTML 的语法`<u>Underline</u>`将产生下划线<u>Underline</u>.\n\n### 删除线\n\nGFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用`~~`包裹的文本将会具有删除的样式，例如`~删除文本~`将产生~~删除文本~~的样式。\n\n### 代码\n\n- 使用`包裹的内容将会以代码样式显示，例如\n\n```\n使用`printf()`\n```\n\n则会产生`printf()`样式。\n\n- 输入`~~~`或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：\n\n- ````\n  ​```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ​```\n  ````\n\n  将会产生\n\n  ```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ```\n\n  ### 强调\n\n  使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n  ```\n  **使用两个*号强调内容**\n  __使用两个下划线强调内容__\n  ```\n\n  将会输出\n\n  **使用两个\\*号强调内容**\n  **使用两个下划线强调内容**\n  Typroa 推荐使用两个\\*号。\n\n  ### 斜体\n\n  在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n  ```\n  \\*\n  ```\n\n  ### 插入图片\n\n  我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n  ![drag and drop image](http://typora.io/img/drag-img.gif)\n\n  ​\n\n  ​\n\n### 插入 URL 连接\n\n使用尖括号包裹的 url 将产生一个连接，例如：`<www.baidu.com>`将产生连接:<www.baidu.com>.\n\n如果是标准的 url，则会自动产生连接，例如:www.google.com\n\n### 目录列表 Table of Contents（TOC）\n\n输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。\n\n### 水平分割线\n\n使用`***`或者`---`，然后回车，来产生水平分割线。\n\n---\n\n### 标注\n\n我们可以对某一个词语进行标注。例如\n\n```\n某些人用过了才知道[^注释]\n[^注释]:Somebody that I used to know.\n```\n\n将产生：\n\n某些人用过了才知道[^注释]\n[^注释]: Somebody that I used to know.\n\n把鼠标放在`注释`上，将会有提示内容。\n\n### 表格\n\n```\n|姓名|性别|毕业学校|工资|\n|:---|:---:|:---:|---:|\n|杨洋|男|重庆交通大学|3200|\n|峰哥|男|贵州大学|5000|\n|坑货|女|北京大学|2000|\n```\n\n将产生:\n\n| 姓名 | 性别 |   毕业学校   | 工资 |\n| :--- | :--: | :----------: | ---: |\n| 杨洋 |  男  | 重庆交通大学 | 3200 |\n| 峰哥 |  男  |   贵州大学   | 5000 |\n| 坑货 |  女  |   北京大学   | 2000 |\n\n其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。\n\n### 数学表达式块\n\n输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：\n\n```\n $$\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n```\n\n将会产生:\n\n$$\\mathbf{V}\\_1 \\times \\mathbf{V}\\_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n\n### 任务列表\n\n使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。\n\n```\n- [ ] 吃饭\n- [ ] 逛街\n- [ ] 看电影\n- [ ] 约泡\n```\n\n- [x] 吃饭\n\n      ​\n\n- [x] 逛街\n\n      ​\n\n- [x] 看电影\n\n      ​\n\n- [x] 约泡\n\n### 列表\n\n输入+, -, \\*,创建无序的列表，使用任意数字开头，创建有序列表，例如：\n\n```\n**无序的列表**\n* tfboys\n* 杨洋\n* 我爱你\n```\n\n**无序的列表**\n\n- tfboys\n- 杨洋\n- 我爱你\n\n```\n**有序的列表**\n1. 苹果\n6. 香蕉\n10. 我都不喜欢\n```\n\n**有序的列表**\n\n1. 苹果\n2. 香蕉\n3. 我都不喜欢\n\n### 块引用\n\n使用>来插入块引用。例如：\n\n```\n>这是一个块引用！\n```\n\n将产生：\n\n> 这是一个块引用！\n\n### 标题\n\n使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。\n","slug":"typora","published":1,"updated":"2019-03-25T07:06:07.853Z","comments":1,"photos":[],"link":"","_id":"cjwppw0jg000wf8czlim3ft6s","content":"<p>#Typora For Markdown 语法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3hpYW5iYWkubWUvbGVhcm4tbWQvaW5kZXguaHRtbA==\" title=\"http://xianbai.me/learn-md/index.html\">Learning-Markdown (Markdown 入门参考)<i class=\"fa fa-external-link\"></i></span><br>[TOC]</p>\n<p>###数学表达式</p>\n<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_{x \\to \\infty} \\ exp(-x)=0$</code>将产生如下的数学表达式：</p>\n<p>$\\lim_{x \\to \\infty} \\exp(-x)=0$</p>\n<p>###下标</p>\n<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H~2~O, 即水的分子式。</p>\n<p>###上标</p>\n<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>\n<p>###插入表情:happy:</p>\n<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>使用`包裹的内容将会以代码样式显示，例如</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`printf()`</span><br></pre></td></tr></table></figure>\n<p>则会产生<code>printf()</code>样式。</p>\n<ul>\n<li><p>输入<code>~~~</code>或者<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `</span><br></pre></td></tr></table></figure></p>\n<p>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">将会产生</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>使用两个*号或者两个_包裹的内容将会被强调。例如</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**使用两个*号强调内容**</span></span><br><span class=\"line\"><span class=\"strong\">__使用两个下划线强调内容__</span></span><br></pre></td></tr></table></figure>\n<p>将会输出</p>\n<p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>在标准的 Markdown 语法中，*和_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\\*</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p>\n<p><img src=\"http://typora.io/img/drag-img.gif\" alt=\"drag and drop image\"></p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"插入-URL-连接\"><a href=\"#插入-URL-连接\" class=\"headerlink\" title=\"插入 URL 连接\"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20mZ3Q7\" title=\"http://www.baidu.com&gt;\">www.baidu.com&gt;<i class=\"fa fa-external-link\"></i></span>.</p>\n<p>如果是标准的 url，则会自动产生连接，例如:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\" title=\"http://www.google.com\">www.google.com<i class=\"fa fa-external-link\"></i></span></p>\n<h3 id=\"目录列表-Table-of-Contents（TOC）\"><a href=\"#目录列表-Table-of-Contents（TOC）\" class=\"headerlink\" title=\"目录列表 Table of Contents（TOC）\"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>\n<h3 id=\"水平分割线\"><a href=\"#水平分割线\" class=\"headerlink\" title=\"水平分割线\"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>\n<hr>\n<h3 id=\"标注\"><a href=\"#标注\" class=\"headerlink\" title=\"标注\"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些人用过了才知道<span class=\"selector-attr\">[^注释]</span></span><br><span class=\"line\"><span class=\"selector-attr\">[^注释]</span><span class=\"selector-pseudo\">:Somebody</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">I</span> <span class=\"selector-tag\">used</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">know</span>.</span><br></pre></td></tr></table></figure>\n<p>将产生：</p>\n<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>\n<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">|姓名|</span>性别<span class=\"params\">|毕业学校|</span>工资<span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span><span class=\"symbol\">:---|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\"><span class=\"params\">|杨洋|</span>男<span class=\"params\">|重庆交通大学|</span><span class=\"number\">3200</span><span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span>峰哥<span class=\"params\">|男|</span>贵州大学<span class=\"params\">|5000|</span></span><br><span class=\"line\"><span class=\"params\">|坑货|</span>女<span class=\"params\">|北京大学|</span><span class=\"number\">2000</span><span class=\"params\">|</span></span><br></pre></td></tr></table></figure>\n<p>将产生:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:center\">性别</th>\n<th style=\"text-align:center\">毕业学校</th>\n<th style=\"text-align:right\">工资</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">杨洋</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">重庆交通大学</td>\n<td style=\"text-align:right\">3200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">峰哥</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">贵州大学</td>\n<td style=\"text-align:right\">5000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">坑货</td>\n<td style=\"text-align:center\">女</td>\n<td style=\"text-align:center\">北京大学</td>\n<td style=\"text-align:right\">2000</td>\n</tr>\n</tbody>\n</table>\n<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>\n<h3 id=\"数学表达式块\"><a href=\"#数学表达式块\" class=\"headerlink\" title=\"数学表达式块\"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_1 <span class=\"tag\">\\<span class=\"name\">times</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_2 =  <span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;vmatrix&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;i&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;j&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;k&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;vmatrix&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>\n<p>将会产生:</p>\n<p>$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$</p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-attr\">[ ]</span> 吃饭</span><br><span class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-attr\">[ ]</span> 逛街</span><br><span class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-attr\">[ ]</span> 看电影</span><br><span class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-attr\">[ ]</span> 约泡</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>[x] 吃饭</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 逛街</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 看电影</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 约泡</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*无序的列表*</span><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> tfboys</span><br><span class=\"line\"><span class=\"bullet\">* </span>杨洋</span><br><span class=\"line\"><span class=\"bullet\">* </span>我爱你</span><br></pre></td></tr></table></figure>\n<p><strong>无序的列表</strong></p>\n<ul>\n<li>tfboys</li>\n<li>杨洋</li>\n<li>我爱你</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**有序的列表**</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>苹果</span><br><span class=\"line\"><span class=\"bullet\">6. </span>香蕉</span><br><span class=\"line\"><span class=\"bullet\">10. </span>我都不喜欢</span><br></pre></td></tr></table></figure>\n<p><strong>有序的列表</strong></p>\n<ol>\n<li>苹果</li>\n<li>香蕉</li>\n<li>我都不喜欢</li>\n</ol>\n<h3 id=\"块引用\"><a href=\"#块引用\" class=\"headerlink\" title=\"块引用\"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">这是一个块引用！</span></span><br></pre></td></tr></table></figure>\n<p>将产生：</p>\n<blockquote>\n<p>这是一个块引用！</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>#Typora For Markdown 语法</p>\n<p><a href=\"http://xianbai.me/learn-md/index.html\" target=\"_blank\" rel=\"noopener\">Learning-Markdown (Markdown 入门参考)</a><br>[TOC]</p>\n<p>###数学表达式</p>\n<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_{x \\to \\infty} \\ exp(-x)=0$</code>将产生如下的数学表达式：</p>\n<p>$\\lim_{x \\to \\infty} \\exp(-x)=0$</p>\n<p>###下标</p>\n<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H~2~O, 即水的分子式。</p>\n<p>###上标</p>\n<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>\n<p>###插入表情:happy:</p>\n<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>使用`包裹的内容将会以代码样式显示，例如</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`printf()`</span><br></pre></td></tr></table></figure>\n<p>则会产生<code>printf()</code>样式。</p>\n<ul>\n<li><p>输入<code>~~~</code>或者<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- `</span><br></pre></td></tr></table></figure></p>\n<p>​<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">​</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">将会产生</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">public Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3><p>使用两个*号或者两个_包裹的内容将会被强调。例如</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**使用两个*号强调内容**</span></span><br><span class=\"line\"><span class=\"strong\">__使用两个下划线强调内容__</span></span><br></pre></td></tr></table></figure>\n<p>将会输出</p>\n<p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong><br>Typroa 推荐使用两个*号。</p>\n<h3 id=\"斜体\"><a href=\"#斜体\" class=\"headerlink\" title=\"斜体\"></a>斜体</h3><p>在标准的 Markdown 语法中，*和_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\\*</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h3><p>我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。</p>\n<p><img src=\"http://typora.io/img/drag-img.gif\" alt=\"drag and drop image\"></p>\n<p>​</p>\n<p>​</p>\n</li>\n</ul>\n<h3 id=\"插入-URL-连接\"><a href=\"#插入-URL-连接\" class=\"headerlink\" title=\"插入 URL 连接\"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<a href=\"http://www.baidu.com&gt;\" target=\"_blank\" rel=\"noopener\">www.baidu.com&gt;</a>.</p>\n<p>如果是标准的 url，则会自动产生连接，例如:<a href=\"http://www.google.com\" target=\"_blank\" rel=\"noopener\">www.google.com</a></p>\n<h3 id=\"目录列表-Table-of-Contents（TOC）\"><a href=\"#目录列表-Table-of-Contents（TOC）\" class=\"headerlink\" title=\"目录列表 Table of Contents（TOC）\"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>\n<h3 id=\"水平分割线\"><a href=\"#水平分割线\" class=\"headerlink\" title=\"水平分割线\"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>\n<hr>\n<h3 id=\"标注\"><a href=\"#标注\" class=\"headerlink\" title=\"标注\"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些人用过了才知道<span class=\"selector-attr\">[^注释]</span></span><br><span class=\"line\"><span class=\"selector-attr\">[^注释]</span><span class=\"selector-pseudo\">:Somebody</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">I</span> <span class=\"selector-tag\">used</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">know</span>.</span><br></pre></td></tr></table></figure>\n<p>将产生：</p>\n<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>\n<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">|姓名|</span>性别<span class=\"params\">|毕业学校|</span>工资<span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span><span class=\"symbol\">:---|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\"><span class=\"params\">|杨洋|</span>男<span class=\"params\">|重庆交通大学|</span><span class=\"number\">3200</span><span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span>峰哥<span class=\"params\">|男|</span>贵州大学<span class=\"params\">|5000|</span></span><br><span class=\"line\"><span class=\"params\">|坑货|</span>女<span class=\"params\">|北京大学|</span><span class=\"number\">2000</span><span class=\"params\">|</span></span><br></pre></td></tr></table></figure>\n<p>将产生:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">姓名</th>\n<th style=\"text-align:center\">性别</th>\n<th style=\"text-align:center\">毕业学校</th>\n<th style=\"text-align:right\">工资</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">杨洋</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">重庆交通大学</td>\n<td style=\"text-align:right\">3200</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">峰哥</td>\n<td style=\"text-align:center\">男</td>\n<td style=\"text-align:center\">贵州大学</td>\n<td style=\"text-align:right\">5000</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">坑货</td>\n<td style=\"text-align:center\">女</td>\n<td style=\"text-align:center\">北京大学</td>\n<td style=\"text-align:right\">2000</td>\n</tr>\n</tbody>\n</table>\n<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>\n<h3 id=\"数学表达式块\"><a href=\"#数学表达式块\" class=\"headerlink\" title=\"数学表达式块\"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_1 <span class=\"tag\">\\<span class=\"name\">times</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_2 =  <span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;vmatrix&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;i&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;j&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;k&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;vmatrix&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>\n<p>将会产生:</p>\n<p>$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$</p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-attr\">[ ]</span> 吃饭</span><br><span class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-attr\">[ ]</span> 逛街</span><br><span class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-attr\">[ ]</span> 看电影</span><br><span class=\"line\"><span class=\"selector-tag\">-</span> <span class=\"selector-attr\">[ ]</span> 约泡</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>[x] 吃饭</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 逛街</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 看电影</p>\n<pre><code>​\n</code></pre></li>\n<li><p>[x] 约泡</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*无序的列表*</span><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> tfboys</span><br><span class=\"line\"><span class=\"bullet\">* </span>杨洋</span><br><span class=\"line\"><span class=\"bullet\">* </span>我爱你</span><br></pre></td></tr></table></figure>\n<p><strong>无序的列表</strong></p>\n<ul>\n<li>tfboys</li>\n<li>杨洋</li>\n<li>我爱你</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**有序的列表**</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>苹果</span><br><span class=\"line\"><span class=\"bullet\">6. </span>香蕉</span><br><span class=\"line\"><span class=\"bullet\">10. </span>我都不喜欢</span><br></pre></td></tr></table></figure>\n<p><strong>有序的列表</strong></p>\n<ol>\n<li>苹果</li>\n<li>香蕉</li>\n<li>我都不喜欢</li>\n</ol>\n<h3 id=\"块引用\"><a href=\"#块引用\" class=\"headerlink\" title=\"块引用\"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">这是一个块引用！</span></span><br></pre></td></tr></table></figure>\n<p>将产生：</p>\n<blockquote>\n<p>这是一个块引用！</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>\n"},{"layout":"post","title":"Vue二维码组件","subtitle":"vue, qrcode, vueqr, 二维码组件","date":"2018-03-12T08:30:00.000Z","author":"Mark","top":8,"_content":"\n# vue components\n\n[![npm](https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square)](https://github.com/Jack-In/vueQr-new/master/license)\n\n> ### 快速安装\n\n### install\n\n快速添加 `vueqr-new` 组件到 app 中\n\n```bash\nnpm install --save vueqr-new\n```\n\n### components\n\n```html\n<template>\n  <div>\n    <vue-qr :config=\"config\" :text=\"text\"></vue-qr>\n  </div>\n</template>\n<script>\nimport vueQr from 'vueqr-new';\nconst config = {\n  // 容错等级\n  errorCorrectionLevel: 'H',\n  // 图片类型\n  type: 'image/png',\n  rendererOpts: {\n  quality: 0.3\n  },\n  // 边框与二维码之间的间距\n  margin: 0,\n  // 缩放倍数\n  scale: 4,\n  width: 500,\n  maskPattern:1,\n  color: {\n  dark: '#000000',\n  light : \"#ffffff\"\n  },\n  style: {\n  width: '128px',\n  border: '1px solid #ccc'\n  }\n}\nexport default {\n  data() {\n    return {\n      text: 'https://example.com',\n      config: config\n    }\n  },\n  components: {\n    vueQr\n  }\n}\n</script>\n```\n\n## Component props\n\n| 属性   | 类型   | 属性描述      |\n| ------ | ------ | ------------- |\n| config | Object | qrcode option |\n| text   | String | qrcode value  |\n\n## 参考代码\n\n[\"node-qrcode\"](https://github.com/zpao/qrcode.react)\n\n> ### License\n\n[MIT](https://github.com/Jack-In/vueQr-new/blob/master/LICENSE)\n","source":"_posts/vueqr-new.md","raw":"---\nlayout: post\ntitle: 'Vue二维码组件'\nsubtitle: 'vue, qrcode, vueqr, 二维码组件'\ndate: 2018-03-12 16:30:00\nauthor: 'Mark'\ncategories: Vue #分类\ntop: 8\ntags:\n  - 前端开发\n  - Vue\n---\n\n# vue components\n\n[![npm](https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square)](https://github.com/Jack-In/vueQr-new/master/license)\n\n> ### 快速安装\n\n### install\n\n快速添加 `vueqr-new` 组件到 app 中\n\n```bash\nnpm install --save vueqr-new\n```\n\n### components\n\n```html\n<template>\n  <div>\n    <vue-qr :config=\"config\" :text=\"text\"></vue-qr>\n  </div>\n</template>\n<script>\nimport vueQr from 'vueqr-new';\nconst config = {\n  // 容错等级\n  errorCorrectionLevel: 'H',\n  // 图片类型\n  type: 'image/png',\n  rendererOpts: {\n  quality: 0.3\n  },\n  // 边框与二维码之间的间距\n  margin: 0,\n  // 缩放倍数\n  scale: 4,\n  width: 500,\n  maskPattern:1,\n  color: {\n  dark: '#000000',\n  light : \"#ffffff\"\n  },\n  style: {\n  width: '128px',\n  border: '1px solid #ccc'\n  }\n}\nexport default {\n  data() {\n    return {\n      text: 'https://example.com',\n      config: config\n    }\n  },\n  components: {\n    vueQr\n  }\n}\n</script>\n```\n\n## Component props\n\n| 属性   | 类型   | 属性描述      |\n| ------ | ------ | ------------- |\n| config | Object | qrcode option |\n| text   | String | qrcode value  |\n\n## 参考代码\n\n[\"node-qrcode\"](https://github.com/zpao/qrcode.react)\n\n> ### License\n\n[MIT](https://github.com/Jack-In/vueQr-new/blob/master/LICENSE)\n","slug":"vueqr-new","published":1,"updated":"2019-03-25T07:06:07.855Z","comments":1,"photos":[],"link":"","_id":"cjwppw0jm0011f8cz5bry5bny","content":"<h1 id=\"vue-components\"><a href=\"#vue-components\" class=\"headerlink\" title=\"vue components\"></a>vue components</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlcXItbmV3\" title=\"https://www.npmjs.com/package/vueqr-new\"><img src=\"https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square\" alt=\"npm\"><i class=\"fa fa-external-link\"></i></span><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvdnVlcXItbmV3\" title=\"https://www.npmjs.com/package/vueqr-new\"><img src=\"https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square\" alt=\"npm\"><i class=\"fa fa-external-link\"></i></span><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phY2stSW4vdnVlUXItbmV3L21hc3Rlci9saWNlbnNl\" title=\"https://github.com/Jack-In/vueQr-new/master/license\"><img src=\"https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square\" alt=\"npm\"><i class=\"fa fa-external-link\"></i></span></p>\n<blockquote>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h3></blockquote>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vueqr-new</span><br></pre></td></tr></table></figure>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vue-qr</span> <span class=\"attr\">:config</span>=<span class=\"string\">\"config\"</span> <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vue-qr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueQr <span class=\"keyword\">from</span> <span class=\"string\">'vueqr-new'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">const</span> config = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 容错等级</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  errorCorrectionLevel: <span class=\"string\">'H'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 图片类型</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  type: <span class=\"string\">'image/png'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  rendererOpts: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  quality: 0.3</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 边框与二维码之间的间距</span></span></span><br><span class=\"line\"><span class=\"undefined\">  margin: 0,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 缩放倍数</span></span></span><br><span class=\"line\"><span class=\"undefined\">  scale: 4,</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 500,</span></span><br><span class=\"line\"><span class=\"undefined\">  maskPattern:1,</span></span><br><span class=\"line\"><span class=\"undefined\">  color: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  dark: <span class=\"string\">'#000000'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  light : <span class=\"string\">\"#ffffff\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  style: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  width: <span class=\"string\">'128px'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  border: <span class=\"string\">'1px solid #ccc'</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://example.com'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      config: config</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    vueQr</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Component-props\"><a href=\"#Component-props\" class=\"headerlink\" title=\"Component props\"></a>Component props</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config</td>\n<td>Object</td>\n<td>qrcode option</td>\n</tr>\n<tr>\n<td>text</td>\n<td>String</td>\n<td>qrcode value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3pwYW8vcXJjb2RlLnJlYWN0\" title=\"https://github.com/zpao/qrcode.react\">“node-qrcode”<i class=\"fa fa-external-link\"></i></span></p>\n<blockquote>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3></blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phY2stSW4vdnVlUXItbmV3L2Jsb2IvbWFzdGVyL0xJQ0VOU0U=\" title=\"https://github.com/Jack-In/vueQr-new/blob/master/LICENSE\">MIT<i class=\"fa fa-external-link\"></i></span></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vue-components\"><a href=\"#vue-components\" class=\"headerlink\" title=\"vue components\"></a>vue components</h1><p><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://github.com/Jack-In/vueQr-new/master/license\" target=\"_blank\" rel=\"noopener\"><img src=\"https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a></p>\n<blockquote>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h3></blockquote>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vueqr-new</span><br></pre></td></tr></table></figure>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vue-qr</span> <span class=\"attr\">:config</span>=<span class=\"string\">\"config\"</span> <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vue-qr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueQr <span class=\"keyword\">from</span> <span class=\"string\">'vueqr-new'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">const</span> config = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 容错等级</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  errorCorrectionLevel: <span class=\"string\">'H'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 图片类型</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  type: <span class=\"string\">'image/png'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  rendererOpts: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  quality: 0.3</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 边框与二维码之间的间距</span></span></span><br><span class=\"line\"><span class=\"undefined\">  margin: 0,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 缩放倍数</span></span></span><br><span class=\"line\"><span class=\"undefined\">  scale: 4,</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 500,</span></span><br><span class=\"line\"><span class=\"undefined\">  maskPattern:1,</span></span><br><span class=\"line\"><span class=\"undefined\">  color: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  dark: <span class=\"string\">'#000000'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  light : <span class=\"string\">\"#ffffff\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  style: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  width: <span class=\"string\">'128px'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  border: <span class=\"string\">'1px solid #ccc'</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://example.com'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      config: config</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    vueQr</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Component-props\"><a href=\"#Component-props\" class=\"headerlink\" title=\"Component props\"></a>Component props</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>config</td>\n<td>Object</td>\n<td>qrcode option</td>\n</tr>\n<tr>\n<td>text</td>\n<td>String</td>\n<td>qrcode value</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><a href=\"https://github.com/zpao/qrcode.react\" target=\"_blank\" rel=\"noopener\">“node-qrcode”</a></p>\n<blockquote>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3></blockquote>\n<p><a href=\"https://github.com/Jack-In/vueQr-new/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\">MIT</a></p>\n"},{"title":"命令行配置代理服务","date":"2019-01-29T01:15:16.000Z","description":"命令行配置代理服务","top":11,"_content":"\n- 因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。\n\n### Windows\n\n- 通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 `set` 命令临时设置。\n- 控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 http://ip:port 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。\n\n```sh\nhttp_proxy=http://localhost:1080\nhttp_proxy_user=zhangsan\nhttp_proxy_pass=lisi\n通过 set 命令的形式大致如下所示。\n```\n\n#### 设置参数\n\n```sh\nset http_proxy=http://localhost:1080\nset http_proxy_user=zhangsan\nset http_proxy_pass=lisi\n```\n\n#### 删除参数\n\n```sh\nset http_proxy=\nset http_proxy_user=\nset http_proxy_pass=\n```\n\n另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。\n\n### Linux\n\n- 因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。\n- 据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。\n- 可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。\n\n```sh\nhttp*proxy=192.168.10.91:3128\nhttps_proxy=192.168.10.91:3128\nftp_proxy=192.168.10.91:3128\nno_proxy=\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"\n```\n\n- 在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。\n\n### 总结\n\n- Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。\n\n### 参考资料\n\n> [命令行配置代理服务器](https://www.ezloo.com/2008/12/set_http_proxy.html)</br>[为 windows cmd 设置代理](http://www.fx114.net/qa-15-153867.aspx)</br>[linux 命令行模式下实现代理上网](http://lymrg.blog.51cto.com/1551327/425744)</br>[Ubuntu 设置代理和例外](http://www.linuxdiyf.com/linux/14191.html)\n","source":"_posts/命令行配置代理服务.md","raw":"---\ntitle: 命令行配置代理服务\ndate: 2019-01-29 09:15:16\ncategories: 系统\ntags: [windows, linux]\ndescription: 命令行配置代理服务\ntop: 11\n---\n\n- 因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。\n\n### Windows\n\n- 通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 `set` 命令临时设置。\n- 控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 http://ip:port 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。\n\n```sh\nhttp_proxy=http://localhost:1080\nhttp_proxy_user=zhangsan\nhttp_proxy_pass=lisi\n通过 set 命令的形式大致如下所示。\n```\n\n#### 设置参数\n\n```sh\nset http_proxy=http://localhost:1080\nset http_proxy_user=zhangsan\nset http_proxy_pass=lisi\n```\n\n#### 删除参数\n\n```sh\nset http_proxy=\nset http_proxy_user=\nset http_proxy_pass=\n```\n\n另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。\n\n### Linux\n\n- 因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。\n- 据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。\n- 可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。\n\n```sh\nhttp*proxy=192.168.10.91:3128\nhttps_proxy=192.168.10.91:3128\nftp_proxy=192.168.10.91:3128\nno_proxy=\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"\n```\n\n- 在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。\n\n### 总结\n\n- Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。\n\n### 参考资料\n\n> [命令行配置代理服务器](https://www.ezloo.com/2008/12/set_http_proxy.html)</br>[为 windows cmd 设置代理](http://www.fx114.net/qa-15-153867.aspx)</br>[linux 命令行模式下实现代理上网](http://lymrg.blog.51cto.com/1551327/425744)</br>[Ubuntu 设置代理和例外](http://www.linuxdiyf.com/linux/14191.html)\n","slug":"命令行配置代理服务","published":1,"updated":"2019-03-25T07:06:07.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwppw0jr0014f8czmztrjcna","content":"<ul>\n<li>因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。</li>\n</ul>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><ul>\n<li>通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 <code>set</code> 命令临时设置。</li>\n<li>控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 <span class=\"exturl\" data-url=\"aHR0cDovL2lwOnBvcnQ=\" title=\"http://ip:port\">http://ip:port<i class=\"fa fa-external-link\"></i></span> 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http_proxy=http://localhost:1080</span><br><span class=\"line\">http_proxy_user=zhangsan</span><br><span class=\"line\">http_proxy_pass=lisi</span><br><span class=\"line\">通过 <span class=\"built_in\">set</span> 命令的形式大致如下所示。</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置参数\"><a href=\"#设置参数\" class=\"headerlink\" title=\"设置参数\"></a>设置参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://localhost:1080</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=zhangsan</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=lisi</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除参数\"><a href=\"#删除参数\" class=\"headerlink\" title=\"删除参数\"></a>删除参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=</span><br></pre></td></tr></table></figure>\n<p>另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li>因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。</li>\n<li>据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。</li>\n<li>可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http*proxy=192.168.10.91:3128</span><br><span class=\"line\">https_proxy=192.168.10.91:3128</span><br><span class=\"line\">ftp_proxy=192.168.10.91:3128</span><br><span class=\"line\">no_proxy=<span class=\"string\">\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXpsb28uY29tLzIwMDgvMTIvc2V0X2h0dHBfcHJveHkuaHRtbA==\" title=\"https://www.ezloo.com/2008/12/set_http_proxy.html\">命令行配置代理服务器<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5meDExNC5uZXQvcWEtMTUtMTUzODY3LmFzcHg=\" title=\"http://www.fx114.net/qa-15-153867.aspx\">为 windows cmd 设置代理<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL2x5bXJnLmJsb2cuNTFjdG8uY29tLzE1NTEzMjcvNDI1NzQ0\" title=\"http://lymrg.blog.51cto.com/1551327/425744\">linux 命令行模式下实现代理上网<i class=\"fa fa-external-link\"></i></span><br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eGRpeWYuY29tL2xpbnV4LzE0MTkxLmh0bWw=\" title=\"http://www.linuxdiyf.com/linux/14191.html\">Ubuntu 设置代理和例外<i class=\"fa fa-external-link\"></i></span></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。</li>\n</ul>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><ul>\n<li>通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 <code>set</code> 命令临时设置。</li>\n<li>控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 <a href=\"http://ip:port\" target=\"_blank\" rel=\"noopener\">http://ip:port</a> 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http_proxy=http://localhost:1080</span><br><span class=\"line\">http_proxy_user=zhangsan</span><br><span class=\"line\">http_proxy_pass=lisi</span><br><span class=\"line\">通过 <span class=\"built_in\">set</span> 命令的形式大致如下所示。</span><br></pre></td></tr></table></figure>\n<h4 id=\"设置参数\"><a href=\"#设置参数\" class=\"headerlink\" title=\"设置参数\"></a>设置参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://localhost:1080</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=zhangsan</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=lisi</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除参数\"><a href=\"#删除参数\" class=\"headerlink\" title=\"删除参数\"></a>删除参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=</span><br></pre></td></tr></table></figure>\n<p>另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li>因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。</li>\n<li>据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。</li>\n<li>可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http*proxy=192.168.10.91:3128</span><br><span class=\"line\">https_proxy=192.168.10.91:3128</span><br><span class=\"line\">ftp_proxy=192.168.10.91:3128</span><br><span class=\"line\">no_proxy=<span class=\"string\">\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><blockquote>\n<p><a href=\"https://www.ezloo.com/2008/12/set_http_proxy.html\" target=\"_blank\" rel=\"noopener\">命令行配置代理服务器</a><br><a href=\"http://www.fx114.net/qa-15-153867.aspx\" target=\"_blank\" rel=\"noopener\">为 windows cmd 设置代理</a><br><a href=\"http://lymrg.blog.51cto.com/1551327/425744\" target=\"_blank\" rel=\"noopener\">linux 命令行模式下实现代理上网</a><br><a href=\"http://www.linuxdiyf.com/linux/14191.html\" target=\"_blank\" rel=\"noopener\">Ubuntu 设置代理和例外</a></p>\n</blockquote>\n"},{"layout":"post","title":"用掘金－Markdown 编辑器写文章","date":"2018-12-11T04:37:00.000Z","author":"Mark","top":12,"_content":"\n### 用掘金－Markdown 编辑器写文章\n\n欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。\n\n### 丰富的快捷键\n\n本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。\n\n支持的快捷键有：\n\n- 加粗： `Ctrl/Cmd + B`\n- 标题： `Ctrl/Cmd + H`\n- 插入链接： `Ctrl/Cmd + K`\n- 插入代码： `Ctrl/Cmd + Shift + C`\n- 行内代码： `Ctrl/Cmd + Shift + K`\n- 插入图片： `Ctrl/Cmd + Shift + I`\n- 无序列表： `Ctrl/Cmd + Shift + L`\n- 撤销： `Ctrl/Cmd + Z`\n\n### 常用语法\n\n#### 标题\n\n> 语法格式：** '#'+'空格'+'文本' **\n\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n#### 列表\n\n> 无序列表语法格式：** '-' + '空格' ＋ '文本' **\n\n- 文本一\n- 文本二\n- 文本三\n\n> 有序列表语法格式：** '数字' + '.' + '空格' + '文本' **\n\n1. 文本一\n2. 文本二\n3. 文本三\n\n> 任务列表语法格式：** '-' + '空格' + '[ ]' + '文本' **\n\n- [x] 文本一\n- [ ] 文本二\n- [ ] 文本三\n\n#### 链接和图片\n\n在 Markdown 中插入链接不需要其他按钮，你只需要使用`［显示文本］(链接地址)`这样的格式语法即可。例如：\n[稀土掘金](https://gold.xitu.io)\n插入图片的语法与插入链接的语法很像，只是前面多了一个 `!`.语法如下：\n`![图片的标注](图片链接地址)`\n\n#### 引用\n\n> 语法：** '>'+'空格'+'文本' **\n\n例如：\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。\n\n#### 代码\n\n如下是代码段的语法：\n\n<pre>\n```编程语言\n 这是代码段\n```\n</pre>\n\n例如：\n\n```python\ndef bubbleSort(alist):\n for passnum in range(len(alist)-1,0,-1):\n #print alist,passnum\n for i in range(passnum):\n if alist[i]>alist[i+1]:\n temp = alist[i]\n alist[i] = alist[i+1]\n alist[i+1] = temp\n return alist\n```\n\n#### 表格\n\n**Markdown 　 Extra**　表格语法：\n\n| 项目   | 价格   |\n| ------ | ------ |\n| iPhone | \\$560  |\n| iPad   | \\$780  |\n| iMac   | \\$1000 |\n\n可以使用冒号来定义对齐方式：\n\n| 项目   |     价格 | 数量 |\n| :----- | -------: | :--: |\n| iPhone |  6000 元 |  5   |\n| iPad   |  3800 元 |  12  |\n| iMac   | 10000 元 | 234  |\n\n#### 结语\n\n以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里[Markdown 语法](https://www.appinn.com/markdown/)，非常感谢使用** 掘金－Markdown 编辑器**,希望为您提供舒适的写作体验。\n","source":"_posts/掘金文档编辑器使用方法.md","raw":"---\nlayout: post\ntitle: \"用掘金－Markdown 编辑器写文章\"\ndate: 2018-12-11 12:37:00\nauthor: \"Mark\"\ncategories: 网站应用 #分类\ntop: 12\ntags:\n  - 前端开发\n  - 掘金\n  - Markdown\n---\n\n### 用掘金－Markdown 编辑器写文章\n\n欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。\n\n### 丰富的快捷键\n\n本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。\n\n支持的快捷键有：\n\n- 加粗： `Ctrl/Cmd + B`\n- 标题： `Ctrl/Cmd + H`\n- 插入链接： `Ctrl/Cmd + K`\n- 插入代码： `Ctrl/Cmd + Shift + C`\n- 行内代码： `Ctrl/Cmd + Shift + K`\n- 插入图片： `Ctrl/Cmd + Shift + I`\n- 无序列表： `Ctrl/Cmd + Shift + L`\n- 撤销： `Ctrl/Cmd + Z`\n\n### 常用语法\n\n#### 标题\n\n> 语法格式：** '#'+'空格'+'文本' **\n\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n#### 列表\n\n> 无序列表语法格式：** '-' + '空格' ＋ '文本' **\n\n- 文本一\n- 文本二\n- 文本三\n\n> 有序列表语法格式：** '数字' + '.' + '空格' + '文本' **\n\n1. 文本一\n2. 文本二\n3. 文本三\n\n> 任务列表语法格式：** '-' + '空格' + '[ ]' + '文本' **\n\n- [x] 文本一\n- [ ] 文本二\n- [ ] 文本三\n\n#### 链接和图片\n\n在 Markdown 中插入链接不需要其他按钮，你只需要使用`［显示文本］(链接地址)`这样的格式语法即可。例如：\n[稀土掘金](https://gold.xitu.io)\n插入图片的语法与插入链接的语法很像，只是前面多了一个 `!`.语法如下：\n`![图片的标注](图片链接地址)`\n\n#### 引用\n\n> 语法：** '>'+'空格'+'文本' **\n\n例如：\n\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。\n\n#### 代码\n\n如下是代码段的语法：\n\n<pre>\n```编程语言\n 这是代码段\n```\n</pre>\n\n例如：\n\n```python\ndef bubbleSort(alist):\n for passnum in range(len(alist)-1,0,-1):\n #print alist,passnum\n for i in range(passnum):\n if alist[i]>alist[i+1]:\n temp = alist[i]\n alist[i] = alist[i+1]\n alist[i+1] = temp\n return alist\n```\n\n#### 表格\n\n**Markdown 　 Extra**　表格语法：\n\n| 项目   | 价格   |\n| ------ | ------ |\n| iPhone | \\$560  |\n| iPad   | \\$780  |\n| iMac   | \\$1000 |\n\n可以使用冒号来定义对齐方式：\n\n| 项目   |     价格 | 数量 |\n| :----- | -------: | :--: |\n| iPhone |  6000 元 |  5   |\n| iPad   |  3800 元 |  12  |\n| iMac   | 10000 元 | 234  |\n\n#### 结语\n\n以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里[Markdown 语法](https://www.appinn.com/markdown/)，非常感谢使用** 掘金－Markdown 编辑器**,希望为您提供舒适的写作体验。\n","slug":"掘金文档编辑器使用方法","published":1,"updated":"2019-03-25T07:06:07.858Z","comments":1,"photos":[],"link":"","_id":"cjwppw0jw0019f8czde5c6z1c","content":"<h3 id=\"用掘金－Markdown-编辑器写文章\"><a href=\"#用掘金－Markdown-编辑器写文章\" class=\"headerlink\" title=\"用掘金－Markdown 编辑器写文章\"></a>用掘金－Markdown 编辑器写文章</h3><p>欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。</p>\n<h3 id=\"丰富的快捷键\"><a href=\"#丰富的快捷键\" class=\"headerlink\" title=\"丰富的快捷键\"></a>丰富的快捷键</h3><p>本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。</p>\n<p>支持的快捷键有：</p>\n<ul>\n<li>加粗： <code>Ctrl/Cmd + B</code></li>\n<li>标题： <code>Ctrl/Cmd + H</code></li>\n<li>插入链接： <code>Ctrl/Cmd + K</code></li>\n<li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li>\n<li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li>\n<li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li>\n<li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li>\n<li>撤销： <code>Ctrl/Cmd + Z</code></li>\n</ul>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><blockquote>\n<p>语法格式：<strong> ‘#’+’空格’+’文本’ </strong></p>\n</blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><blockquote>\n<p>无序列表语法格式：<strong> ‘-‘ + ‘空格’ ＋ ‘文本’ </strong></p>\n</blockquote>\n<ul>\n<li>文本一</li>\n<li>文本二</li>\n<li>文本三</li>\n</ul>\n<blockquote>\n<p>有序列表语法格式：<strong> ‘数字’ + ‘.’ + ‘空格’ + ‘文本’ </strong></p>\n</blockquote>\n<ol>\n<li>文本一</li>\n<li>文本二</li>\n<li>文本三</li>\n</ol>\n<blockquote>\n<p>任务列表语法格式：<strong> ‘-‘ + ‘空格’ + ‘[ ]’ + ‘文本’ </strong></p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 文本一</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 文本二</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 文本三</li>\n</ul>\n<h4 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h4><p>在 Markdown 中插入链接不需要其他按钮，你只需要使用<code>［显示文本］(链接地址)</code>这样的格式语法即可。例如：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xkLnhpdHUuaW8=\" title=\"https://gold.xitu.io\">稀土掘金<i class=\"fa fa-external-link\"></i></span><br>插入图片的语法与插入链接的语法很像，只是前面多了一个 <code>!</code>.语法如下：<br><code>![图片的标注](图片链接地址)</code></p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><blockquote>\n<p>语法：<strong> ‘&gt;’+’空格’+’文本’ </strong></p>\n</blockquote>\n<p>例如：</p>\n<blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>如下是代码段的语法：</p>\n<pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是代码段</span><br></pre></td></tr></table></figure>\n\n</pre>\n\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(alist)</span>:</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> passnum <span class=\"keyword\">in</span> range(len(alist)<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\"> <span class=\"comment\">#print alist,passnum</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(passnum):</span><br><span class=\"line\"> <span class=\"keyword\">if</span> alist[i]&gt;alist[i+<span class=\"number\">1</span>]:</span><br><span class=\"line\"> temp = alist[i]</span><br><span class=\"line\"> alist[i] = alist[i+<span class=\"number\">1</span>]</span><br><span class=\"line\"> alist[i+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\"> <span class=\"keyword\">return</span> alist</span><br></pre></td></tr></table></figure>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><p><strong>Markdown 　 Extra</strong>　表格语法：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iPhone</td>\n<td>\\$560</td>\n</tr>\n<tr>\n<td>iPad</td>\n<td>\\$780</td>\n</tr>\n<tr>\n<td>iMac</td>\n<td>\\$1000</td>\n</tr>\n</tbody>\n</table>\n<p>可以使用冒号来定义对齐方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">iPhone</td>\n<td style=\"text-align:right\">6000 元</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iPad</td>\n<td style=\"text-align:right\">3800 元</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iMac</td>\n<td style=\"text-align:right\">10000 元</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><p>以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBwaW5uLmNvbS9tYXJrZG93bi8=\" title=\"https://www.appinn.com/markdown/\">Markdown 语法<i class=\"fa fa-external-link\"></i></span>，非常感谢使用<strong> 掘金－Markdown 编辑器</strong>,希望为您提供舒适的写作体验。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"用掘金－Markdown-编辑器写文章\"><a href=\"#用掘金－Markdown-编辑器写文章\" class=\"headerlink\" title=\"用掘金－Markdown 编辑器写文章\"></a>用掘金－Markdown 编辑器写文章</h3><p>欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。</p>\n<h3 id=\"丰富的快捷键\"><a href=\"#丰富的快捷键\" class=\"headerlink\" title=\"丰富的快捷键\"></a>丰富的快捷键</h3><p>本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。</p>\n<p>支持的快捷键有：</p>\n<ul>\n<li>加粗： <code>Ctrl/Cmd + B</code></li>\n<li>标题： <code>Ctrl/Cmd + H</code></li>\n<li>插入链接： <code>Ctrl/Cmd + K</code></li>\n<li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li>\n<li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li>\n<li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li>\n<li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li>\n<li>撤销： <code>Ctrl/Cmd + Z</code></li>\n</ul>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><blockquote>\n<p>语法格式：<strong> ‘#’+’空格’+’文本’ </strong></p>\n</blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6><h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><blockquote>\n<p>无序列表语法格式：<strong> ‘-‘ + ‘空格’ ＋ ‘文本’ </strong></p>\n</blockquote>\n<ul>\n<li>文本一</li>\n<li>文本二</li>\n<li>文本三</li>\n</ul>\n<blockquote>\n<p>有序列表语法格式：<strong> ‘数字’ + ‘.’ + ‘空格’ + ‘文本’ </strong></p>\n</blockquote>\n<ol>\n<li>文本一</li>\n<li>文本二</li>\n<li>文本三</li>\n</ol>\n<blockquote>\n<p>任务列表语法格式：<strong> ‘-‘ + ‘空格’ + ‘[ ]’ + ‘文本’ </strong></p>\n</blockquote>\n<ul>\n<li style=\"list-style: none\"><input type=\"checkbox\" checked> 文本一</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 文本二</li>\n<li style=\"list-style: none\"><input type=\"checkbox\"> 文本三</li>\n</ul>\n<h4 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h4><p>在 Markdown 中插入链接不需要其他按钮，你只需要使用<code>［显示文本］(链接地址)</code>这样的格式语法即可。例如：<br><a href=\"https://gold.xitu.io\" target=\"_blank\" rel=\"noopener\">稀土掘金</a><br>插入图片的语法与插入链接的语法很像，只是前面多了一个 <code>!</code>.语法如下：<br><code>![图片的标注](图片链接地址)</code></p>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><blockquote>\n<p>语法：<strong> ‘&gt;’+’空格’+’文本’ </strong></p>\n</blockquote>\n<p>例如：</p>\n<blockquote>\n<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。</p>\n</blockquote>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>如下是代码段的语法：</p>\n<pre>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是代码段</span><br></pre></td></tr></table></figure>\n\n</pre>\n\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(alist)</span>:</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> passnum <span class=\"keyword\">in</span> range(len(alist)<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\"> <span class=\"comment\">#print alist,passnum</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(passnum):</span><br><span class=\"line\"> <span class=\"keyword\">if</span> alist[i]&gt;alist[i+<span class=\"number\">1</span>]:</span><br><span class=\"line\"> temp = alist[i]</span><br><span class=\"line\"> alist[i] = alist[i+<span class=\"number\">1</span>]</span><br><span class=\"line\"> alist[i+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\"> <span class=\"keyword\">return</span> alist</span><br></pre></td></tr></table></figure>\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><p><strong>Markdown 　 Extra</strong>　表格语法：</p>\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>价格</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>iPhone</td>\n<td>\\$560</td>\n</tr>\n<tr>\n<td>iPad</td>\n<td>\\$780</td>\n</tr>\n<tr>\n<td>iMac</td>\n<td>\\$1000</td>\n</tr>\n</tbody>\n</table>\n<p>可以使用冒号来定义对齐方式：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">项目</th>\n<th style=\"text-align:right\">价格</th>\n<th style=\"text-align:center\">数量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">iPhone</td>\n<td style=\"text-align:right\">6000 元</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iPad</td>\n<td style=\"text-align:right\">3800 元</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">iMac</td>\n<td style=\"text-align:right\">10000 元</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><p>以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里<a href=\"https://www.appinn.com/markdown/\" target=\"_blank\" rel=\"noopener\">Markdown 语法</a>，非常感谢使用<strong> 掘金－Markdown 编辑器</strong>,希望为您提供舒适的写作体验。</p>\n"},{"title":"聊聊网络中的传输协议","date":"2019-03-25T06:10:48.000Z","layout":"post","author":"Mark","_content":"\n一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~\n\n#### 聊聊网络传输协议\n\n<br/>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。\n&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。\n\n> 下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：\n\n![image](/assets/img/2019/03/1.png)![image](/assets/img/2019/03/2.png)\n\n它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。\n\n![image](/assets/img/2019/03/3.png)![image](/assets/img/2019/03/4.png)![image](/assets/img/2019/03/5.png)\n\n#### http 协议与 tcp 协议的恩怨情仇\n\n##### tcp 三次握手和四次挥手\n\n讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!\n\n![image](/assets/img/2019/03/6.png)\n\n动画介绍三次握手和四次挥手\n\n![image](/assets/img/2019/03/7.gif)![image](/assets/img/2019/03/8.gif)\n\n> 先写到这待补充完善！\n\n#### 参考资料：\n\n- [网络传输协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n- [OSI 模型 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B)\n- [超文本传输协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n- [互联网协议入门（一） - 阮一峰的网络日志](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n- [TCP 协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n- [MDN http 响应代码](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status)\n- 《图解 HTTP 协议》\n- 《计算机网络》\n","source":"_posts/聊聊网络中的传输协议.md","raw":"---\ntitle: 聊聊网络中的传输协议\ndate: 2019-03-25 14:10:48\nlayout: post\nauthor: \"Mark\"\ncategories: 网络传输协议 #分类\ntags:\n  - 网络传输协议\n  - TCP/IP协议族\n  - HTTP/HTTPS\n---\n\n一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~\n\n#### 聊聊网络传输协议\n\n<br/>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。\n&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。\n\n> 下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：\n\n![image](/assets/img/2019/03/1.png)![image](/assets/img/2019/03/2.png)\n\n它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。\n\n![image](/assets/img/2019/03/3.png)![image](/assets/img/2019/03/4.png)![image](/assets/img/2019/03/5.png)\n\n#### http 协议与 tcp 协议的恩怨情仇\n\n##### tcp 三次握手和四次挥手\n\n讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!\n\n![image](/assets/img/2019/03/6.png)\n\n动画介绍三次握手和四次挥手\n\n![image](/assets/img/2019/03/7.gif)![image](/assets/img/2019/03/8.gif)\n\n> 先写到这待补充完善！\n\n#### 参考资料：\n\n- [网络传输协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n- [OSI 模型 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B)\n- [超文本传输协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n- [互联网协议入门（一） - 阮一峰的网络日志](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n- [TCP 协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n- [MDN http 响应代码](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status)\n- 《图解 HTTP 协议》\n- 《计算机网络》\n","slug":"聊聊网络中的传输协议","published":1,"updated":"2019-03-25T08:11:57.368Z","comments":1,"photos":[],"link":"","_id":"cjwppw0jz001bf8czu9ehlt77","content":"<p>一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~</p>\n<h4 id=\"聊聊网络传输协议\"><a href=\"#聊聊网络传输协议\" class=\"headerlink\" title=\"聊聊网络传输协议\"></a>聊聊网络传输协议</h4><p><br>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。<br>&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。</p>\n<blockquote>\n<p>下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：</p>\n</blockquote>\n<p><img src=\"/assets/img/2019/03/1.png\" alt=\"image\"><img src=\"/assets/img/2019/03/2.png\" alt=\"image\"></p>\n<p>它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。</p>\n<p><img src=\"/assets/img/2019/03/3.png\" alt=\"image\"><img src=\"/assets/img/2019/03/4.png\" alt=\"image\"><img src=\"/assets/img/2019/03/5.png\" alt=\"image\"></p>\n<h4 id=\"http-协议与-tcp-协议的恩怨情仇\"><a href=\"#http-协议与-tcp-协议的恩怨情仇\" class=\"headerlink\" title=\"http 协议与 tcp 协议的恩怨情仇\"></a>http 协议与 tcp 协议的恩怨情仇</h4><h5 id=\"tcp-三次握手和四次挥手\"><a href=\"#tcp-三次握手和四次挥手\" class=\"headerlink\" title=\"tcp 三次握手和四次挥手\"></a>tcp 三次握手和四次挥手</h5><p>讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!</p>\n<p><img src=\"/assets/img/2019/03/6.png\" alt=\"image\"></p>\n<p>动画介绍三次握手和四次挥手</p>\n<p><img src=\"/assets/img/2019/03/7.gif\" alt=\"image\"><img src=\"/assets/img/2019/03/8.gif\" alt=\"image\"></p>\n<blockquote>\n<p>先写到这待补充完善！</p>\n</blockquote>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJEJTkxJUU3JUJCJTlDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\" title=\"https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE\">网络传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT1NJJUU2JUE4JUExJUU1JTlFJThC\" title=\"https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B\">OSI 模型 - 维基百科，自由的百科全书<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI2JTg1JUU2JTk2JTg3JUU2JTlDJUFDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\" title=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE\">超文本传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\" title=\"https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\">互联网协议入门（一） - 阮一峰的网络日志<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\" title=\"https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\">TCP 协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=\" title=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\">MDN http 响应代码<i class=\"fa fa-external-link\"></i></span></li>\n<li>《图解 HTTP 协议》</li>\n<li>《计算机网络》</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~</p>\n<h4 id=\"聊聊网络传输协议\"><a href=\"#聊聊网络传输协议\" class=\"headerlink\" title=\"聊聊网络传输协议\"></a>聊聊网络传输协议</h4><p><br>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。<br>&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。</p>\n<blockquote>\n<p>下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：</p>\n</blockquote>\n<p><img src=\"/assets/img/2019/03/1.png\" alt=\"image\"><img src=\"/assets/img/2019/03/2.png\" alt=\"image\"></p>\n<p>它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。</p>\n<p><img src=\"/assets/img/2019/03/3.png\" alt=\"image\"><img src=\"/assets/img/2019/03/4.png\" alt=\"image\"><img src=\"/assets/img/2019/03/5.png\" alt=\"image\"></p>\n<h4 id=\"http-协议与-tcp-协议的恩怨情仇\"><a href=\"#http-协议与-tcp-协议的恩怨情仇\" class=\"headerlink\" title=\"http 协议与 tcp 协议的恩怨情仇\"></a>http 协议与 tcp 协议的恩怨情仇</h4><h5 id=\"tcp-三次握手和四次挥手\"><a href=\"#tcp-三次握手和四次挥手\" class=\"headerlink\" title=\"tcp 三次握手和四次挥手\"></a>tcp 三次握手和四次挥手</h5><p>讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!</p>\n<p><img src=\"/assets/img/2019/03/6.png\" alt=\"image\"></p>\n<p>动画介绍三次握手和四次挥手</p>\n<p><img src=\"/assets/img/2019/03/7.gif\" alt=\"image\"><img src=\"/assets/img/2019/03/8.gif\" alt=\"image\"></p>\n<blockquote>\n<p>先写到这待补充完善！</p>\n</blockquote>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><ul>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\">网络传输协议 - 维基百科，自由的百科全书</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B\" target=\"_blank\" rel=\"noopener\">OSI 模型 - 维基百科，自由的百科全书</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\">超文本传输协议 - 维基百科，自由的百科全书</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\">互联网协议入门（一） - 阮一峰的网络日志</a></li>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE\" target=\"_blank\" rel=\"noopener\">TCP 协议 - 维基百科，自由的百科全书</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status\" target=\"_blank\" rel=\"noopener\">MDN http 响应代码</a></li>\n<li>《图解 HTTP 协议》</li>\n<li>《计算机网络》</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwppw0iv0008f8czfz4t1bk7","category_id":"cjwppw0ir0004f8czphwnuyki","_id":"cjwppw0j2000ef8czk5k5p0ro"},{"post_id":"cjwppw0ij0000f8czz97hi98e","category_id":"cjwppw0ir0004f8czphwnuyki","_id":"cjwppw0j5000if8cz2p5ho593"},{"post_id":"cjwppw0ix0009f8czte0vrk0z","category_id":"cjwppw0ir0004f8czphwnuyki","_id":"cjwppw0j6000kf8cz9m2sfjz7"},{"post_id":"cjwppw0in0002f8czoybfsv6a","category_id":"cjwppw0ir0004f8czphwnuyki","_id":"cjwppw0j8000of8czjm3xqw0s"},{"post_id":"cjwppw0j1000df8cz42tzxx9w","category_id":"cjwppw0ir0004f8czphwnuyki","_id":"cjwppw0j9000qf8cz4j2jt5gn"},{"post_id":"cjwppw0it0006f8czvy4sovqf","category_id":"cjwppw0ir0004f8czphwnuyki","_id":"cjwppw0je000uf8cz5phbschq"},{"post_id":"cjwppw0j7000nf8czvxoocpsj","category_id":"cjwppw0ir0004f8czphwnuyki","_id":"cjwppw0ji000xf8cz586t9jsf"},{"post_id":"cjwppw0iz000cf8czuraq4m99","category_id":"cjwppw0j6000lf8cz98s9gwfh","_id":"cjwppw0jo0012f8czjc075p9m"},{"post_id":"cjwppw0j9000pf8czug1attml","category_id":"cjwppw0ir0004f8czphwnuyki","_id":"cjwppw0js0015f8czxeni8n4m"},{"post_id":"cjwppw0j4000hf8cze7gxn2ij","category_id":"cjwppw0j6000lf8cz98s9gwfh","_id":"cjwppw0jy001af8czhijlcmng"},{"post_id":"cjwppw0jm0011f8cz5bry5bny","category_id":"cjwppw0j6000lf8cz98s9gwfh","_id":"cjwppw0k1001cf8czcop77jjf"},{"post_id":"cjwppw0jc000tf8cza0e2dq8r","category_id":"cjwppw0jt0016f8cza51c9fx5","_id":"cjwppw0k6001hf8cz7fy08pd3"},{"post_id":"cjwppw0jg000wf8czlim3ft6s","category_id":"cjwppw0k2001df8czen89oy2r","_id":"cjwppw0k9001mf8czl6f96087"},{"post_id":"cjwppw0jr0014f8czmztrjcna","category_id":"cjwppw0k7001jf8cz0wx7u4v3","_id":"cjwppw0kb001pf8czao1rxrt9"},{"post_id":"cjwppw0jw0019f8czde5c6z1c","category_id":"cjwppw0k9001nf8czg2uac8jp","_id":"cjwppw0kf001tf8czhps7aezf"},{"post_id":"cjwppw0jz001bf8czu9ehlt77","category_id":"cjwppw0kc001qf8cz8pqxpg3w","_id":"cjwppw0ki001xf8cz0yur7nqv"},{"post_id":"cjwppw0j5000jf8cz8fzsssnp","category_id":"cjwppw0jj000yf8czdma0ckov","_id":"cjwpqhv1o000wt4czir68aaus"}],"PostTag":[{"post_id":"cjwppw0ij0000f8czz97hi98e","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0jf000vf8czpnxdlio6"},{"post_id":"cjwppw0ij0000f8czz97hi98e","tag_id":"cjwppw0iy000bf8czu55fihgj","_id":"cjwppw0jk000zf8czmz4qz7tn"},{"post_id":"cjwppw0ij0000f8czz97hi98e","tag_id":"cjwppw0j3000gf8czz56v1h6r","_id":"cjwppw0jq0013f8czrpgghb3n"},{"post_id":"cjwppw0ij0000f8czz97hi98e","tag_id":"cjwppw0j7000mf8czzlj09itn","_id":"cjwppw0ju0017f8czxr1vjg0i"},{"post_id":"cjwppw0in0002f8czoybfsv6a","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0k5001gf8cz34e8lbrb"},{"post_id":"cjwppw0in0002f8czoybfsv6a","tag_id":"cjwppw0iy000bf8czu55fihgj","_id":"cjwppw0k6001if8cztjwmkoz0"},{"post_id":"cjwppw0in0002f8czoybfsv6a","tag_id":"cjwppw0jv0018f8czegp99pt6","_id":"cjwppw0k8001lf8czjue42qn0"},{"post_id":"cjwppw0it0006f8czvy4sovqf","tag_id":"cjwppw0k4001ff8czp198nu7c","_id":"cjwppw0ke001sf8czs8uoqqyf"},{"post_id":"cjwppw0it0006f8czvy4sovqf","tag_id":"cjwppw0k7001kf8czhctznpyt","_id":"cjwppw0kf001uf8cztbl30fud"},{"post_id":"cjwppw0it0006f8czvy4sovqf","tag_id":"cjwppw0ka001of8cz7ghwf07t","_id":"cjwppw0kh001wf8czch4ywwtd"},{"post_id":"cjwppw0iv0008f8czfz4t1bk7","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0kk001zf8czq158g15n"},{"post_id":"cjwppw0iv0008f8czfz4t1bk7","tag_id":"cjwppw0iy000bf8czu55fihgj","_id":"cjwppw0kl0020f8cz6kuk0q2p"},{"post_id":"cjwppw0iv0008f8czfz4t1bk7","tag_id":"cjwppw0kg001vf8czsade4jjo","_id":"cjwppw0km0022f8cz62hx5lcc"},{"post_id":"cjwppw0ix0009f8czte0vrk0z","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0ko0024f8czu5ujf0t6"},{"post_id":"cjwppw0ix0009f8czte0vrk0z","tag_id":"cjwppw0iy000bf8czu55fihgj","_id":"cjwppw0ko0025f8czjzxo4sgs"},{"post_id":"cjwppw0ix0009f8czte0vrk0z","tag_id":"cjwppw0kl0021f8czam02v3vk","_id":"cjwppw0kq0027f8czoi4x7how"},{"post_id":"cjwppw0iz000cf8czuraq4m99","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0kq0028f8czrsaqy6ck"},{"post_id":"cjwppw0iz000cf8czuraq4m99","tag_id":"cjwppw0iy000bf8czu55fihgj","_id":"cjwppw0ks002af8cz7yo82ghx"},{"post_id":"cjwppw0iz000cf8czuraq4m99","tag_id":"cjwppw0kn0023f8cz1y77j2t2","_id":"cjwppw0ks002bf8czvt4h4kj3"},{"post_id":"cjwppw0j1000df8cz42tzxx9w","tag_id":"cjwppw0kp0026f8cz4f4srhoy","_id":"cjwppw0kv002ef8czkh73qhpi"},{"post_id":"cjwppw0j1000df8cz42tzxx9w","tag_id":"cjwppw0kr0029f8czkol01nen","_id":"cjwppw0kw002ff8cz9j57xroz"},{"post_id":"cjwppw0j1000df8cz42tzxx9w","tag_id":"cjwppw0ka001of8cz7ghwf07t","_id":"cjwppw0kx002hf8czddmfdqzp"},{"post_id":"cjwppw0j4000hf8cze7gxn2ij","tag_id":"cjwppw0ku002df8czukzlb6p8","_id":"cjwppw0kz002kf8cz2g2i3rkv"},{"post_id":"cjwppw0j4000hf8cze7gxn2ij","tag_id":"cjwppw0kw002gf8czmz4p2lns","_id":"cjwppw0l0002lf8czyv0gtcji"},{"post_id":"cjwppw0j4000hf8cze7gxn2ij","tag_id":"cjwppw0ka001of8cz7ghwf07t","_id":"cjwppw0l0002nf8cz32cjj3lj"},{"post_id":"cjwppw0j7000nf8czvxoocpsj","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0l2002sf8cz8kdx9aij"},{"post_id":"cjwppw0j7000nf8czvxoocpsj","tag_id":"cjwppw0iy000bf8czu55fihgj","_id":"cjwppw0l2002tf8cz2hd5lf0t"},{"post_id":"cjwppw0j7000nf8czvxoocpsj","tag_id":"cjwppw0l0002mf8cz46pgkr0j","_id":"cjwppw0l3002vf8czcw2z7y0w"},{"post_id":"cjwppw0j7000nf8czvxoocpsj","tag_id":"cjwppw0l1002pf8czrkbz3dr4","_id":"cjwppw0l3002wf8czagrf7eo6"},{"post_id":"cjwppw0j9000pf8czug1attml","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0l5002yf8czwlfu061i"},{"post_id":"cjwppw0j9000pf8czug1attml","tag_id":"cjwppw0l1002rf8czx1olycdz","_id":"cjwppw0l6002zf8czgkpgb1y2"},{"post_id":"cjwppw0j9000pf8czug1attml","tag_id":"cjwppw0l2002uf8czl5oo03xc","_id":"cjwppw0l70031f8czpn6h49kj"},{"post_id":"cjwppw0jc000tf8cza0e2dq8r","tag_id":"cjwppw0l4002xf8cz30jag015","_id":"cjwppw0l90035f8czomavxose"},{"post_id":"cjwppw0jc000tf8cza0e2dq8r","tag_id":"cjwppw0l60030f8cz3oc72wi6","_id":"cjwppw0la0036f8czpmkib5nx"},{"post_id":"cjwppw0jc000tf8cza0e2dq8r","tag_id":"cjwppw0l0002mf8cz46pgkr0j","_id":"cjwppw0lb0038f8czn9eobwoo"},{"post_id":"cjwppw0jc000tf8cza0e2dq8r","tag_id":"cjwppw0l80033f8cz5g69i8xh","_id":"cjwppw0lb0039f8cz0970uvap"},{"post_id":"cjwppw0jg000wf8czlim3ft6s","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0lc003bf8czefs5bzpm"},{"post_id":"cjwppw0jg000wf8czlim3ft6s","tag_id":"cjwppw0l90034f8czjiveevjm","_id":"cjwppw0ld003cf8czmu9ryjpa"},{"post_id":"cjwppw0jm0011f8cz5bry5bny","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0le003ef8czyvotb7qa"},{"post_id":"cjwppw0jm0011f8cz5bry5bny","tag_id":"cjwppw0kn0023f8cz1y77j2t2","_id":"cjwppw0le003ff8czv252hl49"},{"post_id":"cjwppw0jr0014f8czmztrjcna","tag_id":"cjwppw0lc003af8czdvdwdnfm","_id":"cjwppw0lf003hf8cz8af0reas"},{"post_id":"cjwppw0jr0014f8czmztrjcna","tag_id":"cjwppw0ld003df8czbzsznv6g","_id":"cjwppw0lg003if8czrxzlzcq6"},{"post_id":"cjwppw0jw0019f8czde5c6z1c","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwppw0lh003lf8czfwnho8tu"},{"post_id":"cjwppw0jw0019f8czde5c6z1c","tag_id":"cjwppw0le003gf8czrb6t80bm","_id":"cjwppw0li003mf8czgeqjfcpn"},{"post_id":"cjwppw0jw0019f8czde5c6z1c","tag_id":"cjwppw0l90034f8czjiveevjm","_id":"cjwppw0li003of8cz1cwyy21k"},{"post_id":"cjwppw0jz001bf8czu9ehlt77","tag_id":"cjwppw0lh003kf8cziw6yc19l","_id":"cjwppw0lj003qf8czlqgp0v7u"},{"post_id":"cjwppw0jz001bf8czu9ehlt77","tag_id":"cjwppw0li003nf8czhn5wqibm","_id":"cjwppw0lj003rf8cz8j17sqim"},{"post_id":"cjwppw0jz001bf8czu9ehlt77","tag_id":"cjwppw0lj003pf8czn0fxxj0c","_id":"cjwppw0lk003sf8cza7e0abob"},{"post_id":"cjwppw0j5000jf8cz8fzsssnp","tag_id":"cjwppw0it0005f8cz55dzkddy","_id":"cjwpqhv1m000ut4czveloh5ip"},{"post_id":"cjwppw0j5000jf8cz8fzsssnp","tag_id":"cjwppw0kz002jf8czy3z22zn9","_id":"cjwpqhv1n000vt4czm2m1kw6l"}],"Tag":[{"name":"前端开发","_id":"cjwppw0it0005f8cz55dzkddy"},{"name":"JavaScript","_id":"cjwppw0iy000bf8czu55fihgj"},{"name":"NPM","_id":"cjwppw0j3000gf8czz56v1h6r"},{"name":"NodeJs","_id":"cjwppw0j7000mf8czzlj09itn"},{"name":"JS时间处理","_id":"cjwppw0jv0018f8czegp99pt6"},{"name":"模块化","_id":"cjwppw0k4001ff8czp198nu7c"},{"name":"规范","_id":"cjwppw0k7001kf8czhctznpyt"},{"name":"JS","_id":"cjwppw0ka001of8cz7ghwf07t"},{"name":"ES6语法","_id":"cjwppw0kg001vf8czsade4jjo"},{"name":"翻译","_id":"cjwppw0kl0021f8czam02v3vk"},{"name":"Vue","_id":"cjwppw0kn0023f8cz1y77j2t2"},{"name":"Webpack3.10","_id":"cjwppw0kp0026f8cz4f4srhoy"},{"name":"语法","_id":"cjwppw0kr0029f8czkol01nen"},{"name":"vue","_id":"cjwppw0ku002df8czukzlb6p8"},{"name":"vuex","_id":"cjwppw0kw002gf8czmz4p2lns"},{"name":"Mac","_id":"cjwppw0kz002jf8czy3z22zn9"},{"name":"VSCode","_id":"cjwppw0l0002mf8cz46pgkr0j"},{"name":"ESLint","_id":"cjwppw0l1002pf8czrkbz3dr4"},{"name":"stylus","_id":"cjwppw0l1002rf8czx1olycdz"},{"name":"css","_id":"cjwppw0l2002uf8czl5oo03xc"},{"name":"系统底层","_id":"cjwppw0l4002xf8cz30jag015"},{"name":"Shell","_id":"cjwppw0l60030f8cz3oc72wi6"},{"name":"脚本操作","_id":"cjwppw0l80033f8cz5g69i8xh"},{"name":"Markdown","_id":"cjwppw0l90034f8czjiveevjm"},{"name":"windows","_id":"cjwppw0lc003af8czdvdwdnfm"},{"name":"linux","_id":"cjwppw0ld003df8czbzsznv6g"},{"name":"掘金","_id":"cjwppw0le003gf8czrb6t80bm"},{"name":"网络传输协议","_id":"cjwppw0lh003kf8cziw6yc19l"},{"name":"TCP/IP协议族","_id":"cjwppw0li003nf8czhn5wqibm"},{"name":"HTTP/HTTPS","_id":"cjwppw0lj003pf8czn0fxxj0c"}]}}