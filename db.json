{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/Wechat.jpeg","path":"images/Wechat.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.png","path":"images/alipay.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat.png","path":"images/wechat.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2015/09/keep-calm-and-learn-javascript.png","path":"assets/img/2015/09/keep-calm-and-learn-javascript.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2018/12/1.png","path":"assets/img/2018/12/1.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2018/12/20150424040700733.jpg","path":"assets/img/2018/12/20150424040700733.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2018/12/2.png","path":"assets/img/2018/12/2.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/05/1.jpg","path":"assets/img/2019/05/1.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2015/09/javascript-java.jpg","path":"assets/img/2015/09/javascript-java.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/1.png","path":"assets/img/2019/03/1.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/5.png","path":"assets/img/2019/03/5.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/2.png","path":"assets/img/2019/03/2.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/3.png","path":"assets/img/2019/03/3.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/6.png","path":"assets/img/2019/03/6.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2018/12/vue3.0.png","path":"assets/img/2018/12/vue3.0.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/7.gif","path":"assets/img/2019/03/7.gif","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/4.png","path":"assets/img/2019/03/4.png","modified":0,"renderable":1},{"_id":"themes/next/source/assets/img/2019/03/8.gif","path":"assets/img/2019/03/8.gif","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.DS_Store","hash":"b448e45eb3a7ee68c7e14ec0d10fdad105434d94","modified":1586273574555},{"_id":"source/CNAME","hash":"f662bb4520cc143f3bfd10d9aded79b859934562","modified":1543664196929},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1586189362088},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1586189362088},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1586189362091},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1586189362088},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1586189362091},{"_id":"themes/next/_config.yml","hash":"98cd90510b04bdf063e641e39cec58db8b9b753a","modified":1587113901935},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1586189362092},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1586189362091},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1586189362091},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1586189362091},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1586189362095},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1586189362107},{"_id":"source/_posts/2019年前端面试题整理.md","hash":"1174e55825a242c5362b687f9273e42f2a50390f","modified":1586572253395},{"_id":"source/_posts/DayJs.md","hash":"677834684b35605ca967003de748eaf11034ea2b","modified":1586270373067},{"_id":"source/_posts/ES6语法（一）.md","hash":"5ac143e0e34f3b01477cb443bd9d106d077399c7","modified":1586270377718},{"_id":"source/_posts/JavaScript的版本是怎么回事.md","hash":"bc1782561312955fd7436e1cbd8a8ea9b0da2947","modified":1586270389933},{"_id":"source/_posts/JavaScript-modules.md","hash":"d7ff00fa10f890e5fb34ff57ad49faee135cc09f","modified":1587113200399},{"_id":"source/_posts/NPM-Error.md","hash":"50a288251c04d2098deb42547ed3a48266b1108c","modified":1587113244321},{"_id":"source/_posts/Vue3.0.md","hash":"b4b5c81951e254dc1bd68f5946e827c956138392","modified":1586572341111},{"_id":"source/_posts/Vuex.md","hash":"fbca7ad67eb30450a39fdd46f9cfded45115e180","modified":1587113287308},{"_id":"source/_posts/Webpack.md","hash":"df8d1da2e17b541447a81a536145cfbd240fc356","modified":1586270428266},{"_id":"source/_posts/eslint-vscode-setting.md","hash":"1e7ed771952cc9fb0a99f3df01a12b4e5d589df3","modified":1586270381468},{"_id":"source/_posts/mac常用软件.md","hash":"b6c3c3a5b3fecf30fe81d1dc98aa8ecfae96b989","modified":1587113441272},{"_id":"source/_posts/shell脚本学习.md","hash":"1783e206ea9b8b599d2c3e87304d997beb569fce","modified":1586270402490},{"_id":"source/_posts/stylus语法笔记.md","hash":"19de5779ea90ddbc71709a2cae9954ed767c3c96","modified":1587113389194},{"_id":"source/_posts/vueqr-new.md","hash":"b45e35b46cc3511a4325830ab9c7efe32355d46e","modified":1586270419406},{"_id":"source/_posts/typora.md","hash":"3b270d7268c0c61abf9b09f0df612cd49fe3df54","modified":1586270408278},{"_id":"source/_posts/修改了SSH默认端口之后，如何配置git？.md","hash":"2b42b8896209643438f26de21a452bf3eb4ecbf5","modified":1586195557171},{"_id":"source/_posts/掘金文档编辑器使用方法.md","hash":"a34007f7de594dcf769e662e25705d891824b5f2","modified":1588170867151},{"_id":"source/_posts/命令行配置代理服务.md","hash":"0878cd0df83313127ad2a031a012a07315dd79de","modified":1587113223178},{"_id":"source/_posts/聊聊网络中的传输协议.md","hash":"7b42497e96739efcfe620e452ed098b7e906c8f9","modified":1586270360726},{"_id":"source/about/index.md","hash":"481189ad5170facecc0f2e59c103c5b5d7c3dc83","modified":1586572624977},{"_id":"source/categories/index.md","hash":"480996dafa11cc26f57cb8b5646be5e6560618d9","modified":1548159543995},{"_id":"source/tags/index.md","hash":"6beb3e3f3cadc3c4b0981047afeef2aca93279ab","modified":1548159543995},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1586189362089},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1586189362089},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1586189362090},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1586189362090},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1586189362090},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1586189362090},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1586189362090},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1586189362090},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1586189362090},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1586189362091},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1586189362091},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1586189362092},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1586189362093},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1586189362093},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1586189362093},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1586189362093},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1586189362093},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1586189362093},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1586189362093},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1586189362093},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1586189362096},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1586189362096},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1586189362096},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1586189362096},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1586189362096},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1586189362096},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1586189362096},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1586189362096},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1586189362096},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1586189362097},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1586189362097},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1586189362097},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1586189362097},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1586189362097},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1586189362097},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1586189362097},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1586189362097},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1586189362097},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1586189362098},{"_id":"themes/next/languages/zh-CN.yml","hash":"8fa59d144720529f5656fade7a98c68656a4ca8a","modified":1586191575202},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1586189362098},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1586189362098},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1586189362098},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1586189362107},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1586189362107},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1586189362107},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1586189362107},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1586189362107},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1586189362107},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1586189362110},{"_id":"themes/next/source/.DS_Store","hash":"b8e5951c497e1060bfccf7be197be3bad8cb1885","modified":1586272059023},{"_id":"themes/next/source/404.html","hash":"d6cd47ba4ab178269d9e7be773e521a3f74a738b","modified":1586193046934},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1586189362089},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1586189362089},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1586189362089},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1586189362090},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1586189362094},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1586189362094},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1586189362094},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1586189362094},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1586189362094},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1586189362094},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1586189362094},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1586189362095},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1586189362095},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1586189362095},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1586189362095},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1586189362095},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1586189362095},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1586189362098},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1586189362099},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1586189362098},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1586189362099},{"_id":"themes/next/layout/_partials/footer.swig","hash":"700c3e7bd449bce51f6faee42c052e13ed5f8b3e","modified":1586189362099},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1586189362100},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1586189362100},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1586189362102},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1586189362102},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1586189362102},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1586189362102},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1586189362103},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1586189362103},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1586189362104},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1586189362105},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1586189362105},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1586189362105},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1586189362107},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1586189362109},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1586189362109},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1586189362109},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1586189362109},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1586189362109},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1586189362109},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1586189362109},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1586189362110},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1586189362110},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1586189362110},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1586189362110},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1586189362110},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1586189362110},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1586189362110},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1586189362110},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1586189362111},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1586189362111},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1586189362111},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1586189362111},{"_id":"themes/next/source/assets/favicon.ico","hash":"ba0db0cdbb8c05d884e318e5bbcefe14189ddfd3","modified":1586191355788},{"_id":"themes/next/source/assets/loading.svg","hash":"9c9ea3adf8aa42fa526208bfd1dd6c1cf5de950c","modified":1586191355813},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1586189362111},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1586189362122},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1586189362126},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1586189362126},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1586189362126},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1586189362127},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1586189362127},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1586189362127},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1586189362127},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1586189362127},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1586189362127},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1586189362128},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1586189362128},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1586189362128},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1586189362128},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1586189362129},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1586189362126},{"_id":"themes/next/source/js/local-search.js","hash":"d6673063958127a03881dab2f0376a47f5e08a88","modified":1586189362129},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1586189362129},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1586189362129},{"_id":"themes/next/source/js/utils.js","hash":"91d174e12c61c332f3b06085d635c2b0f686a758","modified":1586189362130},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1586189362128},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1586189362130},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1586189362099},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1586189362099},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1586189362099},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1586189362099},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1586189362100},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1586189362100},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1586189362100},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1586189362100},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1586189362100},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1586189362101},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1586189362101},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1586189362101},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1586189362101},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1586189362101},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1586189362101},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1586189362101},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1586189362101},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1586189362102},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1586189362102},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1586189362102},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1586189362103},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1586189362103},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1586189362103},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1586189362103},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1586189362103},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1586189362103},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1586189362103},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1586189362104},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1586189362104},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1586189362104},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1586189362104},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1586189362104},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1586189362104},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1586189362104},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1586189362105},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1586189362105},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1586189362105},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1586189362105},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1586189362105},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1586189362105},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1586189362106},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1586189362106},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1586189362106},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1586189362106},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1586189362106},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1586189362106},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1586189362106},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1586189362106},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1586189362108},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1586189362108},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1586189362108},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1586189362108},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1586189362108},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1586189362108},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1586189362108},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1586189362108},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1586189362108},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1586189362109},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1586189362109},{"_id":"themes/next/source/assets/img/.DS_Store","hash":"8936cb368568b157b4a6d35ce52afc20e20d219d","modified":1586191355789},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1586189362125},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1586189362125},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1586189362126},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1586189362126},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1586189362125},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1586189362129},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1586189362129},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1586189362132},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1586189362132},{"_id":"themes/next/source/images/Wechat.jpeg","hash":"f47c8b0d422bdab8b51276265064cefb2c1ecd52","modified":1586272022480},{"_id":"themes/next/source/images/alipay.png","hash":"d803fac9f8cd9dd0c7925ce83ba211c720f92800","modified":1586271377802},{"_id":"themes/next/source/images/wechat.png","hash":"0f2e730dcd5bd77a9d409111efe74ad2f7056c33","modified":1586271367046},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1586189362112},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1586189362112},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1586189362112},{"_id":"themes/next/source/assets/img/2015/.DS_Store","hash":"45b57de0b2cd563b0e0b2225a030114d00555a40","modified":1586191355790},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1586189362115},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1586189362117},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1586189362117},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1586189362119},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1586189362119},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1586189362119},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1586189362120},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1586189362120},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1586189362120},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1586189362120},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1586189362122},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1586189362122},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1586189362123},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1586189362123},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1586189362123},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1586189362123},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1586189362123},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1586189362123},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1586189362124},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1586189362124},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1586189362124},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1586189362125},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1586189362124},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1586189362125},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1586189362125},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1586189362124},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1586189362124},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1586189362125},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1586189362124},{"_id":"themes/next/source/images/avatar.jpg","hash":"31f88e9f01cb534295db44a66f416f6db3661ed7","modified":1586191418280},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1586189362131},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1586189362130},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1586189362131},{"_id":"themes/next/source/assets/img/2015/09/keep-calm-and-learn-javascript.png","hash":"49ea101b92ce5e136a19e6b11162f8f4126fe01f","modified":1586191355794},{"_id":"themes/next/source/assets/img/2018/12/1.png","hash":"c0da87336253505de3e80efcf137f84438b232f7","modified":1586191355795},{"_id":"themes/next/source/assets/img/2018/12/20150424040700733.jpg","hash":"ed44fe3152e8e2841218b8346884b47eb96d5b6f","modified":1586191355797},{"_id":"themes/next/source/assets/img/2018/12/2.png","hash":"7b624b329a64bfc80597c2f8d4b19a0746462c15","modified":1586191355796},{"_id":"themes/next/source/assets/img/2019/05/1.jpg","hash":"cfc27ba2f7170215ba6c3a39882783a3a674a6fd","modified":1586191355812},{"_id":"themes/next/source/assets/img/2015/09/.DS_Store","hash":"86811996674711fd2464b420c32db03a7df217cc","modified":1586191355791},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1586189362112},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1586189362112},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1586189362112},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1586189362113},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1586189362113},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1586189362113},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1586189362113},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1586189362113},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1586189362114},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1586189362115},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1586189362115},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1586189362115},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1586189362115},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1586189362116},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1586189362116},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1586189362116},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1586189362116},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1586189362116},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1586189362116},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1586189362116},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1586189362117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1586189362117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1586189362117},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1586189362118},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1586189362115},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1586189362118},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1586189362118},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1586189362115},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1586189362118},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1586189362118},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1586189362118},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1586189362118},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1586189362118},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1586189362120},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1586189362120},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1586189362120},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1586189362120},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1586189362121},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1586189362121},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1586189362121},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1586189362121},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1586189362121},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1586189362121},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1586189362122},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1586189362132},{"_id":"themes/next/source/assets/img/2015/09/javascript-java.jpg","hash":"881e35e241a8be40f3c4e3a6f57d5402247c1eb3","modified":1586191355792},{"_id":"themes/next/source/assets/img/2019/03/1.png","hash":"d24107702e6ef2c76ff57544e3e68005427f79db","modified":1586191355801},{"_id":"themes/next/source/assets/img/2019/03/5.png","hash":"87f5fa5979fa9ac6b7668dde15a8673e2b07b18e","modified":1586191355805},{"_id":"themes/next/source/assets/img/2019/03/2.png","hash":"a432643b87906096f024dfdb112fd336752be04f","modified":1586191355802},{"_id":"themes/next/source/assets/img/2019/03/3.png","hash":"00ea669d02c56d205070273d58ca6e53aa916ac4","modified":1586191355803},{"_id":"themes/next/source/assets/img/2019/03/6.png","hash":"c7d4aafc9d12aa7ce157772647d9a32ffa0c8a16","modified":1586191355806},{"_id":"themes/next/source/assets/img/2018/12/vue3.0.png","hash":"f2c6dde342f8a0d79264d02937e323b80f0a81d9","modified":1586191355800},{"_id":"themes/next/source/assets/img/2019/03/7.gif","hash":"13e16c6955cd6261a95520df3e828c769b80ade1","modified":1586191355808},{"_id":"themes/next/source/assets/img/2019/03/4.png","hash":"b9a94d35ec9df94de01f4840fda2f901c2cc2580","modified":1586191355804},{"_id":"themes/next/source/assets/img/2019/03/8.gif","hash":"0e19db0df5a10a28d0be9201319f137d47515a3f","modified":1586191355811},{"_id":"source/_posts/使-SSH-config-文件.md","hash":"289f8285351077b10eff557ef2e5775d1c83482f","modified":1587113218506},{"_id":"source/_posts/SSH-简介.md","hash":"95fcbf84dd1a4dba1fd11e12494826da30f98806","modified":1587113252607},{"_id":"source/_posts/sourceTree-使用rebase操作.md","hash":"9138cb58af7e96fc7f0c17c990cb660a545cbb5b","modified":1591959729472},{"_id":"source/_posts/前端面试题整理.md","hash":"dae70d80973baf4ad753d2995b242879133eaad8","modified":1590487595491},{"_id":"source/_posts/创建SSH密钥对.md","hash":"0aff4fff61a74b557232264cdc2547227554833a","modified":1587113232009},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69dtpcenj30zk0fstbx.jpg","hash":"94a34089dbd012236a01e0e2cdae1ec40173dead","modified":1591959674176},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69b0529uj30sy0pg41h.jpg","hash":"3524618a354707a284edf3da5ab450a52ea35cd9","modified":1591959073667},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69bjs148j30t20v2ae7.jpg","hash":"1474032c435e2c9318a66f631d9d0958cb13120b","modified":1591959230669},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg","hash":"f54c195069c7819cb770153402c009f47c5264cf","modified":1591959306408},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg","hash":"e7dec8fad27679e837b04b6fa6684d1dbf3a74e4","modified":1591959323264},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg","hash":"3b43e585287a7c4a30e0f2e9dfecfd5e59099d01","modified":1591959572156},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg","hash":"a0e58d2f944b8bb1e6b987f258ac360af8fc0a46","modified":1591959588270},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg","hash":"7c9a7da0f610fd9ea6068447fbee374eb24bfd91","modified":1591959543895},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69doxd6zj30ym0h00vp.png","hash":"542f6fa06e677914fc1678164306c6a507f7aff1","modified":1591959655195}],"Category":[{"name":"前端面试","_id":"ck8q1pzxy0002bhc331ob97j7"},{"name":"JavaScript","_id":"ck8q1pzy30007bhc3bu4pexqt"},{"name":"Vue","_id":"ck8q1pzyd000vbhc38rfh5i89"},{"name":"Mac","_id":"ck8q1pzyl0017bhc3es6n2nqp"},{"name":"系统命令","_id":"ck8q1pzyn001ebhc3a0a64pi4"},{"name":"软件工具","_id":"ck8q1pzyo001kbhc3ap9k2ujh"},{"name":"git操作","_id":"ck8q1pzyp001qbhc38qhz8i4a"},{"name":"网站应用","_id":"ck8q1pzyp001tbhc37wtoc6sz"},{"name":"系统","_id":"ck8q1pzyq001xbhc3hbo69ld4"},{"name":"网络传输协议","_id":"ck8q1pzyr0022bhc351ffbbwp"},{"name":"SSH","_id":"ckbc2dr3p0002cjc3b1ng179r"},{"name":"前端开发","_id":"ckbc2xrbo000kcjc39rojbfcw"}],"Data":[],"Page":[{"title":"自我介绍","layout":"about","_content":"\n# 自我介绍\n\n- 可以喊我圣痕或者Mark，至于圣痕这个花名，貌似是随大流取并没什么特别含义，仅仅觉得好玩！\n\n# 目前折腾的东西\n\n> Da前端方面\n\n- Vue 全家桶（移动、pc均涉及）\n- Weex\n- Flutter\n- Angular 全家桶（主要偏pc端）\n- React（接触过一点点，学习中）\n- 微信小程序（学习中）\n- Node\n- ios（调试会那么点）\n\n> 后端方面吧！\n\n- NodeJS\n- Python\n- mysql(会点简单的sql语句)\n\n> 其他\n\n- 持续集成，自动化部署\n- linux 操作等\n\n# 联系方式\n\n- 首页好像有就不留了！\n","source":"about/index.md","raw":"---\ntitle: 自我介绍\nlayout: about\n---\n\n# 自我介绍\n\n- 可以喊我圣痕或者Mark，至于圣痕这个花名，貌似是随大流取并没什么特别含义，仅仅觉得好玩！\n\n# 目前折腾的东西\n\n> Da前端方面\n\n- Vue 全家桶（移动、pc均涉及）\n- Weex\n- Flutter\n- Angular 全家桶（主要偏pc端）\n- React（接触过一点点，学习中）\n- 微信小程序（学习中）\n- Node\n- ios（调试会那么点）\n\n> 后端方面吧！\n\n- NodeJS\n- Python\n- mysql(会点简单的sql语句)\n\n> 其他\n\n- 持续集成，自动化部署\n- linux 操作等\n\n# 联系方式\n\n- 首页好像有就不留了！\n","date":"2020-04-11T02:37:04.977Z","updated":"2020-04-11T02:37:04.977Z","path":"about/index.html","_id":"ck8q1q0020046bhc3ej470z59","comments":1,"content":"<h1 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h1><ul>\n<li>可以喊我圣痕或者Mark，至于圣痕这个花名，貌似是随大流取并没什么特别含义，仅仅觉得好玩！</li>\n</ul>\n<h1 id=\"目前折腾的东西\"><a href=\"#目前折腾的东西\" class=\"headerlink\" title=\"目前折腾的东西\"></a>目前折腾的东西</h1><blockquote>\n<p>Da前端方面</p>\n</blockquote>\n<ul>\n<li>Vue 全家桶（移动、pc均涉及）</li>\n<li>Weex</li>\n<li>Flutter</li>\n<li>Angular 全家桶（主要偏pc端）</li>\n<li>React（接触过一点点，学习中）</li>\n<li>微信小程序（学习中）</li>\n<li>Node</li>\n<li>ios（调试会那么点）</li>\n</ul>\n<blockquote>\n<p>后端方面吧！</p>\n</blockquote>\n<ul>\n<li>NodeJS</li>\n<li>Python</li>\n<li>mysql(会点简单的sql语句)</li>\n</ul>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<ul>\n<li>持续集成，自动化部署</li>\n<li>linux 操作等</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>首页好像有就不留了！</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h1><ul>\n<li>可以喊我圣痕或者Mark，至于圣痕这个花名，貌似是随大流取并没什么特别含义，仅仅觉得好玩！</li>\n</ul>\n<h1 id=\"目前折腾的东西\"><a href=\"#目前折腾的东西\" class=\"headerlink\" title=\"目前折腾的东西\"></a>目前折腾的东西</h1><blockquote>\n<p>Da前端方面</p>\n</blockquote>\n<ul>\n<li>Vue 全家桶（移动、pc均涉及）</li>\n<li>Weex</li>\n<li>Flutter</li>\n<li>Angular 全家桶（主要偏pc端）</li>\n<li>React（接触过一点点，学习中）</li>\n<li>微信小程序（学习中）</li>\n<li>Node</li>\n<li>ios（调试会那么点）</li>\n</ul>\n<blockquote>\n<p>后端方面吧！</p>\n</blockquote>\n<ul>\n<li>NodeJS</li>\n<li>Python</li>\n<li>mysql(会点简单的sql语句)</li>\n</ul>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<ul>\n<li>持续集成，自动化部署</li>\n<li>linux 操作等</li>\n</ul>\n<h1 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h1><ul>\n<li>首页好像有就不留了！</li>\n</ul>\n"},{"date":"2014-12-22T04:39:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ndate: 2014-12-22 12:39:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-01-22T12:19:03.995Z","path":"categories/index.html","title":"","layout":"page","_id":"ck8q1q0030047bhc36l3raj0l","content":"","site":{"data":{}},"excerpt":"","more":""},{"type":"tags","layout":"tags","date":"2014-12-22T04:39:04.000Z","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntype: tags\nlayout: \"tags\"\ndate: 2014-12-22 12:39:04\ncomments: false\n---\n","updated":"2019-01-22T12:19:03.995Z","path":"tags/index.html","title":"","_id":"ck8q1q0050048bhc349cj218u","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"post","title":"DayJs使用","subtitle":"eslint-vscode-setting","date":"2018-11-29T16:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","top":1,"_content":"\n<p align=\"center\">\n\t<a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t<img width=\"550\" src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\">\n\t</a>\n</p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<!-- more -->\n<br>\n<p align=\"center\">\n\t<a href=\"https://unpkg.com/dayjs/dayjs.min.js\">\n\t\t<img\n\t\t\tsrc=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n\t\t\talt=\"Gzip Size\">\n\t</a>\n\t<a href=\"https://www.npmjs.com/package/dayjs\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a>\n\t<a href=\"https://travis-ci.org/iamkun/dayjs\">\n\t\t<img src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\">\n\t</a>\n\t<a href=\"https://codecov.io/gh/iamkun/dayjs\">\n\t\t<img src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\">\n\t</a>\n\t<a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\">\n\t\t<img src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n\t<br>\n\t<a href=\"https://saucelabs.com/u/dayjs\">\n\t\t<img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n\t</a>\n</p>\n\n> Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js\n\n```js\ndayjs()\n  .startOf(\"month\")\n  .add(1, \"day\")\n  .set(\"year\", 2018)\n  .format(\"YYYY-MM-DD HH:mm:ss\");\n```\n\n- 🕒 和 Moment.js 相同的 API 和用法\n- 💪 不可变数据 (Immutable)\n- 🔥 支持链式操作 (Chainable)\n- 🌐 国际化 I18n\n- 📦 仅 2kb 大小的微型库\n- 👫 全浏览器兼容\n\n---\n\n## 快速开始\n\n### 安装\n\n```console\nnpm install dayjs --save\n```\n\n📚[安装指南](./Installation.md)\n\n### API\n\nDay.js 有很多 API 来解析、处理、校验、增减、展示时间和日期\n\n```javascript\ndayjs(\"2018-08-08\"); // 解析\n\ndayjs().format(\"{YYYY} MM-DDTHH:mm:ss SSS [Z] A\"); // 展示\n\ndayjs()\n  .set(\"month\", 3)\n  .month(); // 获取\n\ndayjs().add(1, \"year\"); // 处理\n\ndayjs().isBefore(dayjs()); // 查询\n```\n\n📚[API 参考](./API-reference.md)\n\n### 国际化 I18n\n\nDay.js 支持国际化\n\n但除非手动加载，多国语言默认是不会被打包到工程里的\n\n```javascript\nimport \"dayjs/locale/es\"; // 按需加载\n\ndayjs.locale(\"es\"); // 全局使用西班牙语\n\ndayjs(\"2018-05-05\")\n  .locale(\"zh-cn\")\n  .format(); // 在这个实例上使用简体中文\n```\n\n📚[国际化 I18n](./I18n.md)\n\n### 插件\n\n插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能\n\n```javascript\nimport advancedFormat from \"dayjs/plugin/advancedFormat\"; // 按需加载插件\n\ndayjs.extend(advancedFormat); // 使用插件\n\ndayjs().format(\"Q Do k kk X x\"); // 使用扩展后的API\n```\n\n📚[插件列表](./Plugin.md)\n\n## 开源协议\n\nDay.js 遵循 [MIT 开源协议](../../LICENSE).\n","source":"_posts/DayJs.md","raw":"---\nlayout: post\ntitle: \"DayJs使用\"\nsubtitle: \"eslint-vscode-setting\"\ndate: 2018-11-30\nauthor: \"Mark\"\nheader-img: \"img/post-bg-js-version.jpg\"\ncategories: JavaScript #分类\ntop: 1\ntags:\n  - 前端开发\n  - JavaScript\n  - JS时间处理\n---\n\n<p align=\"center\">\n\t<a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n\t\t<img width=\"550\" src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\">\n\t</a>\n</p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<!-- more -->\n<br>\n<p align=\"center\">\n\t<a href=\"https://unpkg.com/dayjs/dayjs.min.js\">\n\t\t<img\n\t\t\tsrc=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n\t\t\talt=\"Gzip Size\">\n\t</a>\n\t<a href=\"https://www.npmjs.com/package/dayjs\"><img src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a>\n\t<a href=\"https://travis-ci.org/iamkun/dayjs\">\n\t\t<img src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\">\n\t</a>\n\t<a href=\"https://codecov.io/gh/iamkun/dayjs\">\n\t\t<img src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\">\n\t</a>\n\t<a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\">\n\t\t<img src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n\t<br>\n\t<a href=\"https://saucelabs.com/u/dayjs\">\n\t\t<img width=\"750\" src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n\t</a>\n</p>\n\n> Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js\n\n```js\ndayjs()\n  .startOf(\"month\")\n  .add(1, \"day\")\n  .set(\"year\", 2018)\n  .format(\"YYYY-MM-DD HH:mm:ss\");\n```\n\n- 🕒 和 Moment.js 相同的 API 和用法\n- 💪 不可变数据 (Immutable)\n- 🔥 支持链式操作 (Chainable)\n- 🌐 国际化 I18n\n- 📦 仅 2kb 大小的微型库\n- 👫 全浏览器兼容\n\n---\n\n## 快速开始\n\n### 安装\n\n```console\nnpm install dayjs --save\n```\n\n📚[安装指南](./Installation.md)\n\n### API\n\nDay.js 有很多 API 来解析、处理、校验、增减、展示时间和日期\n\n```javascript\ndayjs(\"2018-08-08\"); // 解析\n\ndayjs().format(\"{YYYY} MM-DDTHH:mm:ss SSS [Z] A\"); // 展示\n\ndayjs()\n  .set(\"month\", 3)\n  .month(); // 获取\n\ndayjs().add(1, \"year\"); // 处理\n\ndayjs().isBefore(dayjs()); // 查询\n```\n\n📚[API 参考](./API-reference.md)\n\n### 国际化 I18n\n\nDay.js 支持国际化\n\n但除非手动加载，多国语言默认是不会被打包到工程里的\n\n```javascript\nimport \"dayjs/locale/es\"; // 按需加载\n\ndayjs.locale(\"es\"); // 全局使用西班牙语\n\ndayjs(\"2018-05-05\")\n  .locale(\"zh-cn\")\n  .format(); // 在这个实例上使用简体中文\n```\n\n📚[国际化 I18n](./I18n.md)\n\n### 插件\n\n插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能\n\n```javascript\nimport advancedFormat from \"dayjs/plugin/advancedFormat\"; // 按需加载插件\n\ndayjs.extend(advancedFormat); // 使用插件\n\ndayjs().format(\"Q Do k kk X x\"); // 使用扩展后的API\n```\n\n📚[插件列表](./Plugin.md)\n\n## 开源协议\n\nDay.js 遵循 [MIT 开源协议](../../LICENSE).\n","slug":"DayJs","published":1,"updated":"2020-04-07T14:39:33.067Z","comments":1,"photos":[],"link":"","_id":"ck8q1pzxx0001bhc38zy583bz","content":"<p align=\"center\">\n    <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img width=\"550\" data-src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\">\n    </a>\n</p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>\n<a id=\"more\"></a>\n<br>\n<p align=\"center\">\n    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\" target=\"_blank\" rel=\"noopener\">\n        <img\n            data-src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n            alt=\"Gzip Size\">\n    </a>\n    <a href=\"https://www.npmjs.com/package/dayjs\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a>\n    <a href=\"https://travis-ci.org/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\">\n    </a>\n    <a href=\"https://codecov.io/gh/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\">\n    </a>\n    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n    <br>\n    <a href=\"https://saucelabs.com/u/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img width=\"750\" data-src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n    </a>\n</p>\n\n<blockquote>\n<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs()</span><br><span class=\"line\">  .startOf(<span class=\"string\">\"month\"</span>)</span><br><span class=\"line\">  .add(<span class=\"number\">1</span>, <span class=\"string\">\"day\"</span>)</span><br><span class=\"line\">  .set(<span class=\"string\">\"year\"</span>, <span class=\"number\">2018</span>)</span><br><span class=\"line\">  .format(<span class=\"string\">\"YYYY-MM-DD HH:mm:ss\"</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>🕒 和 Moment.js 相同的 API 和用法</li>\n<li>💪 不可变数据 (Immutable)</li>\n<li>🔥 支持链式操作 (Chainable)</li>\n<li>🌐 国际化 I18n</li>\n<li>📦 仅 2kb 大小的微型库</li>\n<li>👫 全浏览器兼容</li>\n</ul>\n<hr>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install dayjs --save</span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./Installation.md\">安装指南</a></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs(<span class=\"string\">\"2018-08-08\"</span>); <span class=\"comment\">// 解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A\"</span>); <span class=\"comment\">// 展示</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs()</span><br><span class=\"line\">  .set(<span class=\"string\">\"month\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  .month(); <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().add(<span class=\"number\">1</span>, <span class=\"string\">\"year\"</span>); <span class=\"comment\">// 处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().isBefore(dayjs()); <span class=\"comment\">// 查询</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./API-reference.md\">API 参考</a></p>\n<h3 id=\"国际化-I18n\"><a href=\"#国际化-I18n\" class=\"headerlink\" title=\"国际化 I18n\"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>\n<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"dayjs/locale/es\"</span>; <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.locale(<span class=\"string\">\"es\"</span>); <span class=\"comment\">// 全局使用西班牙语</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs(<span class=\"string\">\"2018-05-05\"</span>)</span><br><span class=\"line\">  .locale(<span class=\"string\">\"zh-cn\"</span>)</span><br><span class=\"line\">  .format(); <span class=\"comment\">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./I18n.md\">国际化 I18n</a></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> advancedFormat <span class=\"keyword\">from</span> <span class=\"string\">\"dayjs/plugin/advancedFormat\"</span>; <span class=\"comment\">// 按需加载插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.extend(advancedFormat); <span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"Q Do k kk X x\"</span>); <span class=\"comment\">// 使用扩展后的API</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./Plugin.md\">插件列表</a></p>\n<h2 id=\"开源协议\"><a href=\"#开源协议\" class=\"headerlink\" title=\"开源协议\"></a>开源协议</h2><p>Day.js 遵循 <a href=\"../../LICENSE\">MIT 开源协议</a>.</p>\n","site":{"data":{}},"excerpt":"<p align=\"center\">\n    <a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <img width=\"550\" data-src=\"https://user-images.githubusercontent.com/17680888/39081119-3057bbe2-456e-11e8-862c-646133ad4b43.png\" alt=\"Day.js\">\n    </a>\n</p>\n<p align=\"center\">Moment.js 的 <b>2kB</b> 轻量化方案，拥有同样强大的 API</p>","more":"<br>\n<p align=\"center\">\n    <a href=\"https://unpkg.com/dayjs/dayjs.min.js\" target=\"_blank\" rel=\"noopener\">\n        <img\n            data-src=\"http://img.badgesize.io/https://unpkg.com/dayjs/dayjs.min.js?compression=gzip&style=flat-square\"\n            alt=\"Gzip Size\">\n    </a>\n    <a href=\"https://www.npmjs.com/package/dayjs\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/v/dayjs.svg?style=flat-square\" alt=\"NPM Version\"></a>\n    <a href=\"https://travis-ci.org/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/travis/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Build Status\">\n    </a>\n    <a href=\"https://codecov.io/gh/iamkun/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/codecov/c/github/iamkun/dayjs/master.svg?style=flat-square\" alt=\"Codecov\">\n    </a>\n    <a href=\"https://github.com/iamkun/dayjs/blob/master/LICENSE\" target=\"_blank\" rel=\"noopener\">\n        <img data-src=\"https://img.shields.io/npm/l/dayjs.svg?style=flat-square\" alt=\"License\"></a>\n    <br>\n    <a href=\"https://saucelabs.com/u/dayjs\" target=\"_blank\" rel=\"noopener\">\n        <img width=\"750\" data-src=\"https://user-images.githubusercontent.com/17680888/40040137-8e3323a6-584b-11e8-9dba-bbe577ee8a7b.png\" alt=\"Sauce Test Status\">\n    </a>\n</p>\n\n<blockquote>\n<p>Day.js 是一个轻量的处理时间和日期的 JavaScript 库，和 Moment.js 的 API 设计保持完全一样. 如果您曾经用过 Moment.js, 那么您已经知道如何使用 Day.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs()</span><br><span class=\"line\">  .startOf(<span class=\"string\">\"month\"</span>)</span><br><span class=\"line\">  .add(<span class=\"number\">1</span>, <span class=\"string\">\"day\"</span>)</span><br><span class=\"line\">  .set(<span class=\"string\">\"year\"</span>, <span class=\"number\">2018</span>)</span><br><span class=\"line\">  .format(<span class=\"string\">\"YYYY-MM-DD HH:mm:ss\"</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>🕒 和 Moment.js 相同的 API 和用法</li>\n<li>💪 不可变数据 (Immutable)</li>\n<li>🔥 支持链式操作 (Chainable)</li>\n<li>🌐 国际化 I18n</li>\n<li>📦 仅 2kb 大小的微型库</li>\n<li>👫 全浏览器兼容</li>\n</ul>\n<hr>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install dayjs --save</span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./Installation.md\">安装指南</a></p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><p>Day.js 有很多 API 来解析、处理、校验、增减、展示时间和日期</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dayjs(<span class=\"string\">\"2018-08-08\"</span>); <span class=\"comment\">// 解析</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"&#123;YYYY&#125; MM-DDTHH:mm:ss SSS [Z] A\"</span>); <span class=\"comment\">// 展示</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs()</span><br><span class=\"line\">  .set(<span class=\"string\">\"month\"</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  .month(); <span class=\"comment\">// 获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().add(<span class=\"number\">1</span>, <span class=\"string\">\"year\"</span>); <span class=\"comment\">// 处理</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().isBefore(dayjs()); <span class=\"comment\">// 查询</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./API-reference.md\">API 参考</a></p>\n<h3 id=\"国际化-I18n\"><a href=\"#国际化-I18n\" class=\"headerlink\" title=\"国际化 I18n\"></a>国际化 I18n</h3><p>Day.js 支持国际化</p>\n<p>但除非手动加载，多国语言默认是不会被打包到工程里的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"dayjs/locale/es\"</span>; <span class=\"comment\">// 按需加载</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.locale(<span class=\"string\">\"es\"</span>); <span class=\"comment\">// 全局使用西班牙语</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs(<span class=\"string\">\"2018-05-05\"</span>)</span><br><span class=\"line\">  .locale(<span class=\"string\">\"zh-cn\"</span>)</span><br><span class=\"line\">  .format(); <span class=\"comment\">// 在这个实例上使用简体中文</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./I18n.md\">国际化 I18n</a></p>\n<h3 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h3><p>插件是一些独立的程序，可以给 Day.js 增加新功能和扩展已有功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> advancedFormat <span class=\"keyword\">from</span> <span class=\"string\">\"dayjs/plugin/advancedFormat\"</span>; <span class=\"comment\">// 按需加载插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs.extend(advancedFormat); <span class=\"comment\">// 使用插件</span></span><br><span class=\"line\"></span><br><span class=\"line\">dayjs().format(<span class=\"string\">\"Q Do k kk X x\"</span>); <span class=\"comment\">// 使用扩展后的API</span></span><br></pre></td></tr></table></figure>\n\n<p>📚<a href=\"./Plugin.md\">插件列表</a></p>\n<h2 id=\"开源协议\"><a href=\"#开源协议\" class=\"headerlink\" title=\"开源协议\"></a>开源协议</h2><p>Day.js 遵循 <a href=\"../../LICENSE\">MIT 开源协议</a>.</p>"},{"layout":"post","title":"ES5, ES6, ES2016, ES.Next: JavaScript的版本是怎么回事？「译」","subtitle":"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?","date":"2015-09-21T16:00:00.000Z","author":"Hux","header-img":"img/post-bg-js-version.jpg","top":4,"_content":"\nJavaScript 有着很奇怪的命名史。\n\n1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript _（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）_\n<!-- more -->\n![java-javascript](/assets/img/2015/09/javascript-java.jpg)\n<small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small>\n\n> 译者注：[wikipedia 的 JavaScript 词条](https://en.wikipedia.org/wiki/JavaScript#History) 更详细的叙述了这段历史\n\n1996 年，网景将 JavaScript 提交给 [ECMA International（欧洲计算机制造商协会）](http://www.ecma-international.org/) 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。\n\n> 术语（译者注）：\n>\n> - _标准（Standard）_： 用于定义与其他事物区别的一套规则\n> - _实现（Implementation）_： 某个标准的具体实施/真实实践\n\n不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。\n\n> 译者注：[ECMAScript 第四版草案](https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29)由于太过激进而被抛弃，Adobe 的 [ActionScript 3.0](https://en.wikipedia.org/wiki/ActionScript) 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）\n\n到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）\n\n目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 [decorators（装饰者）](https://github.com/wycats/javascript-decorators)，[async-await（async-await 异步编程模型）](https://github.com/lukehoban/ecmascript-asyncawait) 和 [static class properties（静态类属性）](https://github.com/jeffmo/es-class-properties)。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 [Babel 的官网](https://babeljs.io/docs/usage/experimental/) 上查看各个提案目前都在哪个阶段了。\n\n所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：\n\n- **ECMAScript**：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。\n- **JavaScript**：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。\n- **ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。\n- **ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅[这张兼容性表](http://kangax.github.io/compat-table/es6/)来查看不同浏览器和工具的实现情况。\n- **ECMAScript 2016**：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定\n- **ECMAScript Proposals**：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。\n\n在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。\n\n#### 一些资源\n\n- TC39 的 [Github 仓库](https://github.com/tc39/ecma262)上可以看到所有目前公开的提案\n- 如果你还不熟悉 ES6，Babel 有一个[很不错的特性概览](https://babeljs.io/docs/learn-es2015/)\n- 如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 [Exploring ES6](http://exploringjs.com/)和 Nicholas Zakas 的 [Understanding ECMAScript 6](https://leanpub.com/understandinges6)。Axel 的博客 [2ality](http://www.2ality.com/) 也是很不错的 ES6 资源\n\n<img class=\"shadow\" width=\"320\" src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n#### 著作权声明\n\n本文译自 [ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?](http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/)\n译者 [黄玄](http://weibo.com/huxpro)，首次发布于 [Hux Blog](http://huangxuan.me)，转载请保留以上链接\n","source":"_posts/JavaScript的版本是怎么回事.md","raw":"---\nlayout: post\ntitle: 'ES5, ES6, ES2016, ES.Next: JavaScript的版本是怎么回事？「译」'\nsubtitle: \"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?\"\ndate: 2015-09-22\nauthor: 'Hux'\nheader-img: 'img/post-bg-js-version.jpg'\ncategories: JavaScript #分类\ntop: 4\ntags:\n  - 前端开发\n  - JavaScript\n  - 翻译\n---\n\nJavaScript 有着很奇怪的命名史。\n\n1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript _（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）_\n<!-- more -->\n![java-javascript](/assets/img/2015/09/javascript-java.jpg)\n<small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small>\n\n> 译者注：[wikipedia 的 JavaScript 词条](https://en.wikipedia.org/wiki/JavaScript#History) 更详细的叙述了这段历史\n\n1996 年，网景将 JavaScript 提交给 [ECMA International（欧洲计算机制造商协会）](http://www.ecma-international.org/) 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。\n\n> 术语（译者注）：\n>\n> - _标准（Standard）_： 用于定义与其他事物区别的一套规则\n> - _实现（Implementation）_： 某个标准的具体实施/真实实践\n\n不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。\n\n> 译者注：[ECMAScript 第四版草案](https://en.wikipedia.org/wiki/ECMAScript#4th_Edition_.28abandoned.29)由于太过激进而被抛弃，Adobe 的 [ActionScript 3.0](https://en.wikipedia.org/wiki/ActionScript) 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）\n\n到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）\n\n目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 [decorators（装饰者）](https://github.com/wycats/javascript-decorators)，[async-await（async-await 异步编程模型）](https://github.com/lukehoban/ecmascript-asyncawait) 和 [static class properties（静态类属性）](https://github.com/jeffmo/es-class-properties)。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 [Babel 的官网](https://babeljs.io/docs/usage/experimental/) 上查看各个提案目前都在哪个阶段了。\n\n所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：\n\n- **ECMAScript**：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。\n- **JavaScript**：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。\n- **ECMAScript 5 (ES5)**：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。\n- **ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)**：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅[这张兼容性表](http://kangax.github.io/compat-table/es6/)来查看不同浏览器和工具的实现情况。\n- **ECMAScript 2016**：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定\n- **ECMAScript Proposals**：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。\n\n在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。\n\n#### 一些资源\n\n- TC39 的 [Github 仓库](https://github.com/tc39/ecma262)上可以看到所有目前公开的提案\n- 如果你还不熟悉 ES6，Babel 有一个[很不错的特性概览](https://babeljs.io/docs/learn-es2015/)\n- 如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 [Exploring ES6](http://exploringjs.com/)和 Nicholas Zakas 的 [Understanding ECMAScript 6](https://leanpub.com/understandinges6)。Axel 的博客 [2ality](http://www.2ality.com/) 也是很不错的 ES6 资源\n\n<img class=\"shadow\" width=\"320\" src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n#### 著作权声明\n\n本文译自 [ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?](http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/)\n译者 [黄玄](http://weibo.com/huxpro)，首次发布于 [Hux Blog](http://huangxuan.me)，转载请保留以上链接\n","slug":"JavaScript的版本是怎么回事","published":1,"updated":"2020-04-07T14:39:49.933Z","comments":1,"photos":[],"link":"","_id":"ck8q1pzy00004bhc3gshk1jox","content":"<p>JavaScript 有着很奇怪的命名史。</p>\n<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>\n<a id=\"more\"></a>\n<p><img data-src=\"/assets/img/2015/09/javascript-java.jpg\" alt=\"java-javascript\"><br><small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small></p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmF2YVNjcmlwdCNIaXN0b3J5\">wikipedia 的 JavaScript 词条<i class=\"fa fa-external-link-alt\"></i></span> 更详细的叙述了这段历史</p>\n</blockquote>\n<p>1996 年，网景将 JavaScript 提交给 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnLw==\">ECMA International（欧洲计算机制造商协会）<i class=\"fa fa-external-link-alt\"></i></span> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>\n<blockquote>\n<p>术语（译者注）：</p>\n<ul>\n<li>_标准（Standard）_： 用于定义与其他事物区别的一套规则</li>\n<li>_实现（Implementation）_： 某个标准的具体实施/真实实践</li>\n</ul>\n</blockquote>\n<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRUNNQVNjcmlwdCM0dGhfRWRpdGlvbl8uMjhhYmFuZG9uZWQuMjk=\">ECMAScript 第四版草案<i class=\"fa fa-external-link-alt\"></i></span>由于太过激进而被抛弃，Adobe 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWN0aW9uU2NyaXB0\">ActionScript 3.0<i class=\"fa fa-external-link-alt\"></i></span> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>\n</blockquote>\n<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>\n<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9qYXZhc2NyaXB0LWRlY29yYXRvcnM=\">decorators（装饰者）<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2x1a2Vob2Jhbi9lY21hc2NyaXB0LWFzeW5jYXdhaXQ=\">async-await（async-await 异步编程模型）<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZmZtby9lcy1jbGFzcy1wcm9wZXJ0aWVz\">static class properties（静态类属性）<i class=\"fa fa-external-link-alt\"></i></span>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvdXNhZ2UvZXhwZXJpbWVudGFsLw==\">Babel 的官网<i class=\"fa fa-external-link-alt\"></i></span> 上查看各个提案目前都在哪个阶段了。</p>\n<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>\n<ul>\n<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>\n<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>\n<li><strong>ECMAScript 5 (ES5)</strong>：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>\n<li><strong>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)</strong>：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<span class=\"exturl\" data-url=\"aHR0cDovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8=\">这张兼容性表<i class=\"fa fa-external-link-alt\"></i></span>来查看不同浏览器和工具的实现情况。</li>\n<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>\n<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>\n</ul>\n<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>\n<h4 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h4><ul>\n<li>TC39 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mg==\">Github 仓库<i class=\"fa fa-external-link-alt\"></i></span>上可以看到所有目前公开的提案</li>\n<li>如果你还不熟悉 ES6，Babel 有一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvbGVhcm4tZXMyMDE1Lw==\">很不错的特性概览<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <span class=\"exturl\" data-url=\"aHR0cDovL2V4cGxvcmluZ2pzLmNvbS8=\">Exploring ES6<i class=\"fa fa-external-link-alt\"></i></span>和 Nicholas Zakas 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFucHViLmNvbS91bmRlcnN0YW5kaW5nZXM2\">Understanding ECMAScript 6<i class=\"fa fa-external-link-alt\"></i></span>。Axel 的博客 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4yYWxpdHkuY29tLw==\">2ality<i class=\"fa fa-external-link-alt\"></i></span> 也是很不错的 ES6 资源</li>\n</ul>\n<img class=\"shadow\" width=\"320\" data-src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n<h4 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h4><p>本文译自 <span class=\"exturl\" data-url=\"aHR0cDovL2Jlbm1jY29ybWljay5vcmcvMjAxNS8wOS8xNC9lczUtZXM2LWVzMjAxNi1lcy1uZXh0LXdoYXRzLWdvaW5nLW9uLXdpdGgtamF2YXNjcmlwdC12ZXJzaW9uaW5nLw==\">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?<i class=\"fa fa-external-link-alt\"></i></span><br>译者 <span class=\"exturl\" data-url=\"aHR0cDovL3dlaWJvLmNvbS9odXhwcm8=\">黄玄<i class=\"fa fa-external-link-alt\"></i></span>，首次发布于 <span class=\"exturl\" data-url=\"aHR0cDovL2h1YW5neHVhbi5tZQ==\">Hux Blog<i class=\"fa fa-external-link-alt\"></i></span>，转载请保留以上链接</p>\n","site":{"data":{}},"excerpt":"<p>JavaScript 有着很奇怪的命名史。</p>\n<p>1995 年，它作为网景浏览器（Netscape Navigator）的一部分首次发布，网景给这个新语言命名为 LiveScript。一年后，为了搭上当时媒体热炒 Java 的顺风车，临时改名为了 JavaScript <em>（当然，Java 和 JavaScript 的关系，就和雷锋和雷锋塔一样 —— 并没有什么关系）</em></p>","more":"<p><img data-src=\"/assets/img/2015/09/javascript-java.jpg\" alt=\"java-javascript\"><br><small class=\"img-hint\">歪果仁的笑话怎么一点都不好笑</small></p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSmF2YVNjcmlwdCNIaXN0b3J5\">wikipedia 的 JavaScript 词条<i class=\"fa fa-external-link-alt\"></i></span> 更详细的叙述了这段历史</p>\n</blockquote>\n<p>1996 年，网景将 JavaScript 提交给 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnLw==\">ECMA International（欧洲计算机制造商协会）<i class=\"fa fa-external-link-alt\"></i></span> 进行标准化，并最终确定出新的语言标准，它就是 ECMAScript。自此，ECMAScript 成为所有 JavaScript 实现的基础，不过，由于 JavaScript 名字的历史原因和市场原因（很显然 ECMAScript 这个名字并不令人喜欢……），现实中我们只用 ECMAScript 称呼标准，平时都还是使用 JavaScript 来称呼这个语言。</p>\n<blockquote>\n<p>术语（译者注）：</p>\n<ul>\n<li>_标准（Standard）_： 用于定义与其他事物区别的一套规则</li>\n<li>_实现（Implementation）_： 某个标准的具体实施/真实实践</li>\n</ul>\n</blockquote>\n<p>不过，JavaScript 开发者们并不怎么在乎这些，因为在诞生之后的 15 年里，ECMAScript 并没有多少变化，而且现实中的很多实现都已经和标准大相径庭。其实在第一版的 ECMAScript 发布后，很快又跟进发布了两个版本，但是自从 1999 年 ECMAScript 3 发布后，十年内都没有任何改动被成功添加到官方规范里。取而代之的，是各大浏览器厂商们争先进行自己的语言拓展，web 开发者们别无选择只能去尝试并且支持这些 API。即使是在 2009 年 ECMAScript 5 发布之后，仍然用了数年这些新规范才得到了浏览器的广泛支持，可是大部分开发者还是写着 ECMAScript 3 风格的代码，并不觉得有必要去了解这些规范。</p>\n<blockquote>\n<p>译者注：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRUNNQVNjcmlwdCM0dGhfRWRpdGlvbl8uMjhhYmFuZG9uZWQuMjk=\">ECMAScript 第四版草案<i class=\"fa fa-external-link-alt\"></i></span>由于太过激进而被抛弃，Adobe 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQWN0aW9uU2NyaXB0\">ActionScript 3.0<i class=\"fa fa-external-link-alt\"></i></span> 是 ECMAScript edition 4 的唯一实现（ Flash 差点就统一 Web 了）</p>\n</blockquote>\n<p>到了 2012 年，事情突然开始有了转变。大家开始推动停止对旧版本 IE 浏览器的支持，用 ECMAScript 5 (ES5) 风格来编写代码也变得更加可行。与此同时，一个新的 ECMAScript 规范也开始启动。到了这时，大家开始逐渐习惯以对 ECMAScript 规范的版本支持程度来形容各种 JavaScript 实现。在正式被指名为 ECMAScript 第 6 版 (ES6) 之前，这个新的标准原本被称为 ES.Harmony（和谐）。2015 年，负责制定 ECMAScript 规范草案的委员会 TC39 决定将定义新标准的制度改为一年一次，这意味着每个新特性一旦被批准就可以添加，而不像以往一样，规范只有在整个草案完成，所有特性都没问题后才能被定稿。因此，ECMAScript 第 6 版在六月份公布之前，又被重命名为了 ECMAScript 2015（ES2015）</p>\n<p>目前，仍然有很多新的 JavaScript 特性或语法正在提议中，包括 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3d5Y2F0cy9qYXZhc2NyaXB0LWRlY29yYXRvcnM=\">decorators（装饰者）<i class=\"fa fa-external-link-alt\"></i></span>，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2x1a2Vob2Jhbi9lY21hc2NyaXB0LWFzeW5jYXdhaXQ=\">async-await（async-await 异步编程模型）<i class=\"fa fa-external-link-alt\"></i></span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2plZmZtby9lcy1jbGFzcy1wcm9wZXJ0aWVz\">static class properties（静态类属性）<i class=\"fa fa-external-link-alt\"></i></span>。它们通常被称为 ES7，ES2016 或者 ES.Next 的特性，不过实际上它们只能被称作提案或者说可能性，毕竟 ES2016 的规范还没有完成，有可能全部都会引入，也有可能一个都没有。TC39 把一个提案分为 4 个阶段，你可以在 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvdXNhZ2UvZXhwZXJpbWVudGFsLw==\">Babel 的官网<i class=\"fa fa-external-link-alt\"></i></span> 上查看各个提案目前都在哪个阶段了。</p>\n<p>所以，我们该如何使用这一大堆术语呢？下面的列表或许能帮助到你：</p>\n<ul>\n<li><strong>ECMAScript</strong>：一个由 ECMA International 进行标准化，TC39 委员会进行监督的语言。通常用于指代标准本身。</li>\n<li><strong>JavaScript</strong>：ECMAScript 标准的各种实现的最常用称呼。这个术语并不局限于某个特定版本的 ECMAScript 规范，并且可能被用于任何不同程度的任意版本的 ECMAScript 的实现。</li>\n<li><strong>ECMAScript 5 (ES5)</strong>：ECMAScript 的第五版修订，于 2009 年完成标准化。这个规范在所有现代浏览器中都相当完全的实现了。</li>\n<li><strong>ECMAScript 6 (ES6) / ECMAScript 2015 (ES2015)</strong>：ECMAScript 的第六版修订，于 2015 年完成标准化。这个标准被部分实现于大部分现代浏览器。可以查阅<span class=\"exturl\" data-url=\"aHR0cDovL2thbmdheC5naXRodWIuaW8vY29tcGF0LXRhYmxlL2VzNi8=\">这张兼容性表<i class=\"fa fa-external-link-alt\"></i></span>来查看不同浏览器和工具的实现情况。</li>\n<li><strong>ECMAScript 2016</strong>：预计的第七版 ECMAScript 修订，计划于明年夏季发布。这份规范具体将包含哪些特性还没有最终确定</li>\n<li><strong>ECMAScript Proposals</strong>：被考虑加入未来版本 ECMAScript 标准的特性与语法提案，他们需要经历五个阶段：Strawman（稻草人），Proposal（提议），Draft（草案），Candidate（候选）以及 Finished （完成）。</li>\n</ul>\n<p>在这整个 Blog 中，我将把目前的 ECMAScript 版本称作 ES6（因为这是大部分开发者最习以为常的），把明年的规范称作 ES2016（因为，与 ES6/ES2015 不同，这个名字将在整个标准化过程中沿用）并且将那些还没有成为 ECMAScript 定稿或草案的未来语言概念称为 ECMAScript 提案或者 JavaScript 提案。我将尽我所能在任何可能引起困惑的场合沿用这篇文章。</p>\n<h4 id=\"一些资源\"><a href=\"#一些资源\" class=\"headerlink\" title=\"一些资源\"></a>一些资源</h4><ul>\n<li>TC39 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RjMzkvZWNtYTI2Mg==\">Github 仓库<i class=\"fa fa-external-link-alt\"></i></span>上可以看到所有目前公开的提案</li>\n<li>如果你还不熟悉 ES6，Babel 有一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWJlbGpzLmlvL2RvY3MvbGVhcm4tZXMyMDE1Lw==\">很不错的特性概览<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>如果你希望深入 ES6，这里有两本很不错的书： Axel Rauschmayer 的 <span class=\"exturl\" data-url=\"aHR0cDovL2V4cGxvcmluZ2pzLmNvbS8=\">Exploring ES6<i class=\"fa fa-external-link-alt\"></i></span>和 Nicholas Zakas 的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWFucHViLmNvbS91bmRlcnN0YW5kaW5nZXM2\">Understanding ECMAScript 6<i class=\"fa fa-external-link-alt\"></i></span>。Axel 的博客 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4yYWxpdHkuY29tLw==\">2ality<i class=\"fa fa-external-link-alt\"></i></span> 也是很不错的 ES6 资源</li>\n</ul>\n<img class=\"shadow\" width=\"320\" data-src=\"/assets/img/2015/09/keep-calm-and-learn-javascript.png\" />\n<small class=\"img-hint\">来学 JavaScript 吧！</small>\n\n<h4 id=\"著作权声明\"><a href=\"#著作权声明\" class=\"headerlink\" title=\"著作权声明\"></a>著作权声明</h4><p>本文译自 <span class=\"exturl\" data-url=\"aHR0cDovL2Jlbm1jY29ybWljay5vcmcvMjAxNS8wOS8xNC9lczUtZXM2LWVzMjAxNi1lcy1uZXh0LXdoYXRzLWdvaW5nLW9uLXdpdGgtamF2YXNjcmlwdC12ZXJzaW9uaW5nLw==\">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?<i class=\"fa fa-external-link-alt\"></i></span><br>译者 <span class=\"exturl\" data-url=\"aHR0cDovL3dlaWJvLmNvbS9odXhwcm8=\">黄玄<i class=\"fa fa-external-link-alt\"></i></span>，首次发布于 <span class=\"exturl\" data-url=\"aHR0cDovL2h1YW5neHVhbi5tZQ==\">Hux Blog<i class=\"fa fa-external-link-alt\"></i></span>，转载请保留以上链接</p>"},{"title":"JavaScript模块化语法总结","date":"2017-12-28T16:28:16.000Z","layout":"post","description":"服务端模块化规范","top":3,"_content":"\n# CommonJS 服务端模块化规范\n\n# AMD/CMD 浏览器（客户端）模块化规范\n\n```javascript\nvar math = require(\"math\");\n\nmath.add(2, 3);\n```\n<!-- more -->\n第二行 math.add(2, 3)，在第一行 require('math')之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n\n这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是 AMD 规范诞生的背景。\n\n### AMD 规范的模块化插件（require.js 和 curl.js）\n\n使用的是 require 导入模块\n\n```javascript\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n\n　　　　// some code here\n\n　　});\nrequire会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；\n\n\n//指定路径\n\nrequire.config({\n       baseUrl:'js/lib',//放置公共路径\n　　　　paths: {\n\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n\n　　　　}\n\n　　});\n```\n\n### AMD 模块规范写法\n\n- 五、AMD 模块的写法\n\nrequire.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。\n\n具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在`define()`函数之中。\n\n假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：\n\n```javascript\n// math.js\n\ndefine(function() {\n  var add = function(x, y) {\n    return x + y;\n  };\n\n  return {\n    add: add\n  };\n}); // main.js\n\n// 加载方法如下：\n\nrequire([\"math\"], function(math) {\n  alert(math.add(1, 1));\n});\n```\n","source":"_posts/JavaScript-modules.md","raw":"---\ntitle: JavaScript模块化语法总结 #文章页面上的显示名称，一般是中文\ndate: 2017-12-29 00:28:16 #文章生成时间，一般不改，当然也可以任意修改\nlayout: post\ncategories: JavaScript #分类\ntags: [模块化, 规范, JS] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: 服务端模块化规范 #附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面\ntop: 3\n---\n\n# CommonJS 服务端模块化规范\n\n# AMD/CMD 浏览器（客户端）模块化规范\n\n```javascript\nvar math = require(\"math\");\n\nmath.add(2, 3);\n```\n<!-- more -->\n第二行 math.add(2, 3)，在第一行 require('math')之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n\n这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是 AMD 规范诞生的背景。\n\n### AMD 规范的模块化插件（require.js 和 curl.js）\n\n使用的是 require 导入模块\n\n```javascript\nrequire(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n\n　　　　// some code here\n\n　　});\nrequire会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；\n\n\n//指定路径\n\nrequire.config({\n       baseUrl:'js/lib',//放置公共路径\n　　　　paths: {\n\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n\n　　　　}\n\n　　});\n```\n\n### AMD 模块规范写法\n\n- 五、AMD 模块的写法\n\nrequire.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。\n\n具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在`define()`函数之中。\n\n假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：\n\n```javascript\n// math.js\n\ndefine(function() {\n  var add = function(x, y) {\n    return x + y;\n  };\n\n  return {\n    add: add\n  };\n}); // main.js\n\n// 加载方法如下：\n\nrequire([\"math\"], function(math) {\n  alert(math.add(1, 1));\n});\n```\n","slug":"JavaScript-modules","published":1,"updated":"2020-04-17T08:46:40.399Z","_id":"ck8q1pzy10005bhc3652cboj6","comments":1,"photos":[],"link":"","content":"<h1 id=\"CommonJS-服务端模块化规范\"><a href=\"#CommonJS-服务端模块化规范\" class=\"headerlink\" title=\"CommonJS 服务端模块化规范\"></a>CommonJS 服务端模块化规范</h1><h1 id=\"AMD-CMD-浏览器（客户端）模块化规范\"><a href=\"#AMD-CMD-浏览器（客户端）模块化规范\" class=\"headerlink\" title=\"AMD/CMD 浏览器（客户端）模块化规范\"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">\"math\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>\n<h3 id=\"AMD-规范的模块化插件（require-js-和-curl-js）\"><a href=\"#AMD-规范的模块化插件（require-js-和-curl-js）\" class=\"headerlink\" title=\"AMD 规范的模块化插件（require.js 和 curl.js）\"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>, <span class=\"string\">'backbone'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _, Backbone</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">       baseUrl:<span class=\"string\">'js/lib'</span>,<span class=\"comment\">//放置公共路径</span></span><br><span class=\"line\">　　　　paths: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jquery.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"underscore\"</span>: <span class=\"string\">\"underscore.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"backbone\"</span>: <span class=\"string\">\"backbone.min\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD-模块规范写法\"><a href=\"#AMD-模块规范写法\" class=\"headerlink\" title=\"AMD 模块规范写法\"></a>AMD 模块规范写法</h3><ul>\n<li>五、AMD 模块的写法</li>\n</ul>\n<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>\n<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>\n<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: add</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载方法如下：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"math\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">  alert(math.add(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"CommonJS-服务端模块化规范\"><a href=\"#CommonJS-服务端模块化规范\" class=\"headerlink\" title=\"CommonJS 服务端模块化规范\"></a>CommonJS 服务端模块化规范</h1><h1 id=\"AMD-CMD-浏览器（客户端）模块化规范\"><a href=\"#AMD-CMD-浏览器（客户端）模块化规范\" class=\"headerlink\" title=\"AMD/CMD 浏览器（客户端）模块化规范\"></a>AMD/CMD 浏览器（客户端）模块化规范</h1><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">\"math\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">math.add(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>","more":"<p>第二行 math.add(2, 3)，在第一行 require(‘math’)之后运行，因此必须等 math.js 加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。</p>\n<p>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p>\n<h3 id=\"AMD-规范的模块化插件（require-js-和-curl-js）\"><a href=\"#AMD-规范的模块化插件（require-js-和-curl-js）\" class=\"headerlink\" title=\"AMD 规范的模块化插件（require.js 和 curl.js）\"></a>AMD 规范的模块化插件（require.js 和 curl.js）</h3><p>使用的是 require 导入模块</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">'jquery'</span>, <span class=\"string\">'underscore'</span>, <span class=\"string\">'backbone'</span>], <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">$, _, Backbone</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"comment\">// some code here</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>会先加载jquery，underscore, backbone模块，因为这个模块化都是异步加载，加载完成后，在回调函数中调用这些模块的方法；</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//指定路径</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>.config(&#123;</span><br><span class=\"line\">       baseUrl:<span class=\"string\">'js/lib'</span>,<span class=\"comment\">//放置公共路径</span></span><br><span class=\"line\">　　　　paths: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"string\">\"jquery\"</span>: <span class=\"string\">\"jquery.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"underscore\"</span>: <span class=\"string\">\"underscore.min\"</span>,</span><br><span class=\"line\">　　　　　　<span class=\"string\">\"backbone\"</span>: <span class=\"string\">\"backbone.min\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">　　&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AMD-模块规范写法\"><a href=\"#AMD-模块规范写法\" class=\"headerlink\" title=\"AMD 模块规范写法\"></a>AMD 模块规范写法</h3><ul>\n<li>五、AMD 模块的写法</li>\n</ul>\n<p>require.js 加载的模块，采用 AMD 规范。也就是说，模块必须按照 AMD 的规定来写。</p>\n<p>具体来说，就是模块必须采用特定的 define()函数来定义。如果一个模块不依赖其他模块，那么可以直接定义在<code>define()</code>函数之中。</p>\n<p>假定现在有一个 math.js 文件，它定义了一个 math 模块。那么，math.js 就要这样写：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"></span><br><span class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> add = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    add: add</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;); <span class=\"comment\">// main.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载方法如下：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">require</span>([<span class=\"string\">\"math\"</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">math</span>) </span>&#123;</span><br><span class=\"line\">  alert(math.add(<span class=\"number\">1</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"NPM error \"npm Cannot read property 'length' of undefined\"","subtitle":"NPM error","date":"2019-05-28T06:59:35.000Z","author":"Mark","layout":"post","_content":"\n### 问题\n\n- 出现错误版本`npm 6.9.0`\n\n```bash\n  npm -g outdated\n  # 检测所有全局依赖包更新情况\n```\n<!-- more -->\n- 报错显示\n\n![image](/assets/img/2019/05/1.jpg)\n\n### 修复方法\n\n```javascript\n// 148行\nvar columns = [\n\tdepname,\n\thas || \"MISSING\",\n\twant,\n\tlatest,\n\tdeppath || \"global\" // 此处修改为这样\n]\n```\n\n### 参考资料\n\n- [\"npm-outdated-throw-an-error-cannot-read-property-length-of-undefined\"](https://npm.community/t/npm-outdated-throw-an-error-cannot-read-property-length-of-undefined/5929)\n- [\"npm Cannot read property 'length' of undefined\"](https://github.com/npm/cli/commit/d07547154eb8a88aa4fde8a37e128e1e3272adc1#diff-3d20499d58f14c6f1edfe93d8ba8a8a2)\n","source":"_posts/NPM-Error.md","raw":"---\ntitle: NPM error \"npm Cannot read property 'length' of undefined\"\nsubtitle: \"NPM error\"\ndate: 2019-05-28 14:59:35\nauthor: \"Mark\"\nlayout: post\ncategories: JavaScript #分类\ntags:\n  - 前端开发\n  - JavaScript\n  - NPM\n  - NodeJs\n---\n\n### 问题\n\n- 出现错误版本`npm 6.9.0`\n\n```bash\n  npm -g outdated\n  # 检测所有全局依赖包更新情况\n```\n<!-- more -->\n- 报错显示\n\n![image](/assets/img/2019/05/1.jpg)\n\n### 修复方法\n\n```javascript\n// 148行\nvar columns = [\n\tdepname,\n\thas || \"MISSING\",\n\twant,\n\tlatest,\n\tdeppath || \"global\" // 此处修改为这样\n]\n```\n\n### 参考资料\n\n- [\"npm-outdated-throw-an-error-cannot-read-property-length-of-undefined\"](https://npm.community/t/npm-outdated-throw-an-error-cannot-read-property-length-of-undefined/5929)\n- [\"npm Cannot read property 'length' of undefined\"](https://github.com/npm/cli/commit/d07547154eb8a88aa4fde8a37e128e1e3272adc1#diff-3d20499d58f14c6f1edfe93d8ba8a8a2)\n","slug":"NPM-Error","published":1,"updated":"2020-04-17T08:47:24.321Z","_id":"ck8q1pzy20006bhc34drndpq6","comments":1,"photos":[],"link":"","content":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li>出现错误版本<code>npm 6.9.0</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g outdated</span><br><span class=\"line\"><span class=\"comment\"># 检测所有全局依赖包更新情况</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>报错显示</li>\n</ul>\n<p><img data-src=\"/assets/img/2019/05/1.jpg\" alt=\"image\"></p>\n<h3 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 148行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> columns = [</span><br><span class=\"line\">\tdepname,</span><br><span class=\"line\">\thas || <span class=\"string\">\"MISSING\"</span>,</span><br><span class=\"line\">\twant,</span><br><span class=\"line\">\tlatest,</span><br><span class=\"line\">\tdeppath || <span class=\"string\">\"global\"</span> <span class=\"comment\">// 此处修改为这样</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0uY29tbXVuaXR5L3QvbnBtLW91dGRhdGVkLXRocm93LWFuLWVycm9yLWNhbm5vdC1yZWFkLXByb3BlcnR5LWxlbmd0aC1vZi11bmRlZmluZWQvNTkyOQ==\">“npm-outdated-throw-an-error-cannot-read-property-length-of-undefined”<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25wbS9jbGkvY29tbWl0L2QwNzU0NzE1NGViOGE4OGFhNGZkZThhMzdlMTI4ZTFlMzI3MmFkYzEjZGlmZi0zZDIwNDk5ZDU4ZjE0YzZmMWVkZmU5M2Q4YmE4YThhMg==\">“npm Cannot read property ‘length’ of undefined”<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><ul>\n<li>出现错误版本<code>npm 6.9.0</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -g outdated</span><br><span class=\"line\"><span class=\"comment\"># 检测所有全局依赖包更新情况</span></span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>报错显示</li>\n</ul>\n<p><img data-src=\"/assets/img/2019/05/1.jpg\" alt=\"image\"></p>\n<h3 id=\"修复方法\"><a href=\"#修复方法\" class=\"headerlink\" title=\"修复方法\"></a>修复方法</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 148行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> columns = [</span><br><span class=\"line\">\tdepname,</span><br><span class=\"line\">\thas || <span class=\"string\">\"MISSING\"</span>,</span><br><span class=\"line\">\twant,</span><br><span class=\"line\">\tlatest,</span><br><span class=\"line\">\tdeppath || <span class=\"string\">\"global\"</span> <span class=\"comment\">// 此处修改为这样</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ucG0uY29tbXVuaXR5L3QvbnBtLW91dGRhdGVkLXRocm93LWFuLWVycm9yLWNhbm5vdC1yZWFkLXByb3BlcnR5LWxlbmd0aC1vZi11bmRlZmluZWQvNTkyOQ==\">“npm-outdated-throw-an-error-cannot-read-property-length-of-undefined”<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25wbS9jbGkvY29tbWl0L2QwNzU0NzE1NGViOGE4OGFhNGZkZThhMzdlMTI4ZTFlMzI3MmFkYzEjZGlmZi0zZDIwNDk5ZDU4ZjE0YzZmMWVkZmU5M2Q4YmE4YThhMg==\">“npm Cannot read property ‘length’ of undefined”<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>"},{"layout":"post","title":"初探Vue3.0新特性(未完待续)","subtitle":"修改监察者模式、重写Virtual DOM等等等。。。","date":"2018-12-10T04:00:00.000Z","author":"Mark","top":7,"_content":"\n<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n<img\n  width=\"200\"\n  height=\"200\"\n  src=\"https://cn.vuejs.org/images/logo.png\"\n  alt=\"Vue\"></a></p>\n\n> ### 初探 Vue3.0 新特性\n>\n> &emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖----” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。\n> &emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”\n> &emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。\n\n![image](/assets/img/2018/12/vue3.0.png)\n\n> ### 9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\n>\n> 1.Virtual DOM 完全重写，mounting & patching 提速  100% ;\n> 2.更多编译时（compile-time）提醒以减少 runtime 开销;\n> 3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;\n> 4.放弃 Object.defineProperty ，使用更快的原生 Proxy;\n> 5.组件实例初始化速度提高 100％;\n> 6.提速一倍/内存使用降低一半。\n<!-- more -->\n> ### 对于 3.0 的 proxy 特性有必要讲一讲\n> 对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）\n\n&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](https://docs.googl初探 Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!\n&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！\n\n![image](/assets/img/2018/12/1.png)\n![image](/assets/img/2018/12/2.png)\n\n> ###\n>\n\n\n最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！\n参考文献：\n- [初探 Vue3.0 中的一大亮点——Proxy !](https://juejin.im/post/5bfcbab0518825741e7bd67f)\n- [重磅！尤雨溪发布Vue 3.0开发路线](https://mp.weixin.qq.com/s/k6OhMNrpagtTmbhkW-tmZg)\n- [尤大大的PPT(需要翻墙下载)](https://docs.google.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)\n- [Proxy MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","source":"_posts/Vue3.0.md","raw":"---\nlayout: post\ntitle: \"初探Vue3.0新特性(未完待续)\"\nsubtitle: \"修改监察者模式、重写Virtual DOM等等等。。。\"\ndate: 2018-12-10 12:00:00\nauthor: \"Mark\"\ncategories: Vue #分类\ntop: 7\ntags:\n  - 前端开发\n  - JavaScript\n  - Vue\n---\n\n<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n<img\n  width=\"200\"\n  height=\"200\"\n  src=\"https://cn.vuejs.org/images/logo.png\"\n  alt=\"Vue\"></a></p>\n\n> ### 初探 Vue3.0 新特性\n>\n> &emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖----” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。\n> &emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”\n> &emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。\n\n![image](/assets/img/2018/12/vue3.0.png)\n\n> ### 9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\n>\n> 1.Virtual DOM 完全重写，mounting & patching 提速  100% ;\n> 2.更多编译时（compile-time）提醒以减少 runtime 开销;\n> 3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;\n> 4.放弃 Object.defineProperty ，使用更快的原生 Proxy;\n> 5.组件实例初始化速度提高 100％;\n> 6.提速一倍/内存使用降低一半。\n<!-- more -->\n> ### 对于 3.0 的 proxy 特性有必要讲一讲\n> 对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）\n\n&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](https://docs.googl初探 Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!\n&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！\n\n![image](/assets/img/2018/12/1.png)\n![image](/assets/img/2018/12/2.png)\n\n> ###\n>\n\n\n最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！\n参考文献：\n- [初探 Vue3.0 中的一大亮点——Proxy !](https://juejin.im/post/5bfcbab0518825741e7bd67f)\n- [重磅！尤雨溪发布Vue 3.0开发路线](https://mp.weixin.qq.com/s/k6OhMNrpagtTmbhkW-tmZg)\n- [尤大大的PPT(需要翻墙下载)](https://docs.google.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)\n- [Proxy MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy)","slug":"Vue3.0","published":1,"updated":"2020-04-11T02:32:21.111Z","_id":"ck8q1pzy40009bhc32137aiy9","comments":1,"photos":[],"link":"","content":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n<img\n  width=\"200\"\n  height=\"200\"\n  data-src=\"https://cn.vuejs.org/images/logo.png\"\n  alt=\"Vue\"></a></p>\n\n<blockquote>\n<h3 id=\"初探-Vue3-0-新特性\"><a href=\"#初探-Vue3-0-新特性\" class=\"headerlink\" title=\"初探 Vue3.0 新特性\"></a>初探 Vue3.0 新特性</h3><p>&emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖—-” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。<br>&emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”<br>&emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。</p>\n</blockquote>\n<p><img data-src=\"/assets/img/2018/12/vue3.0.png\" alt=\"image\"></p>\n<blockquote>\n<h3 id=\"9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"><a href=\"#9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\" class=\"headerlink\" title=\"9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"></a>9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。</h3><p>1.Virtual DOM 完全重写，mounting &amp; patching 提速  100% ;<br>2.更多编译时（compile-time）提醒以减少 runtime 开销;<br>3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;<br>4.放弃 Object.defineProperty ，使用更快的原生 Proxy;<br>5.组件实例初始化速度提高 100％;<br>6.提速一倍/内存使用降低一半。</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<h3 id=\"对于-3-0-的-proxy-特性有必要讲一讲\"><a href=\"#对于-3-0-的-proxy-特性有必要讲一讲\" class=\"headerlink\" title=\"对于 3.0 的 proxy 特性有必要讲一讲\"></a>对于 3.0 的 proxy 特性有必要讲一讲</h3><p>对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）</p>\n</blockquote>\n<p>&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2ds5Yid5o6i\">https://docs.googl初探<i class=\"fa fa-external-link-alt\"></i></span> Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!<br>&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！</p>\n<p><img data-src=\"/assets/img/2018/12/1.png\" alt=\"image\"><br><img data-src=\"/assets/img/2018/12/2.png\" alt=\"image\"></p>\n<blockquote>\n<p>###</p>\n</blockquote>\n<p>最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！<br>参考文献：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmZjYmFiMDUxODgyNTc0MWU3YmQ2N2Y=\">初探 Vue3.0 中的一大亮点——Proxy !<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvazZPaE1OcnBhZ3RUbWJoa1ctdG1aZw==\">重磅！尤雨溪发布Vue 3.0开发路线<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMXloUEd5aFFySmNwSkkyWkZ2Qm1lM3BHS2FHTmlMaTcwOWMzN3N2aXZ2MG8vZWRpdD91c3A9c2hhcmluZw==\">尤大大的PPT(需要翻墙下载)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=\">Proxy MDN<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p align=\"center\"><a href=\"#\" target=\"_blank\" rel=\"noopener noreferrer\">\n<img\n  width=\"200\"\n  height=\"200\"\n  data-src=\"https://cn.vuejs.org/images/logo.png\"\n  alt=\"Vue\"></a></p>\n\n<blockquote>\n<h3 id=\"初探-Vue3-0-新特性\"><a href=\"#初探-Vue3-0-新特性\" class=\"headerlink\" title=\"初探 Vue3.0 新特性\"></a>初探 Vue3.0 新特性</h3><p>&emsp;“ 我已经学不动了，只有神可以挽救一下我的膝盖—-” 自 2016 年 10 月 1 日 Vue2.0 版本发布以来到目前为止已经将近快两年的时间了。在这两年里，前端领域风云变化，各种框架层出不穷。小程序横空出世，angular 已经迭代到 angular6,从 angular2 开始已经基本上是将 angularjs 推倒重来，蜕变升级。等等。。。在这两年里，我们看到了太多的框架出现和消失，前端框架基本上是 vue react angular 三足鼎立。感谢各位开源大大，是你们推动了整个前端领域的快速发展。<br>&emsp;与此同时，面对一时间涌现的那么多种前端框架，很多小伙伴们都会感觉力不从心，甚至还出现了众多用户到某知名开源项目上留言：“求求你别写了，我们学不动了~~”<br>&emsp;今天，Vue 的主要开发者尤小右在微博上透露了 Vue3.0 的开发计划，快来看看有哪些新改变吧。</p>\n</blockquote>\n<p><img data-src=\"/assets/img/2018/12/vue3.0.png\" alt=\"image\"></p>\n<blockquote>\n<h3 id=\"9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"><a href=\"#9月30日，尤雨溪在medium个人博客上发布了vue3-0的开发思路，国内有翻译的版本，见文章最后的参考链接。3-0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\" class=\"headerlink\" title=\"9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。\"></a>9月30日，尤雨溪在medium个人博客上发布了vue3.0的开发思路，国内有翻译的版本，见文章最后的参考链接。3.0带来了很大的变化，他讲了一些改进的思路以及整个开发流程的规划。</h3><p>1.Virtual DOM 完全重写，mounting &amp; patching 提速  100% ;<br>2.更多编译时（compile-time）提醒以减少 runtime 开销;<br>3.基于 Proxy 观察者机制以满足全语言覆盖及更好的性能;<br>4.放弃 Object.defineProperty ，使用更快的原生 Proxy;<br>5.组件实例初始化速度提高 100％;<br>6.提速一倍/内存使用降低一半。</p>\n</blockquote>","more":"<blockquote>\n<h3 id=\"对于-3-0-的-proxy-特性有必要讲一讲\"><a href=\"#对于-3-0-的-proxy-特性有必要讲一讲\" class=\"headerlink\" title=\"对于 3.0 的 proxy 特性有必要讲一讲\"></a>对于 3.0 的 proxy 特性有必要讲一讲</h3><p>对于这个观察者机制的变更，给我带来的好处简直不言而喻。（我们终于不再担心目前官网上提的那个检测数组/检测对象变更了）</p>\n</blockquote>\n<p>&emsp;不久前，也就是11月14日-16日于多伦多举办的 VueConf TO 2018 大会上，尤雨溪发表了名为 Vue3.0 Updates 的主题演讲，对 Vue3.0 的更新计划、方向进行了详细阐述（感兴趣的小伙伴可以看看完整的 [PPT](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2ds5Yid5o6i\">https://docs.googl初探<i class=\"fa fa-external-link-alt\"></i></span> Vue3.0 新特性e.com/presentation/d/1yhPGyhQrJcpJI2ZFvBme3pGKaGNiLi709c37svivv0o/edit?usp=sharing)），表示已经放弃使用了 Object.defineProperty，而选择了使用更快的原生 Proxy !!<br>&emsp;这将会消除了之前 Vue2.x 中基于 Object.defineProperty 的实现所存在的很多限制：无法监听 属性的添加和删除、数组索引和长度的变更，并可以支持 Map、Set、WeakMap 和 WeakSet！</p>\n<p><img data-src=\"/assets/img/2018/12/1.png\" alt=\"image\"><br><img data-src=\"/assets/img/2018/12/2.png\" alt=\"image\"></p>\n<blockquote>\n<p>###</p>\n</blockquote>\n<p>最后期待，2019年的VUE3.0的发布，来让前端开发更便捷，更cool！<br>参考文献：</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC81YmZjYmFiMDUxODgyNTc0MWU3YmQ2N2Y=\">初探 Vue3.0 中的一大亮点——Proxy !<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tcC53ZWl4aW4ucXEuY29tL3MvazZPaE1OcnBhZ3RUbWJoa1ctdG1aZw==\">重磅！尤雨溪发布Vue 3.0开发路线<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvMXloUEd5aFFySmNwSkkyWkZ2Qm1lM3BHS2FHTmlMaTcwOWMzN3N2aXZ2MG8vZWRpdD91c3A9c2hhcmluZw==\">尤大大的PPT(需要翻墙下载)<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJveHk=\">Proxy MDN<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>"},{"title":"Vuex 状态管理插件学习","layout":"post","date":"2018-03-12T08:16:16.000Z","description":"Vuex 学习","author":"Mark","top":9,"_content":"\n# Vue 状态管理插件学习\n\n- vuex vue 提供的数据状态管理插件（俗称数据共享中心）\n- state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）\n\n- 获取仓库中定义值的方法\n\n```javascript\n// {{$store.state.定义的属性}}\n// 使用计算属性\ncomputed:{\n\tcount(){\n\t\treturn this.$store.state.定义的属性\n\t}\n}\n```\n<!-- more -->\n- 3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法\n\n```javascript\n//es6写法\ncomputed: mapState({\n\tcount: state => state.count\n})\n```\n\n- 等同于\n\n```javascript\ncomputed: mapState({\n\tcount: state => {\n\t\treturn state.count\n\t}\n})\n```\n\n- 4.mapState 扩展使用\n\n```javascript\ncomputed: mapState(['在state中定义的属性'])\n// 这个会根据你定义的属性名绑定到vue实例上\n```\n\n- 5.mutations 提交更改仓库中定义值的方法（修改状态）\n- 使用$store.commit('调用定义在 mutations 中定义的方法名'，要传递给调用方法的参数)\n- 获取状态管理器中定义的方法(mutations)\n\n```javascript\nconst mutations = {\n\t// 定义一个加的方法\n\tadd(state) {\n\t\tstate.count++\n\t},\n\t// 定义一个减的方法\n\treduce(state) {\n\t\tstate.count--\n\t}\n}\n// 调用方法\n// 在vue中使用import导入辅助函数\nimport { mapState, mapMutations } from 'vuex'\n\nmethods: mapMutations(['add', 'reduce'])\n// 或\nmethods: mapMutations([(countAdd: 'add'), (countReauce: 'reduce')])\n```\n\n- 6.vuex 中的计算属性（过滤属性）getters\n\n```javascript\n// 定义方法\nconst getters = {\n  count:function(state){\n    return state.count += 100;\n\t}\n\t// 或者\n\tcount: state => { return state.count += 100 }\n}\n\n// 调用方法\nimport { mapState,mapMutations,mapGetters } from 'vuex';\n\ncomputed: mapGetters({\n\tcount: (state) => { return state.count }\n})\n```\n\n- 7.vuex 中的 actions，异步提交方式\n\n```javascript\nconst actions = {\n\t// context：上下文对象，这里你可以理解称store本身。\n\taddAction(context) {\n\t\tcontext.commit('add', 10)\n\t},\n\t// {commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。\n\treduceAction({ commit }) {\n\t\tcommit('reduce')\n\t}\n}\n```\n\n- 8.module 模块组\n\n```javascript\n// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中\nconst moduleA={\n  state,\n  mutations,\n  getters,\n  actions\n}\n// 调用方法\nmodules: {\n  //模块别名:模块名，记得要使用import引入模块\n\ta:moduleA\n}\n\n//使用模块值和方法\n和以上的使用方法一样，只不过前边加一个模块别名\n```\n","source":"_posts/Vuex.md","raw":"---\ntitle: 'Vuex 状态管理插件学习' #文章页面上的显示名称，一般是中文\nlayout: post\ndate: 2018-03-12 16:16:16 #文章生成时间，一般不改，当然也可以任意修改\ntags: [vue, vuex, JS] #文章标签，可空，多标签请用格式，注意:后面有个空格\ndescription: Vuex 学习 #附加一段文章摘要，字数最好在 140 字以内，会出现在 meta 的 description 里面\ncategories: Vue #分类\nauthor: 'Mark'\ntop: 9\n---\n\n# Vue 状态管理插件学习\n\n- vuex vue 提供的数据状态管理插件（俗称数据共享中心）\n- state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）\n\n- 获取仓库中定义值的方法\n\n```javascript\n// {{$store.state.定义的属性}}\n// 使用计算属性\ncomputed:{\n\tcount(){\n\t\treturn this.$store.state.定义的属性\n\t}\n}\n```\n<!-- more -->\n- 3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法\n\n```javascript\n//es6写法\ncomputed: mapState({\n\tcount: state => state.count\n})\n```\n\n- 等同于\n\n```javascript\ncomputed: mapState({\n\tcount: state => {\n\t\treturn state.count\n\t}\n})\n```\n\n- 4.mapState 扩展使用\n\n```javascript\ncomputed: mapState(['在state中定义的属性'])\n// 这个会根据你定义的属性名绑定到vue实例上\n```\n\n- 5.mutations 提交更改仓库中定义值的方法（修改状态）\n- 使用$store.commit('调用定义在 mutations 中定义的方法名'，要传递给调用方法的参数)\n- 获取状态管理器中定义的方法(mutations)\n\n```javascript\nconst mutations = {\n\t// 定义一个加的方法\n\tadd(state) {\n\t\tstate.count++\n\t},\n\t// 定义一个减的方法\n\treduce(state) {\n\t\tstate.count--\n\t}\n}\n// 调用方法\n// 在vue中使用import导入辅助函数\nimport { mapState, mapMutations } from 'vuex'\n\nmethods: mapMutations(['add', 'reduce'])\n// 或\nmethods: mapMutations([(countAdd: 'add'), (countReauce: 'reduce')])\n```\n\n- 6.vuex 中的计算属性（过滤属性）getters\n\n```javascript\n// 定义方法\nconst getters = {\n  count:function(state){\n    return state.count += 100;\n\t}\n\t// 或者\n\tcount: state => { return state.count += 100 }\n}\n\n// 调用方法\nimport { mapState,mapMutations,mapGetters } from 'vuex';\n\ncomputed: mapGetters({\n\tcount: (state) => { return state.count }\n})\n```\n\n- 7.vuex 中的 actions，异步提交方式\n\n```javascript\nconst actions = {\n\t// context：上下文对象，这里你可以理解称store本身。\n\taddAction(context) {\n\t\tcontext.commit('add', 10)\n\t},\n\t// {commit}：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。\n\treduceAction({ commit }) {\n\t\tcommit('reduce')\n\t}\n}\n```\n\n- 8.module 模块组\n\n```javascript\n// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中\nconst moduleA={\n  state,\n  mutations,\n  getters,\n  actions\n}\n// 调用方法\nmodules: {\n  //模块别名:模块名，记得要使用import引入模块\n\ta:moduleA\n}\n\n//使用模块值和方法\n和以上的使用方法一样，只不过前边加一个模块别名\n```\n","slug":"Vuex","published":1,"updated":"2020-04-17T08:48:07.308Z","_id":"ck8q1pzy4000abhc347yx1box","comments":1,"photos":[],"link":"","content":"<h1 id=\"Vue-状态管理插件学习\"><a href=\"#Vue-状态管理插件学习\" class=\"headerlink\" title=\"Vue 状态管理插件学习\"></a>Vue 状态管理插件学习</h1><ul>\n<li><p>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</p>\n</li>\n<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>\n</li>\n<li><p>获取仓库中定义值的方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#123;$store.state.定义的属性&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用计算属性</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tcount()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.定义的属性</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等同于</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>4.mapState 扩展使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([<span class=\"string\">'在state中定义的属性'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>\n<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>\n<li>获取状态管理器中定义的方法(mutations)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个加的方法</span></span><br><span class=\"line\">\tadd(state) &#123;</span><br><span class=\"line\">\t\tstate.count++</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个减的方法</span></span><br><span class=\"line\">\treduce(state) &#123;</span><br><span class=\"line\">\t\tstate.count--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">// 在vue中使用import导入辅助函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: mapMutations([<span class=\"string\">'add'</span>, <span class=\"string\">'reduce'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">methods: mapMutations([(countAdd: <span class=\"string\">'add'</span>), (countReauce: <span class=\"string\">'reduce'</span>)])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>6.vuex 中的计算属性（过滤属性）getters</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  count:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 或者</span></span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState,mapMutations,mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>7.vuex 中的 actions，异步提交方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class=\"line\">\taddAction(context) &#123;</span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">'add'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;commit&#125;：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class=\"line\">\treduceAction(&#123; commit &#125;) &#123;</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'reduce'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>8.module 模块组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA=&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">modules: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class=\"line\">\ta:moduleA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用模块值和方法</span></span><br><span class=\"line\">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h1 id=\"Vue-状态管理插件学习\"><a href=\"#Vue-状态管理插件学习\" class=\"headerlink\" title=\"Vue 状态管理插件学习\"></a>Vue 状态管理插件学习</h1><ul>\n<li><p>vuex vue 提供的数据状态管理插件（俗称数据共享中心）</p>\n</li>\n<li><p>state（数据商店也就是数据仓库）,mutations（定义更改数据的方法）</p>\n</li>\n<li><p>获取仓库中定义值的方法</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#123;$store.state.定义的属性&#125;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 使用计算属性</span></span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">\tcount()&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.$store.state.定义的属性</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>3.使用 vuex 中的 mapState，也就是 vuex 中提供给我们的方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//es6写法</span></span><br><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>等同于</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> state.count</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>4.mapState 扩展使用</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: mapState([<span class=\"string\">'在state中定义的属性'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 这个会根据你定义的属性名绑定到vue实例上</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>5.mutations 提交更改仓库中定义值的方法（修改状态）</li>\n<li>使用$store.commit(‘调用定义在 mutations 中定义的方法名’，要传递给调用方法的参数)</li>\n<li>获取状态管理器中定义的方法(mutations)</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> mutations = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个加的方法</span></span><br><span class=\"line\">\tadd(state) &#123;</span><br><span class=\"line\">\t\tstate.count++</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// 定义一个减的方法</span></span><br><span class=\"line\">\treduce(state) &#123;</span><br><span class=\"line\">\t\tstate.count--</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"comment\">// 在vue中使用import导入辅助函数</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState, mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span></span><br><span class=\"line\"></span><br><span class=\"line\">methods: mapMutations([<span class=\"string\">'add'</span>, <span class=\"string\">'reduce'</span>])</span><br><span class=\"line\"><span class=\"comment\">// 或</span></span><br><span class=\"line\">methods: mapMutations([(countAdd: <span class=\"string\">'add'</span>), (countReauce: <span class=\"string\">'reduce'</span>)])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>6.vuex 中的计算属性（过滤属性）getters</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义方法</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> getters = &#123;</span><br><span class=\"line\">  count:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">state</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 或者</span></span><br><span class=\"line\">\tcount: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count += <span class=\"number\">100</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState,mapMutations,mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vuex'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">computed: mapGetters(&#123;</span><br><span class=\"line\">\tcount: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123; <span class=\"keyword\">return</span> state.count &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>7.vuex 中的 actions，异步提交方式</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> actions = &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// context：上下文对象，这里你可以理解称store本身。</span></span><br><span class=\"line\">\taddAction(context) &#123;</span><br><span class=\"line\">\t\tcontext.commit(<span class=\"string\">'add'</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"comment\">// &#123;commit&#125;：直接把commit对象传递过来，可以让方法体逻辑和代码更清晰明了。</span></span><br><span class=\"line\">\treduceAction(&#123; commit &#125;) &#123;</span><br><span class=\"line\">\t\tcommit(<span class=\"string\">'reduce'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>8.module 模块组</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模块，和定义一个store实例一样只不过把封装store的全部方法和属性，又封装在了一个模块中</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleA=&#123;</span><br><span class=\"line\">  state,</span><br><span class=\"line\">  mutations,</span><br><span class=\"line\">  getters,</span><br><span class=\"line\">  actions</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用方法</span></span><br><span class=\"line\">modules: &#123;</span><br><span class=\"line\">  <span class=\"comment\">//模块别名:模块名，记得要使用import引入模块</span></span><br><span class=\"line\">\ta:moduleA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//使用模块值和方法</span></span><br><span class=\"line\">和以上的使用方法一样，只不过前边加一个模块别名</span><br></pre></td></tr></table></figure>"},{"title":"Webpack打包工具总结","date":"2017-12-28T17:01:16.000Z","description":"Webpack打包工具语法学习","top":10,"_content":"\n# Webpack\n\n- 安装 webpack\n- 配置 webpack.config.js\n  > 官方教程：https://doc.webpack-china.org/configuration/#-\n\n```javascript\nvar path = require('path');\nmodule.exports = {\n\tentry: './foo.js',\n\t\toutput: {\n\t\tpath: path.resolve(__dirname, 'dist'),\n\t\tfilename: 'foo.bundle.js'\n\t}\n\tmodule:\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.(js|jsx)$/,\n\t\t\t\tuse: 'babel-loader'，\n\t\t\t\tinclude: [\n\t\t  path.resolve(__dirname, \"app\")\n\t\t],\n\t\texclude: [\n\t\t  path.resolve(__dirname, \"app/demo-files\")\n\t\t],\n\t\t// 这里是匹配条件，每个选项都接收一个正则表达式或字符串\n\t\t// test 和 include 具有相同的作用，都是必须匹配选项\n\t\t// exclude 是必不匹配选项（优先于 test 和 include）\n\t\t// 最佳实践：\n\t\t// - 只在 test 和 文件名匹配 中使用正则表达式\n\t\t// - 在 include 和 exclude 中使用绝对路径数组\n\t\t// - 尽量避免 exclude，更倾向于使用 include\n\t\t\t}\n\t\t]\n\t\tplugins: [\n\t\tnew (webpack.optimize.UglifyJsPlugin)\n\t\tnew HtmlWebpackPlugin(template: './src/index.html')\n\t  ]\n};\n```\n<!-- more -->\n- 模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,\n- Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：\n  在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装\n\n```javascript\n// npm install --save-dev html-webpack-plugin\n// 在webpack.config.js中配置：\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n\tentry: {\n\t\tapp: './src/index.js',\n\t\tprint: './src/print.js'\n\t},\n\tplugins: [\n\t\tnew cleanWebpackPlugin(['dist']), //数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前\n\t\tnew HtmlWebpackPlugin({\n\t\t\ttitle: '页面标题', //生成页面标题\n\t\t\tfilename: 'index.html', //要生成的文件名\n\t\t\ttemplate: 'index.html' //要生成页面的时候的模板\n\t\t})\n\t],\n\toutput: {\n\t\tfilename: '[name].bundle.js',\n\t\tpath: path.resolve(__dirname, 'dist')\n\t}\n}\n```\n\n- JSon 文件中不能以有注释\n- 使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；\n\n```javascript\n  // 例:\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm run dev\n  // 例:\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm start\n\t// 如果键名是start，可以省略写run\n```\n\n- 配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json\n\n```javascript\n- \"scripts\": {\n\t\"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n\t}\n```\n\n- 配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库\n\n```javascript\n{\n  test: /\\.js$/,\n  exclude: /(node_modules|bower_components)/,//忽略目录\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: ['@babel/preset-env']\n    }\n  }\n}\n```\n\n- 解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！\n- 解析文件的话，要去下载各种文件类型的 loader\n- webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了\n- package.json 对象中最后一个参数项，不能书写逗号\n\n### CLI\n\n- （command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思\n- vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具\n\n### 打包的工程目录中 src 源码所在文件，dist 发布的目录\n","source":"_posts/Webpack.md","raw":"---\ntitle: Webpack打包工具总结\ndate: 2017-12-29 01:01:16\ncategories: JavaScript\ntags: [Webpack3.10, 语法, JS]\ndescription: Webpack打包工具语法学习\ntop: 10\n---\n\n# Webpack\n\n- 安装 webpack\n- 配置 webpack.config.js\n  > 官方教程：https://doc.webpack-china.org/configuration/#-\n\n```javascript\nvar path = require('path');\nmodule.exports = {\n\tentry: './foo.js',\n\t\toutput: {\n\t\tpath: path.resolve(__dirname, 'dist'),\n\t\tfilename: 'foo.bundle.js'\n\t}\n\tmodule:\n\t\trules: [\n\t\t\t{\n\t\t\t\ttest: /\\.(js|jsx)$/,\n\t\t\t\tuse: 'babel-loader'，\n\t\t\t\tinclude: [\n\t\t  path.resolve(__dirname, \"app\")\n\t\t],\n\t\texclude: [\n\t\t  path.resolve(__dirname, \"app/demo-files\")\n\t\t],\n\t\t// 这里是匹配条件，每个选项都接收一个正则表达式或字符串\n\t\t// test 和 include 具有相同的作用，都是必须匹配选项\n\t\t// exclude 是必不匹配选项（优先于 test 和 include）\n\t\t// 最佳实践：\n\t\t// - 只在 test 和 文件名匹配 中使用正则表达式\n\t\t// - 在 include 和 exclude 中使用绝对路径数组\n\t\t// - 尽量避免 exclude，更倾向于使用 include\n\t\t\t}\n\t\t]\n\t\tplugins: [\n\t\tnew (webpack.optimize.UglifyJsPlugin)\n\t\tnew HtmlWebpackPlugin(template: './src/index.html')\n\t  ]\n};\n```\n<!-- more -->\n- 模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,\n- Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：\n  在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装\n\n```javascript\n// npm install --save-dev html-webpack-plugin\n// 在webpack.config.js中配置：\nconst path = require('path')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nmodule.exports = {\n\tentry: {\n\t\tapp: './src/index.js',\n\t\tprint: './src/print.js'\n\t},\n\tplugins: [\n\t\tnew cleanWebpackPlugin(['dist']), //数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前\n\t\tnew HtmlWebpackPlugin({\n\t\t\ttitle: '页面标题', //生成页面标题\n\t\t\tfilename: 'index.html', //要生成的文件名\n\t\t\ttemplate: 'index.html' //要生成页面的时候的模板\n\t\t})\n\t],\n\toutput: {\n\t\tfilename: '[name].bundle.js',\n\t\tpath: path.resolve(__dirname, 'dist')\n\t}\n}\n```\n\n- JSon 文件中不能以有注释\n- 使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；\n\n```javascript\n  // 例:\n  \"scripts\": {\n    \"dev\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm run dev\n  // 例:\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n  },\n  // 启动命令为 npm start\n\t// 如果键名是start，可以省略写run\n```\n\n- 配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json\n\n```javascript\n- \"scripts\": {\n\t\"start\": \"webpack-dev-server --inline --hot --open --port 3000\"\n\t}\n```\n\n- 配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库\n\n```javascript\n{\n  test: /\\.js$/,\n  exclude: /(node_modules|bower_components)/,//忽略目录\n  use: {\n    loader: 'babel-loader',\n    options: {\n      presets: ['@babel/preset-env']\n    }\n  }\n}\n```\n\n- 解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！\n- 解析文件的话，要去下载各种文件类型的 loader\n- webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了\n- package.json 对象中最后一个参数项，不能书写逗号\n\n### CLI\n\n- （command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思\n- vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具\n\n### 打包的工程目录中 src 源码所在文件，dist 发布的目录\n","slug":"Webpack","published":1,"updated":"2020-04-07T14:40:28.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8q1pzy7000ebhc3c36xfns3","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><ul>\n<li>安装 webpack</li>\n<li>配置 webpack.config.js<blockquote>\n<p>官方教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2Mud2VicGFjay1jaGluYS5vcmcvY29uZmlndXJhdGlvbi8jLQ==\">https://doc.webpack-china.org/configuration/#-<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: <span class=\"string\">'./foo.js'</span>,</span><br><span class=\"line\">\t\toutput: &#123;</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'foo.bundle.js'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: <span class=\"string\">'babel-loader'</span>，</span><br><span class=\"line\">\t\t\t\tinclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\texclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app/demo-files\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最佳实践：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> (webpack.optimize.UglifyJsPlugin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(template: <span class=\"string\">'./src/index.html'</span>)</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<ul>\n<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>\n<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install --save-dev html-webpack-plugin</span></span><br><span class=\"line\"><span class=\"comment\">// 在webpack.config.js中配置：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">\t\tprint: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> cleanWebpackPlugin([<span class=\"string\">'dist'</span>]), <span class=\"comment\">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttitle: <span class=\"string\">'页面标题'</span>, <span class=\"comment\">//生成页面标题</span></span><br><span class=\"line\">\t\t\tfilename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">//要生成的文件名</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'index.html'</span> <span class=\"comment\">//要生成页面的时候的模板</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput: &#123;</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JSon 文件中不能以有注释</li>\n<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm run dev</span></span><br><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm start</span></span><br><span class=\"line\"><span class=\"comment\">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,<span class=\"comment\">//忽略目录</span></span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>\n<li>解析文件的话，要去下载各种文件类型的 loader</li>\n<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>\n<li>package.json 对象中最后一个参数项，不能书写逗号</li>\n</ul>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><ul>\n<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>\n<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>\n</ul>\n<h3 id=\"打包的工程目录中-src-源码所在文件，dist-发布的目录\"><a href=\"#打包的工程目录中-src-源码所在文件，dist-发布的目录\" class=\"headerlink\" title=\"打包的工程目录中 src 源码所在文件，dist 发布的目录\"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3>","site":{"data":{}},"excerpt":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><ul>\n<li>安装 webpack</li>\n<li>配置 webpack.config.js<blockquote>\n<p>官方教程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2Mud2VicGFjay1jaGluYS5vcmcvY29uZmlndXJhdGlvbi8jLQ==\">https://doc.webpack-china.org/configuration/#-<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: <span class=\"string\">'./foo.js'</span>,</span><br><span class=\"line\">\t\toutput: &#123;</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>),</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'foo.bundle.js'</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>:</span><br><span class=\"line\">\t\trules: [</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\ttest: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">\t\t\t\tuse: <span class=\"string\">'babel-loader'</span>，</span><br><span class=\"line\">\t\t\t\tinclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\texclude: [</span><br><span class=\"line\">\t\t  path.resolve(__dirname, <span class=\"string\">\"app/demo-files\"</span>)</span><br><span class=\"line\">\t\t],</span><br><span class=\"line\">\t\t<span class=\"comment\">// 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// test 和 include 具有相同的作用，都是必须匹配选项</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// exclude 是必不匹配选项（优先于 test 和 include）</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 最佳实践：</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 只在 test 和 文件名匹配 中使用正则表达式</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 在 include 和 exclude 中使用绝对路径数组</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// - 尽量避免 exclude，更倾向于使用 include</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">\t\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> (webpack.optimize.UglifyJsPlugin)</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(template: <span class=\"string\">'./src/index.html'</span>)</span><br><span class=\"line\">\t  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","more":"<ul>\n<li>模块打包（默认只能打包 JS 模块，规则 CommonJS 等模块规范），让 webpack 支持其他文件类型打包，要选择合适的 loader - nodejs 书写模块规范 模块化规范 CommonJs,AMD,ES6 modules,</li>\n<li>Webpack - build-tool 构建工具 - loader webpack 默认只能打包 JS，loader 可以帮助我们打包其他的文件类型 - sass-loader 下载时，必须安装 ruby 或者 python 环境才能使用； - 安装 webpack-dev-server 热启动插件，必须在项目在安装 webpack，要不然会报错！ - webpack 使用方法：<br>在命令行 输入 webpack 入口文件(app.js) 输出文件（build.js） - 配置 webpack ； 使用 webpack.config.js；让 webpack 支持其他文件类型打包，要选择合适的 loader - url-loader 和 file-loader 类似，url-loader 加载不了的使用 file-loader 加载； - HtmlWebpackPlugin 插件(自动在 output 目录中生成文件)以及，配置安装</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// npm install --save-dev html-webpack-plugin</span></span><br><span class=\"line\"><span class=\"comment\">// 在webpack.config.js中配置：</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">\tentry: &#123;</span><br><span class=\"line\">\t\tapp: <span class=\"string\">'./src/index.js'</span>,</span><br><span class=\"line\">\t\tprint: <span class=\"string\">'./src/print.js'</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tplugins: [</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> cleanWebpackPlugin([<span class=\"string\">'dist'</span>]), <span class=\"comment\">//数组内可以放置多个要删除的目录，放置在HtmlWebpackPlugin插件前</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">\t\t\ttitle: <span class=\"string\">'页面标题'</span>, <span class=\"comment\">//生成页面标题</span></span><br><span class=\"line\">\t\t\tfilename: <span class=\"string\">'index.html'</span>, <span class=\"comment\">//要生成的文件名</span></span><br><span class=\"line\">\t\t\ttemplate: <span class=\"string\">'index.html'</span> <span class=\"comment\">//要生成页面的时候的模板</span></span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\toutput: &#123;</span><br><span class=\"line\">\t\tfilename: <span class=\"string\">'[name].bundle.js'</span>,</span><br><span class=\"line\">\t\tpath: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JSon 文件中不能以有注释</li>\n<li>使用 package.json 中的 scripts 键名是要启动的命令的简写，值是要启动的命令（这个个命令可以随意写，反正就是要在命令行中执行的命令，就可以写在这里）；</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"dev\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm run dev</span></span><br><span class=\"line\"> <span class=\"comment\">// 例:</span></span><br><span class=\"line\"> <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">   <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\"> &#125;,</span><br><span class=\"line\"> <span class=\"comment\">// 启动命令为 npm start</span></span><br><span class=\"line\"><span class=\"comment\">// 如果键名是start，可以省略写run</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 HMR 模块热替换，热替换这个插件，必须配置在项目目录，因为配置全局的话，不会有热替换的效果，浏览器不会自动刷新；插件 webpack-dev-sever 在 package.json</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --inline --hot --open --port 3000\"</span></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>配置 ES6 语法降级，bable-loader，以及 bable-core,bable 依赖的核心库，bable-preset-env 语法字典库</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">  exclude: <span class=\"regexp\">/(node_modules|bower_components)/</span>,<span class=\"comment\">//忽略目录</span></span><br><span class=\"line\">  use: &#123;</span><br><span class=\"line\">    loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">    options: &#123;</span><br><span class=\"line\">      presets: [<span class=\"string\">'@babel/preset-env'</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>解析 vue 模板，vue-loader，这个模板安装后，可能会发生错误，就是需要在安装另外一个模块，安装上就好了！</li>\n<li>解析文件的话，要去下载各种文件类型的 loader</li>\n<li>webpack 可以打包各种模块，js 就是模块或者说是包，我们可以直接使用 CommenJS 或者 ES6 等规范的语法，导入各种各样我们需要的模块，并把它并把导入的模块用对象包裹起来，我们就可以调用里边的方法了</li>\n<li>package.json 对象中最后一个参数项，不能书写逗号</li>\n</ul>\n<h3 id=\"CLI\"><a href=\"#CLI\" class=\"headerlink\" title=\"CLI\"></a>CLI</h3><ul>\n<li>（command-line interface，命令行界面）是指可在用户提示符下键入可执行指令的界面，它通常不支持鼠标，用户通过键盘输入指令，计算机接收到指令后，予以执行。CLI 在汇编指令中也有关闭中断的意思</li>\n<li>vue-cli vue 脚手架 ，是为了快速构建一个项目环境的命令行操作工具</li>\n</ul>\n<h3 id=\"打包的工程目录中-src-源码所在文件，dist-发布的目录\"><a href=\"#打包的工程目录中-src-源码所在文件，dist-发布的目录\" class=\"headerlink\" title=\"打包的工程目录中 src 源码所在文件，dist 发布的目录\"></a>打包的工程目录中 src 源码所在文件，dist 发布的目录</h3>"},{"layout":"post","title":"eslint-vscode-setting","subtitle":"eslint-vscode-setting","date":"2018-11-29T16:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","top":2,"_content":"> ## 第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\n\n```bash\nnpm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g\n```\n<!-- more -->\n> ## 第二步：在任意目录放置.eslintrc.js\n>\n> ## 第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\n>\n> ## 第四步：在 vscode 中的配置\n\n```javascript\n\t// eslint config start\n\t\"eslint.autoFixOnSave\": true,\n\t\"eslint.options\": {\n\t\t\"configFile\": \"C:/Users/Mark/.eslint/.eslintrc.js\"\n\t},\n\t\"eslint.validate\": [\n\t\t\"javascript\",\n\t\t\"javascriptreact\",\n\t\t\"html\",\n\t\t\"vue\",\n\t\t{\n\t\t\t\"language\": \"vue\",\n\t\t\t\"autoFix\": true\n\t\t}\n\t],\n\t\"vetur.format.options.tabSize\": 2,\n\t\"vetur.format.options.useTabs\": true,\n\t\"vetur.format.defaultFormatterOptions\": {\n\t\t\"prettier\": {\n\t\t\t// Prettier option here\n\t\t\t\"semi\": false,\n\t\t\t\"tabWidth\": 2,\n\t\t\t\"useTabs\": true,\n\t\t\t\"singleQuote\": true\n\t\t},\n\t\t\"prettyhtml\": {\n\t\t\t\"printWidth\": 100, // No line exceeds 100 characters\n\t\t\t\"singleQuote\": false // Prefer double quotes over single quotes\n\t\t}\n\t},\n\t// prettier 格式化配置\n\t\"prettier.tabWidth\": 2,\n\t\"prettier.useTabs\": true,\n\t\"prettier.singleQuote\": true,\n\t\"prettier.semi\": false,\n\t\"stylusSupremacy.insertColons\": false, // 是否插入冒号\n\t\"stylusSupremacy.insertSemicolons\": false, // 是否插入分好\n\t\"stylusSupremacy.insertBraces\": false, // 是否插入大括号\n\t\"stylusSupremacy.insertNewLineAroundImports\": false, // import之后是否换行\n\t\"stylusSupremacy.insertNewLineAroundBlocks\": false,\n```\n","source":"_posts/eslint-vscode-setting.md","raw":"---\nlayout: post\ntitle: 'eslint-vscode-setting'\nsubtitle: \"eslint-vscode-setting\"\ndate: 2018-11-30\nauthor: 'Mark'\ncategories: JavaScript #分类\nheader-img: 'img/post-bg-js-version.jpg'\ntop: 2\ntags:\n  - 前端开发\n  - JavaScript\n  - VSCode\n  - ESLint\n---\n> ## 第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\n\n```bash\nnpm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g\n```\n<!-- more -->\n> ## 第二步：在任意目录放置.eslintrc.js\n>\n> ## 第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\n>\n> ## 第四步：在 vscode 中的配置\n\n```javascript\n\t// eslint config start\n\t\"eslint.autoFixOnSave\": true,\n\t\"eslint.options\": {\n\t\t\"configFile\": \"C:/Users/Mark/.eslint/.eslintrc.js\"\n\t},\n\t\"eslint.validate\": [\n\t\t\"javascript\",\n\t\t\"javascriptreact\",\n\t\t\"html\",\n\t\t\"vue\",\n\t\t{\n\t\t\t\"language\": \"vue\",\n\t\t\t\"autoFix\": true\n\t\t}\n\t],\n\t\"vetur.format.options.tabSize\": 2,\n\t\"vetur.format.options.useTabs\": true,\n\t\"vetur.format.defaultFormatterOptions\": {\n\t\t\"prettier\": {\n\t\t\t// Prettier option here\n\t\t\t\"semi\": false,\n\t\t\t\"tabWidth\": 2,\n\t\t\t\"useTabs\": true,\n\t\t\t\"singleQuote\": true\n\t\t},\n\t\t\"prettyhtml\": {\n\t\t\t\"printWidth\": 100, // No line exceeds 100 characters\n\t\t\t\"singleQuote\": false // Prefer double quotes over single quotes\n\t\t}\n\t},\n\t// prettier 格式化配置\n\t\"prettier.tabWidth\": 2,\n\t\"prettier.useTabs\": true,\n\t\"prettier.singleQuote\": true,\n\t\"prettier.semi\": false,\n\t\"stylusSupremacy.insertColons\": false, // 是否插入冒号\n\t\"stylusSupremacy.insertSemicolons\": false, // 是否插入分好\n\t\"stylusSupremacy.insertBraces\": false, // 是否插入大括号\n\t\"stylusSupremacy.insertNewLineAroundImports\": false, // import之后是否换行\n\t\"stylusSupremacy.insertNewLineAroundBlocks\": false,\n```\n","slug":"eslint-vscode-setting","published":1,"updated":"2020-04-07T14:39:41.468Z","comments":1,"photos":[],"link":"","_id":"ck8q1pzy8000fbhc3705cgjb9","content":"<blockquote>\n<h2 id=\"第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\"><a href=\"#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\" class=\"headerlink\" title=\"第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<blockquote>\n<h2 id=\"第二步：在任意目录放置-eslintrc-js\"><a href=\"#第二步：在任意目录放置-eslintrc-js\" class=\"headerlink\" title=\"第二步：在任意目录放置.eslintrc.js\"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id=\"第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\"><a href=\"#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\" class=\"headerlink\" title=\"第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id=\"第四步：在-vscode-中的配置\"><a href=\"#第四步：在-vscode-中的配置\" class=\"headerlink\" title=\"第四步：在 vscode 中的配置\"></a>第四步：在 vscode 中的配置</h2></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint config start</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"C:/Users/Mark/.eslint/.eslintrc.js\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">\t<span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prettier option here</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"printWidth\"</span>: <span class=\"number\">100</span>, <span class=\"comment\">// No line exceeds 100 characters</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">false</span> <span class=\"comment\">// Prefer double quotes over single quotes</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// prettier 格式化配置</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<h2 id=\"第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\"><a href=\"#第一步：全局安装-eslint-babel-eslint-eslint-plugin-html-eslint-plugin-react-eslint-plugin-vue\" class=\"headerlink\" title=\"第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue\"></a>第一步：全局安装 eslint,babel-eslint,eslint-plugin-html,eslint-plugin-react,eslint-plugin-vue</h2></blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i eslint babel-eslint eslint-plugin-html eslint-plugin-react eslint-plugin-vue -g</span><br></pre></td></tr></table></figure>","more":"<blockquote>\n<h2 id=\"第二步：在任意目录放置-eslintrc-js\"><a href=\"#第二步：在任意目录放置-eslintrc-js\" class=\"headerlink\" title=\"第二步：在任意目录放置.eslintrc.js\"></a>第二步：在任意目录放置.eslintrc.js</h2><h2 id=\"第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\"><a href=\"#第三步：在-vscode-下载-ESLint-Prettier-Code-formatter-stylus-language-stylus-Vetur\" class=\"headerlink\" title=\"第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur\"></a>第三步：在 vscode 下载 ESLint,Prettier - Code formatter,stylus,language-stylus,Vetur</h2><h2 id=\"第四步：在-vscode-中的配置\"><a href=\"#第四步：在-vscode-中的配置\" class=\"headerlink\" title=\"第四步：在 vscode 中的配置\"></a>第四步：在 vscode 中的配置</h2></blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// eslint config start</span></span><br><span class=\"line\"><span class=\"string\">\"eslint.autoFixOnSave\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"eslint.options\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"configFile\"</span>: <span class=\"string\">\"C:/Users/Mark/.eslint/.eslintrc.js\"</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">\"eslint.validate\"</span>: [</span><br><span class=\"line\">\t<span class=\"string\">\"javascript\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"javascriptreact\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"html\"</span>,</span><br><span class=\"line\">\t<span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"language\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"autoFix\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">],</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.tabSize\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.options.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"vetur.format.defaultFormatterOptions\"</span>: &#123;</span><br><span class=\"line\">\t<span class=\"string\">\"prettier\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Prettier option here</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">\"prettyhtml\"</span>: &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">\"printWidth\"</span>: <span class=\"number\">100</span>, <span class=\"comment\">// No line exceeds 100 characters</span></span><br><span class=\"line\">\t\t<span class=\"string\">\"singleQuote\"</span>: <span class=\"literal\">false</span> <span class=\"comment\">// Prefer double quotes over single quotes</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// prettier 格式化配置</span></span><br><span class=\"line\"><span class=\"string\">\"prettier.tabWidth\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.useTabs\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.singleQuote\"</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"><span class=\"string\">\"prettier.semi\"</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertColons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入冒号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertSemicolons\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入分好</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertBraces\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否插入大括号</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundImports\"</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// import之后是否换行</span></span><br><span class=\"line\"><span class=\"string\">\"stylusSupremacy.insertNewLineAroundBlocks\"</span>: <span class=\"literal\">false</span>,</span><br></pre></td></tr></table></figure>"},{"title":"MAC常用软件推荐","layout":"post","author":"Mark","date":"2019-06-10T01:44:40.000Z","_content":"\n## Coding IDE\n\n- Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件 [官方网站](https://code.visualstudio.com/)\n- atom github 出品开源编辑器 [官方网站](https://atom.io/),[中文社区](https://atom-china.org/)\n- sublime3 收费编辑器 [官方网站](https://www.sublimetext.com/)\n- 微信开发者工具（开发微信小程序和微信公众号） [官方网站](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)\n- 支付宝小程序（开发支付宝小程序） [官方网站](https://opendocs.alipay.com/mini/ide/download)\n- HBuilder DCloud 出品 IDE [官方网站](https://dcloud.io/)\n- Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。 [官方网站](https://www.jetbrains.com/webstorm/)\n<!-- more -->\n\n## Git GUI\n\n- SourceTre 一个免费开源的 windows 和 mac 上的 git 客户端 [官方网站](https://www.sourcetreeapp.com/)\n\n- Gitkraken 一个免费开源的 windows、mac以及 linux 上的 git 客户端,ui 很棒！ [官方网站](https://www.gitkraken.com/)\n\n## 调试软件\n\n- Charles是HTTP代理/ HTTP监视器/反向代理，使开发人员可以查看其计算机与Internet之间的所有HTTP和SSL / HTTPS通信。这包括请求，响应和HTTP标头（其中包含cookie和缓存信息） [官方网站](https://www.charlesproxy.com/)\n\n- Fiddler可定制的免费工具、Web会话操作、网页调试 [官方网站](https://www.telerik.com/fiddler)\n\n- Wireshark专业的抓包工具 [官方网站](https://www.wireshark.org/)\n\n## MD文档编写\n\n- Markeditor [官方网站](https://www.markeditor.com/)\n- MWeb [官方网站](https://zh.mweb.im/)\n- Typora [官方网站](https://typora.io/)\n- Markdown 在线编辑器[官方网站](https://pandao.github.io/editor.md/)\n\n## 邮件收发\n\n- 网易邮箱\n- 腾讯邮箱\n- Foxmail\n\n## 终端\n\n- iterm2 [官方网站](https://www.iterm2.com/downloads.html)\n\n- Iterm2 配置[Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）](https://www.cnblogs.com/weixuqin/p/7029177.html)\n\n## 小型工具软件\n\n- SwitchHosts 切换 hosts 工具 [官方网站](https://oldj.github.io/SwitchHosts/)\n- Snipaste截图工具 [官方网站](https://zh.snipaste.com/)\n\n## Tip\n\n- 本文不提供下载链接，只做推荐！\n","source":"_posts/mac常用软件.md","raw":"---\ntitle: MAC常用软件推荐\nlayout: post\nauthor: \"Mark\"\ncategories: Mac #分类\ndate: 2019-06-10 09:44:40\ntags:\n  - 前端开发\n  - Mac\n  - 软件\n---\n\n## Coding IDE\n\n- Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件 [官方网站](https://code.visualstudio.com/)\n- atom github 出品开源编辑器 [官方网站](https://atom.io/),[中文社区](https://atom-china.org/)\n- sublime3 收费编辑器 [官方网站](https://www.sublimetext.com/)\n- 微信开发者工具（开发微信小程序和微信公众号） [官方网站](https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html)\n- 支付宝小程序（开发支付宝小程序） [官方网站](https://opendocs.alipay.com/mini/ide/download)\n- HBuilder DCloud 出品 IDE [官方网站](https://dcloud.io/)\n- Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。 [官方网站](https://www.jetbrains.com/webstorm/)\n<!-- more -->\n\n## Git GUI\n\n- SourceTre 一个免费开源的 windows 和 mac 上的 git 客户端 [官方网站](https://www.sourcetreeapp.com/)\n\n- Gitkraken 一个免费开源的 windows、mac以及 linux 上的 git 客户端,ui 很棒！ [官方网站](https://www.gitkraken.com/)\n\n## 调试软件\n\n- Charles是HTTP代理/ HTTP监视器/反向代理，使开发人员可以查看其计算机与Internet之间的所有HTTP和SSL / HTTPS通信。这包括请求，响应和HTTP标头（其中包含cookie和缓存信息） [官方网站](https://www.charlesproxy.com/)\n\n- Fiddler可定制的免费工具、Web会话操作、网页调试 [官方网站](https://www.telerik.com/fiddler)\n\n- Wireshark专业的抓包工具 [官方网站](https://www.wireshark.org/)\n\n## MD文档编写\n\n- Markeditor [官方网站](https://www.markeditor.com/)\n- MWeb [官方网站](https://zh.mweb.im/)\n- Typora [官方网站](https://typora.io/)\n- Markdown 在线编辑器[官方网站](https://pandao.github.io/editor.md/)\n\n## 邮件收发\n\n- 网易邮箱\n- 腾讯邮箱\n- Foxmail\n\n## 终端\n\n- iterm2 [官方网站](https://www.iterm2.com/downloads.html)\n\n- Iterm2 配置[Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）](https://www.cnblogs.com/weixuqin/p/7029177.html)\n\n## 小型工具软件\n\n- SwitchHosts 切换 hosts 工具 [官方网站](https://oldj.github.io/SwitchHosts/)\n- Snipaste截图工具 [官方网站](https://zh.snipaste.com/)\n\n## Tip\n\n- 本文不提供下载链接，只做推荐！\n","slug":"mac常用软件","published":1,"updated":"2020-04-17T08:50:41.272Z","_id":"ck8q1pzy9000jbhc3hwmwdqn9","comments":1,"photos":[],"link":"","content":"<h2 id=\"Coding-IDE\"><a href=\"#Coding-IDE\" class=\"headerlink\" title=\"Coding IDE\"></a>Coding IDE</h2><ul>\n<li>Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>atom github 出品开源编辑器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLmlvLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span>,<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLWNoaW5hLm9yZy8=\">中文社区<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>sublime3 收费编辑器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>微信开发者工具（开发微信小程序和微信公众号） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL2Rvd25sb2FkLmh0bWw=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>支付宝小程序（开发支付宝小程序） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL21pbmkvaWRlL2Rvd25sb2Fk\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>HBuilder DCloud 出品 IDE <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kY2xvdWQuaW8v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span><a id=\"more\"></a>\n\n</li>\n</ul>\n<h2 id=\"Git-GUI\"><a href=\"#Git-GUI\" class=\"headerlink\" title=\"Git GUI\"></a>Git GUI</h2><ul>\n<li><p>SourceTre 一个免费开源的 windows 和 mac 上的 git 客户端 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Gitkraken 一个免费开源的 windows、mac以及 linux 上的 git 客户端,ui 很棒！ <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0a3Jha2VuLmNvbS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"调试软件\"><a href=\"#调试软件\" class=\"headerlink\" title=\"调试软件\"></a>调试软件</h2><ul>\n<li><p>Charles是HTTP代理/ HTTP监视器/反向代理，使开发人员可以查看其计算机与Internet之间的所有HTTP和SSL / HTTPS通信。这包括请求，响应和HTTP标头（其中包含cookie和缓存信息） <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Fiddler可定制的免费工具、Web会话操作、网页调试 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVsZXJpay5jb20vZmlkZGxlcg==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Wireshark专业的抓包工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"MD文档编写\"><a href=\"#MD文档编写\" class=\"headerlink\" title=\"MD文档编写\"></a>MD文档编写</h2><ul>\n<li>Markeditor <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFya2VkaXRvci5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>MWeb <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5td2ViLmltLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Typora <span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBvcmEuaW8v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Markdown 在线编辑器<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5kYW8uZ2l0aHViLmlvL2VkaXRvci5tZC8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"邮件收发\"><a href=\"#邮件收发\" class=\"headerlink\" title=\"邮件收发\"></a>邮件收发</h2><ul>\n<li>网易邮箱</li>\n<li>腾讯邮箱</li>\n<li>Foxmail</li>\n</ul>\n<h2 id=\"终端\"><a href=\"#终端\" class=\"headerlink\" title=\"终端\"></a>终端</h2><ul>\n<li><p>iterm2 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXRlcm0yLmNvbS9kb3dubG9hZHMuaHRtbA==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Iterm2 配置<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2VpeHVxaW4vcC83MDI5MTc3Lmh0bWw=\">Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"小型工具软件\"><a href=\"#小型工具软件\" class=\"headerlink\" title=\"小型工具软件\"></a>小型工具软件</h2><ul>\n<li>SwitchHosts 切换 hosts 工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbGRqLmdpdGh1Yi5pby9Td2l0Y2hIb3N0cy8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Snipaste截图工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5zbmlwYXN0ZS5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><ul>\n<li>本文不提供下载链接，只做推荐！</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"Coding-IDE\"><a href=\"#Coding-IDE\" class=\"headerlink\" title=\"Coding IDE\"></a>Coding IDE</h2><ul>\n<li>Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode 常用插件 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>atom github 出品开源编辑器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLmlvLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span>,<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hdG9tLWNoaW5hLm9yZy8=\">中文社区<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>sublime3 收费编辑器 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>微信开发者工具（开发微信小程序和微信公众号） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXJzLndlaXhpbi5xcS5jb20vbWluaXByb2dyYW0vZGV2L2RldnRvb2xzL2Rvd25sb2FkLmh0bWw=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>支付宝小程序（开发支付宝小程序） <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vcGVuZG9jcy5hbGlwYXkuY29tL21pbmkvaWRlL2Rvd25sb2Fk\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>HBuilder DCloud 出品 IDE <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kY2xvdWQuaW8v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Webstorm 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费。 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamV0YnJhaW5zLmNvbS93ZWJzdG9ybS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span>","more":"</li>\n</ul>\n<h2 id=\"Git-GUI\"><a href=\"#Git-GUI\" class=\"headerlink\" title=\"Git GUI\"></a>Git GUI</h2><ul>\n<li><p>SourceTre 一个免费开源的 windows 和 mac 上的 git 客户端 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc291cmNldHJlZWFwcC5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Gitkraken 一个免费开源的 windows、mac以及 linux 上的 git 客户端,ui 很棒！ <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2l0a3Jha2VuLmNvbS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"调试软件\"><a href=\"#调试软件\" class=\"headerlink\" title=\"调试软件\"></a>调试软件</h2><ul>\n<li><p>Charles是HTTP代理/ HTTP监视器/反向代理，使开发人员可以查看其计算机与Internet之间的所有HTTP和SSL / HTTPS通信。这包括请求，响应和HTTP标头（其中包含cookie和缓存信息） <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY2hhcmxlc3Byb3h5LmNvbS8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Fiddler可定制的免费工具、Web会话操作、网页调试 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVsZXJpay5jb20vZmlkZGxlcg==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Wireshark专业的抓包工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"MD文档编写\"><a href=\"#MD文档编写\" class=\"headerlink\" title=\"MD文档编写\"></a>MD文档编写</h2><ul>\n<li>Markeditor <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWFya2VkaXRvci5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>MWeb <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5td2ViLmltLw==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Typora <span class=\"exturl\" data-url=\"aHR0cHM6Ly90eXBvcmEuaW8v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Markdown 在线编辑器<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wYW5kYW8uZ2l0aHViLmlvL2VkaXRvci5tZC8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"邮件收发\"><a href=\"#邮件收发\" class=\"headerlink\" title=\"邮件收发\"></a>邮件收发</h2><ul>\n<li>网易邮箱</li>\n<li>腾讯邮箱</li>\n<li>Foxmail</li>\n</ul>\n<h2 id=\"终端\"><a href=\"#终端\" class=\"headerlink\" title=\"终端\"></a>终端</h2><ul>\n<li><p>iterm2 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaXRlcm0yLmNvbS9kb3dubG9hZHMuaHRtbA==\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n<li><p>Iterm2 配置<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vd2VpeHVxaW4vcC83MDI5MTc3Lmh0bWw=\">Mac下终端配置（iterm2 + oh-my-zsh + solarized配色方案）<i class=\"fa fa-external-link-alt\"></i></span></p>\n</li>\n</ul>\n<h2 id=\"小型工具软件\"><a href=\"#小型工具软件\" class=\"headerlink\" title=\"小型工具软件\"></a>小型工具软件</h2><ul>\n<li>SwitchHosts 切换 hosts 工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9vbGRqLmdpdGh1Yi5pby9Td2l0Y2hIb3N0cy8=\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>Snipaste截图工具 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC5zbmlwYXN0ZS5jb20v\">官方网站<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><ul>\n<li>本文不提供下载链接，只做推荐！</li>\n</ul>"},{"layout":"post","title":"shell脚本学习","subtitle":"shell脚本学习","date":"2018-12-23T16:00:00.000Z","author":"Mark","header-img":"img/post-bg-js-version.jpg","top":5,"_content":"\n### 前言\n\n- 为什么学习脚本编写???\n- 你有没有遇到过这样场景，繁杂并且重复的操作 N 多件~~~\n- 那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）\n  ![image](/assets/img/2018/12/20150424040700733.jpg)\n  好了！那么我们步入今天的正题！\n<!-- more -->\n### 一、shell 中特殊变量\n\n```sh\n#!/bin/bash\necho $0    # 当前脚本的文件名（间接运行时还包括绝对路径）。\necho $n    # 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。\necho $#    # 传递给脚本或函数的参数个数。\necho $*    # 传递给脚本或函数的所有参数。\necho $@    # 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。\necho $?    # 上个命令的退出状态，或函数的返回值。\necho $$    # 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。\necho $_    # 上一个命令的最后一个参数\necho $!    # 后台运行的最后一个进程的 ID 号\n\n```\n\n示例：\n\n```sh\n# 现在保存为一个test.sh脚本，然后加上几个参数运行：\n$ ./test.sh test test1 test2 test3 test4\n# 输出结果\n./test.sh                      # $0\n                               # $n\n5                              # $#\ntest test1 test2 test3 test4   # $*\ntest test1 test2 test3 test4   # $@\n0                              # $?\n12305                          # $$\n12305                          # $_\n                               # $!\n\n```\n> &emsp;$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (\"\") 包含时，都以\"$1\"\"$2\" … \"$n\" 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (\"\") 包含时，\"$*\"会将所有的参数作为一个整体，以\"$1 $2 … $n\"的形式输出所有参数；\"$@\"会将各个参数分开，以\"$1\"\"$2\" … \"$n\" 的形式输出所有参数。\n\n例如：\n```sh\n#!/bin/bash\necho \"\\$*=\" $*\necho \"\\\"\\$*\\\"=\" \"$*\"\n\necho \"\\$@=\" $@\necho \"\\\"\\$@\\\"=\" \"$@\"\n\necho \"print each param from \\$*\"\nfor var in $*\ndo\n    echo \"$var\"\ndone\n\necho \"print each param from \\$@\"\nfor var in $@\ndo\n    echo \"$var\"\ndone\n\necho \"从 \\\"\\$*\\\" 获取并打印每一个参数\"\nfor var in \"$*\"\ndo\n    echo \"$var\"\ndone\n\necho \"从 \\\"\\$@\\\" 获取并打印每一个参数\"\nfor var in \"$@\"\ndo\n    echo \"$var\"\ndone\n\n```\n返回结果：\n\n```sh\n\n$*= test test1 test2\n\"$*\"= test test1 test2\n$@= test test1 test2\n\"$@\"= test test1 test2\nprint each param from $*\ntest\ntest1\ntest2\nprint each param from $@\ntest\ntest1\ntest2\n从 \"$*\" 获取并打印每一个参数\ntest test1 test2\n从 \"$@\" 获取并打印每一个参数\ntest\ntest1\ntest2\n\n```\n### 二、手工处理参数\n\n```sh\nwhile [ -n \"$1\" ]\ndo\n  case \"$1\" in\n    -a)\n        echo \"发现 -a 选项\"\n        ;;\n    -b)\n        echo \"发现 -b 选项\"\n        echo \"-b 选项的参数值是：$2\"\n        shift\n        ;;\n    -c)\n        echo \"发现 -c 选项\"\n        echo \"-c 选项的参数值是：$2\"\n        shift\n        ;;\n    -d)\n        echo \"发现 -d 选项\"\n        ;;\n    *)\n        echo \"$1 is not an option\"\n        ;;\n  esac\n  shift\ndone\n\n# 运行：./test.sh -a -b t2 -c t3 -d\n# 返回结果\n发现 -a 选项\n发现 -b 选项\n-b 选项的参数值是：t2\n发现 -c 选项\n-c 选项的参数值是：t3\n发现 -d 选项\n```\n\n### 三、getopt 处理参数\n\n下面 getopt ab:c:d \"$@\" 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。\n```sh\nGETOPTOUT=`getopt ab:c:d \"$@\"`\n  set -- $GETOPTOUT\n  while [ -n \"$1\" ]\n  do\n  case $1 in\n    -a)\n      echo \"发现 -a 选项\"\n      ;;\n    -b)\n      echo \"发现 -b 选项\"\n      echo \"-b 选项的参数值是：$2\"\n      shift\n      ;;\n    -c)\n      echo \"发现 -c 选项\"\n      echo \"-c 选项的参数值是：$2\"\n      shift\n      ;;\n    -d)\n      echo \"发现 -d 选项\"\n      ;;\n    --)\n      shift\n      break\n      ;;\n    *)\n      echo \"未知选项:\"$1\"\"\n      ;;\n  esac\n  shift\n  done\n\n# 运行\n ./proxychains4.sh -a -b t2 -c t3 -d\n# 返回\n发现 -a 选项\n发现 -b 选项\n-b 选项的参数值是：t2\n发现 -c 选项\n-c 选项的参数值是：t3\n发现 -d 选项\n```\n\n```sh\nARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- \"$@\"))\neval set -- \"$ARGV\"\nwhile true\ndo\ncase \"$1\" in\n  -短选项1|--长选项1)\n    process\n    shift\n    ;;\n  -短选项2|--长选项2)\n    # 获取选项\n    opt = $2\n    process\n    shift 2\n    ;;\n\n  ... ...\n\n  -短选项3|--长选项3)\n    process\n    ;;\n  --)\n    break\n    ;;\nesac\ndone\n\n```\n> 关于 eval 这个命令，用一个小例子解释：\n\n```sh\nfoo=10\nx=foo\ny='$'$x\necho $y\necho $foo\neval y='$'$x\necho $y\n\n# 返回\n$foo\n10\n10\n\n# 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。\n```\n\n### 四、getopts 处理参数\n\n```sh\nwhile getopts :ab:c:d ARGS\ndo\ncase $ARGS in\n  a)\n    echo \"发现 -a 选项\"\n    ;;\n  b)\n    echo \"发现 -b 选项\"\n    echo \"-b 选项的值是：$OPTARG\"\n    ;;\n  c)\n    echo \"发现 -c 选项\"\n    echo \"-c 选项的值是：$OPTARG\"\n    ;;\n  d)\n    echo \"发现 -d 参数\"\n    ;;\n  *)\n    echo \"未知选项：$ARGS\"\n    ;;\nesac\ndone\n\n```\n这种方法最方便简单。接下来基于这种方法深入讲解。\n\n\n### 五、传参意外处理\n```sh\n\"?\")\n  echo \"未知选项 $OPTARG\"\n  ;;\n\":\")\n  echo \"没有输入任何选项 $OPTARG\"\n  ;;\n*)\n  # 发生不能预料的错误时。\n  echo \"处理选项时出现未知错误\"\n  ;;\n\n```\n### 参考链接：\n> [Shell 脚本传参方法总结](https://www.jianshu.com/p/d3cd36c97abc)</br>[Bash 参数和参数扩展](https://www.ibm.com/developerworks/cn/linux/l-bash-parameters.html)</br>[shell中的getopt与getopts](http://www.361way.com/shell-getopt/4981.html)","source":"_posts/shell脚本学习.md","raw":"---\nlayout: post\ntitle: \"shell脚本学习\"\nsubtitle: \"shell脚本学习\"\ndate: 2018-12-24\nauthor: \"Mark\"\nheader-img: \"img/post-bg-js-version.jpg\"\ncategories: 系统命令 #分类\ntop: 5\ntags:\n  - 系统底层\n  - Shell\n  - VSCode\n  - 脚本操作\n---\n\n### 前言\n\n- 为什么学习脚本编写???\n- 你有没有遇到过这样场景，繁杂并且重复的操作 N 多件~~~\n- 那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）\n  ![image](/assets/img/2018/12/20150424040700733.jpg)\n  好了！那么我们步入今天的正题！\n<!-- more -->\n### 一、shell 中特殊变量\n\n```sh\n#!/bin/bash\necho $0    # 当前脚本的文件名（间接运行时还包括绝对路径）。\necho $n    # 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。\necho $#    # 传递给脚本或函数的参数个数。\necho $*    # 传递给脚本或函数的所有参数。\necho $@    # 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。\necho $?    # 上个命令的退出状态，或函数的返回值。\necho $$    # 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。\necho $_    # 上一个命令的最后一个参数\necho $!    # 后台运行的最后一个进程的 ID 号\n\n```\n\n示例：\n\n```sh\n# 现在保存为一个test.sh脚本，然后加上几个参数运行：\n$ ./test.sh test test1 test2 test3 test4\n# 输出结果\n./test.sh                      # $0\n                               # $n\n5                              # $#\ntest test1 test2 test3 test4   # $*\ntest test1 test2 test3 test4   # $@\n0                              # $?\n12305                          # $$\n12305                          # $_\n                               # $!\n\n```\n> &emsp;$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (\"\") 包含时，都以\"$1\"\"$2\" … \"$n\" 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (\"\") 包含时，\"$*\"会将所有的参数作为一个整体，以\"$1 $2 … $n\"的形式输出所有参数；\"$@\"会将各个参数分开，以\"$1\"\"$2\" … \"$n\" 的形式输出所有参数。\n\n例如：\n```sh\n#!/bin/bash\necho \"\\$*=\" $*\necho \"\\\"\\$*\\\"=\" \"$*\"\n\necho \"\\$@=\" $@\necho \"\\\"\\$@\\\"=\" \"$@\"\n\necho \"print each param from \\$*\"\nfor var in $*\ndo\n    echo \"$var\"\ndone\n\necho \"print each param from \\$@\"\nfor var in $@\ndo\n    echo \"$var\"\ndone\n\necho \"从 \\\"\\$*\\\" 获取并打印每一个参数\"\nfor var in \"$*\"\ndo\n    echo \"$var\"\ndone\n\necho \"从 \\\"\\$@\\\" 获取并打印每一个参数\"\nfor var in \"$@\"\ndo\n    echo \"$var\"\ndone\n\n```\n返回结果：\n\n```sh\n\n$*= test test1 test2\n\"$*\"= test test1 test2\n$@= test test1 test2\n\"$@\"= test test1 test2\nprint each param from $*\ntest\ntest1\ntest2\nprint each param from $@\ntest\ntest1\ntest2\n从 \"$*\" 获取并打印每一个参数\ntest test1 test2\n从 \"$@\" 获取并打印每一个参数\ntest\ntest1\ntest2\n\n```\n### 二、手工处理参数\n\n```sh\nwhile [ -n \"$1\" ]\ndo\n  case \"$1\" in\n    -a)\n        echo \"发现 -a 选项\"\n        ;;\n    -b)\n        echo \"发现 -b 选项\"\n        echo \"-b 选项的参数值是：$2\"\n        shift\n        ;;\n    -c)\n        echo \"发现 -c 选项\"\n        echo \"-c 选项的参数值是：$2\"\n        shift\n        ;;\n    -d)\n        echo \"发现 -d 选项\"\n        ;;\n    *)\n        echo \"$1 is not an option\"\n        ;;\n  esac\n  shift\ndone\n\n# 运行：./test.sh -a -b t2 -c t3 -d\n# 返回结果\n发现 -a 选项\n发现 -b 选项\n-b 选项的参数值是：t2\n发现 -c 选项\n-c 选项的参数值是：t3\n发现 -d 选项\n```\n\n### 三、getopt 处理参数\n\n下面 getopt ab:c:d \"$@\" 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。\n```sh\nGETOPTOUT=`getopt ab:c:d \"$@\"`\n  set -- $GETOPTOUT\n  while [ -n \"$1\" ]\n  do\n  case $1 in\n    -a)\n      echo \"发现 -a 选项\"\n      ;;\n    -b)\n      echo \"发现 -b 选项\"\n      echo \"-b 选项的参数值是：$2\"\n      shift\n      ;;\n    -c)\n      echo \"发现 -c 选项\"\n      echo \"-c 选项的参数值是：$2\"\n      shift\n      ;;\n    -d)\n      echo \"发现 -d 选项\"\n      ;;\n    --)\n      shift\n      break\n      ;;\n    *)\n      echo \"未知选项:\"$1\"\"\n      ;;\n  esac\n  shift\n  done\n\n# 运行\n ./proxychains4.sh -a -b t2 -c t3 -d\n# 返回\n发现 -a 选项\n发现 -b 选项\n-b 选项的参数值是：t2\n发现 -c 选项\n-c 选项的参数值是：t3\n发现 -d 选项\n```\n\n```sh\nARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- \"$@\"))\neval set -- \"$ARGV\"\nwhile true\ndo\ncase \"$1\" in\n  -短选项1|--长选项1)\n    process\n    shift\n    ;;\n  -短选项2|--长选项2)\n    # 获取选项\n    opt = $2\n    process\n    shift 2\n    ;;\n\n  ... ...\n\n  -短选项3|--长选项3)\n    process\n    ;;\n  --)\n    break\n    ;;\nesac\ndone\n\n```\n> 关于 eval 这个命令，用一个小例子解释：\n\n```sh\nfoo=10\nx=foo\ny='$'$x\necho $y\necho $foo\neval y='$'$x\necho $y\n\n# 返回\n$foo\n10\n10\n\n# 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。\n```\n\n### 四、getopts 处理参数\n\n```sh\nwhile getopts :ab:c:d ARGS\ndo\ncase $ARGS in\n  a)\n    echo \"发现 -a 选项\"\n    ;;\n  b)\n    echo \"发现 -b 选项\"\n    echo \"-b 选项的值是：$OPTARG\"\n    ;;\n  c)\n    echo \"发现 -c 选项\"\n    echo \"-c 选项的值是：$OPTARG\"\n    ;;\n  d)\n    echo \"发现 -d 参数\"\n    ;;\n  *)\n    echo \"未知选项：$ARGS\"\n    ;;\nesac\ndone\n\n```\n这种方法最方便简单。接下来基于这种方法深入讲解。\n\n\n### 五、传参意外处理\n```sh\n\"?\")\n  echo \"未知选项 $OPTARG\"\n  ;;\n\":\")\n  echo \"没有输入任何选项 $OPTARG\"\n  ;;\n*)\n  # 发生不能预料的错误时。\n  echo \"处理选项时出现未知错误\"\n  ;;\n\n```\n### 参考链接：\n> [Shell 脚本传参方法总结](https://www.jianshu.com/p/d3cd36c97abc)</br>[Bash 参数和参数扩展](https://www.ibm.com/developerworks/cn/linux/l-bash-parameters.html)</br>[shell中的getopt与getopts](http://www.361way.com/shell-getopt/4981.html)","slug":"shell脚本学习","published":1,"updated":"2020-04-07T14:40:02.490Z","comments":1,"photos":[],"link":"","_id":"ck8q1pzya000lbhc37r7ygl2n","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>为什么学习脚本编写???</li>\n<li>你有没有遇到过这样场景，繁杂并且重复的操作 N 多件<del>~</del></li>\n<li>那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）<br><img data-src=\"/assets/img/2018/12/20150424040700733.jpg\" alt=\"image\"><br>好了！那么我们步入今天的正题！<a id=\"more\"></a>\n<h3 id=\"一、shell-中特殊变量\"><a href=\"#一、shell-中特殊变量\" class=\"headerlink\" title=\"一、shell 中特殊变量\"></a>一、shell 中特殊变量</h3></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span>    <span class=\"comment\"># 当前脚本的文件名（间接运行时还包括绝对路径）。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$n</span>    <span class=\"comment\"># 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$#</span>    <span class=\"comment\"># 传递给脚本或函数的参数个数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $*    <span class=\"comment\"># 传递给脚本或函数的所有参数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$@</span>    <span class=\"comment\"># 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $?    <span class=\"comment\"># 上个命令的退出状态，或函数的返回值。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $$    <span class=\"comment\"># 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$_</span>    <span class=\"comment\"># 上一个命令的最后一个参数</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $!    <span class=\"comment\"># 后台运行的最后一个进程的 ID 号</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 现在保存为一个test.sh脚本，然后加上几个参数运行：</span></span><br><span class=\"line\">$ ./test.sh <span class=\"built_in\">test</span> test1 test2 test3 test4</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">./test.sh                      <span class=\"comment\"># $0</span></span><br><span class=\"line\">                               <span class=\"comment\"># $n</span></span><br><span class=\"line\">5                              <span class=\"comment\"># $#</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $*</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $@</span></span><br><span class=\"line\">0                              <span class=\"comment\"># $?</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $$</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $_</span></span><br><span class=\"line\">                               <span class=\"comment\"># $!</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&emsp;$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (“”) 包含时，都以”$1””$2” … “$n” 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (“”) 包含时，”$*”会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@”会将各个参数分开，以”$1””$2” … “$n” 的形式输出所有参数。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$*=\"</span> $*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$*\\\"=\"</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$@=\"</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$@\\\"=\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> $*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$@\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$*\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$@\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>返回结果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$*= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"$*\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"variable\">$@</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from $*</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\">从 <span class=\"string\">\"$*\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\">从 <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、手工处理参数\"><a href=\"#二、手工处理参数\" class=\"headerlink\" title=\"二、手工处理参数\"></a>二、手工处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -b)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">shift</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -c)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">shift</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -d)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is not an option\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行：./test.sh -a -b t2 -c t3 -d</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、getopt-处理参数\"><a href=\"#三、getopt-处理参数\" class=\"headerlink\" title=\"三、getopt 处理参数\"></a>三、getopt 处理参数</h3><p>下面 getopt ab:c:d “$@” 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GETOPTOUT=`getopt ab:c:d <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>`</span><br><span class=\"line\">  <span class=\"built_in\">set</span> -- <span class=\"variable\">$GETOPTOUT</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -b)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -c)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -d)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    --)</span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      <span class=\"built_in\">break</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项:\"</span><span class=\"variable\">$1</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\"> ./proxychains4.sh -a -b t2 -c t3 -d</span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"built_in\">set</span> -- <span class=\"string\">\"<span class=\"variable\">$ARGV</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  -短选项1|--长选项1)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  -短选项2|--长选项2)</span><br><span class=\"line\">    <span class=\"comment\"># 获取选项</span></span><br><span class=\"line\">    opt = <span class=\"variable\">$2</span></span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span> 2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">  -短选项3|--长选项3)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  --)</span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 eval 这个命令，用一个小例子解释：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo=10</span><br><span class=\"line\">x=foo</span><br><span class=\"line\">y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$foo</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span></span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、getopts-处理参数\"><a href=\"#四、getopts-处理参数\" class=\"headerlink\" title=\"四、getopts 处理参数\"></a>四、getopts 处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> :ab:c:d ARGS</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$ARGS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  a)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  b)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  c)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  d)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 参数\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项：<span class=\"variable\">$ARGS</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这种方法最方便简单。接下来基于这种方法深入讲解。</p>\n<h3 id=\"五、传参意外处理\"><a href=\"#五、传参意外处理\" class=\"headerlink\" title=\"五、传参意外处理\"></a>五、传参意外处理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"><span class=\"string\">\":\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"没有输入任何选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">  <span class=\"comment\"># 发生不能预料的错误时。</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"处理选项时出现未知错误\"</span></span><br><span class=\"line\">  ;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kM2NkMzZjOTdhYmM=\">Shell 脚本传参方法总结<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWJhc2gtcGFyYW1ldGVycy5odG1s\">Bash 参数和参数扩展<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4zNjF3YXkuY29tL3NoZWxsLWdldG9wdC80OTgxLmh0bWw=\">shell中的getopt与getopts<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><ul>\n<li>为什么学习脚本编写???</li>\n<li>你有没有遇到过这样场景，繁杂并且重复的操作 N 多件<del>~</del></li>\n<li>那么这个时候我们是不是可以想一些其他更快捷、更方便的方法呢！（答案是肯定的，肯定有撒因为我们人类可是很懒的高级哺乳动物）<br><img data-src=\"/assets/img/2018/12/20150424040700733.jpg\" alt=\"image\"><br>好了！那么我们步入今天的正题！","more":"<h3 id=\"一、shell-中特殊变量\"><a href=\"#一、shell-中特殊变量\" class=\"headerlink\" title=\"一、shell 中特殊变量\"></a>一、shell 中特殊变量</h3></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$0</span>    <span class=\"comment\"># 当前脚本的文件名（间接运行时还包括绝对路径）。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$n</span>    <span class=\"comment\"># 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，第一个参数是 $1 。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$#</span>    <span class=\"comment\"># 传递给脚本或函数的参数个数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $*    <span class=\"comment\"># 传递给脚本或函数的所有参数。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$@</span>    <span class=\"comment\"># 传递给脚本或函数的所有参数。被双引号 (\" \") 包含时，与 $* 不同，下面将会讲到。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $?    <span class=\"comment\"># 上个命令的退出状态，或函数的返回值。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $$    <span class=\"comment\"># 当前 Shell 进程 ID。对于 Shell 脚本，就是这些脚本所在的进程 ID。</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$_</span>    <span class=\"comment\"># 上一个命令的最后一个参数</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $!    <span class=\"comment\"># 后台运行的最后一个进程的 ID 号</span></span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 现在保存为一个test.sh脚本，然后加上几个参数运行：</span></span><br><span class=\"line\">$ ./test.sh <span class=\"built_in\">test</span> test1 test2 test3 test4</span><br><span class=\"line\"><span class=\"comment\"># 输出结果</span></span><br><span class=\"line\">./test.sh                      <span class=\"comment\"># $0</span></span><br><span class=\"line\">                               <span class=\"comment\"># $n</span></span><br><span class=\"line\">5                              <span class=\"comment\"># $#</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $*</span></span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2 test3 test4   <span class=\"comment\"># $@</span></span><br><span class=\"line\">0                              <span class=\"comment\"># $?</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $$</span></span><br><span class=\"line\">12305                          <span class=\"comment\"># $_</span></span><br><span class=\"line\">                               <span class=\"comment\"># $!</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>&emsp;$* 和 $@ 都表示传递给函数或脚本的所有参数，不被双引号 (“”) 包含时，都以”$1””$2” … “$n” 的形式输出所有参数。<br> &emsp;但是当它们被双引号 (“”) 包含时，”$*”会将所有的参数作为一个整体，以”$1 $2 … $n”的形式输出所有参数；”$@”会将各个参数分开，以”$1””$2” … “$n” 的形式输出所有参数。</p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$*=\"</span> $*</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$*\\\"=\"</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$@=\"</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\\"\\$@\\\"=\"</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> $*</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"print each param from \\$@\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$*\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"从 \\\"\\$@\\\" 获取并打印每一个参数\"</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> var <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$var</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>返回结果：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$*= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"$*\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"variable\">$@</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>= <span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from $*</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\"><span class=\"built_in\">print</span> each param from <span class=\"variable\">$@</span></span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br><span class=\"line\">从 <span class=\"string\">\"$*\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span> test1 test2</span><br><span class=\"line\">从 <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span> 获取并打印每一个参数</span><br><span class=\"line\"><span class=\"built_in\">test</span></span><br><span class=\"line\">test1</span><br><span class=\"line\">test2</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、手工处理参数\"><a href=\"#二、手工处理参数\" class=\"headerlink\" title=\"二、手工处理参数\"></a>二、手工处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -b)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">shift</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -c)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">        <span class=\"built_in\">shift</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    -d)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"<span class=\"variable\">$1</span> is not an option\"</span></span><br><span class=\"line\">        ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行：./test.sh -a -b t2 -c t3 -d</span></span><br><span class=\"line\"><span class=\"comment\"># 返回结果</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、getopt-处理参数\"><a href=\"#三、getopt-处理参数\" class=\"headerlink\" title=\"三、getopt 处理参数\"></a>三、getopt 处理参数</h3><p>下面 getopt ab:c:d “$@” 中的 abcd 分别代表四个选项，后面带有冒号的表示选项需要参数值。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GETOPTOUT=`getopt ab:c:d <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>`</span><br><span class=\"line\">  <span class=\"built_in\">set</span> -- <span class=\"variable\">$GETOPTOUT</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]</span><br><span class=\"line\">  <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"variable\">$1</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">    -a)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -b)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -c)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的参数值是：<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    -d)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 选项\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    --)</span><br><span class=\"line\">      <span class=\"built_in\">shift</span></span><br><span class=\"line\">      <span class=\"built_in\">break</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">      <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项:\"</span><span class=\"variable\">$1</span><span class=\"string\">\"\"</span></span><br><span class=\"line\">      ;;</span><br><span class=\"line\">  <span class=\"keyword\">esac</span></span><br><span class=\"line\">  <span class=\"built_in\">shift</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 运行</span></span><br><span class=\"line\"> ./proxychains4.sh -a -b t2 -c t3 -d</span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\">发现 -a 选项</span><br><span class=\"line\">发现 -b 选项</span><br><span class=\"line\">-b 选项的参数值是：t2</span><br><span class=\"line\">发现 -c 选项</span><br><span class=\"line\">-c 选项的参数值是：t3</span><br><span class=\"line\">发现 -d 选项</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ARGV=($(getopt -o 短选项1[:]短选项2[:]...[:]短选项n -l 长选项1,长选项2,...,长选项n -- <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>))</span><br><span class=\"line\"><span class=\"built_in\">eval</span> <span class=\"built_in\">set</span> -- <span class=\"string\">\"<span class=\"variable\">$ARGV</span>\"</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  -短选项1|--长选项1)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  -短选项2|--长选项2)</span><br><span class=\"line\">    <span class=\"comment\"># 获取选项</span></span><br><span class=\"line\">    opt = <span class=\"variable\">$2</span></span><br><span class=\"line\">    process</span><br><span class=\"line\">    <span class=\"built_in\">shift</span> 2</span><br><span class=\"line\">    ;;</span><br><span class=\"line\"></span><br><span class=\"line\">  ... ...</span><br><span class=\"line\"></span><br><span class=\"line\">  -短选项3|--长选项3)</span><br><span class=\"line\">    process</span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  --)</span><br><span class=\"line\">    <span class=\"built_in\">break</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关于 eval 这个命令，用一个小例子解释：</p>\n</blockquote>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo=10</span><br><span class=\"line\">x=foo</span><br><span class=\"line\">y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$foo</span></span><br><span class=\"line\"><span class=\"built_in\">eval</span> y=<span class=\"string\">'$'</span><span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$y</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 返回</span></span><br><span class=\"line\"><span class=\"variable\">$foo</span></span><br><span class=\"line\">10</span><br><span class=\"line\">10</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 因为我一般用这个命令连接构建命令参数，所以你可以简单理解为执行两次（虽然不太对）。通过添加 eval 可以把参数解析后再执行。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"四、getopts-处理参数\"><a href=\"#四、getopts-处理参数\" class=\"headerlink\" title=\"四、getopts 处理参数\"></a>四、getopts 处理参数</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"built_in\">getopts</span> :ab:c:d ARGS</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"variable\">$ARGS</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">  a)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -a 选项\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  b)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -b 选项\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-b 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  c)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -c 选项\"</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"-c 选项的值是：<span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  d)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"发现 -d 参数\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项：<span class=\"variable\">$ARGS</span>\"</span></span><br><span class=\"line\">    ;;</span><br><span class=\"line\"><span class=\"keyword\">esac</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>这种方法最方便简单。接下来基于这种方法深入讲解。</p>\n<h3 id=\"五、传参意外处理\"><a href=\"#五、传参意外处理\" class=\"headerlink\" title=\"五、传参意外处理\"></a>五、传参意外处理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"?\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"未知选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\"><span class=\"string\">\":\"</span>)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"没有输入任何选项 <span class=\"variable\">$OPTARG</span>\"</span></span><br><span class=\"line\">  ;;</span><br><span class=\"line\">*)</span><br><span class=\"line\">  <span class=\"comment\"># 发生不能预料的错误时。</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"处理选项时出现未知错误\"</span></span><br><span class=\"line\">  ;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kM2NkMzZjOTdhYmM=\">Shell 脚本传参方法总结<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWJtLmNvbS9kZXZlbG9wZXJ3b3Jrcy9jbi9saW51eC9sLWJhc2gtcGFyYW1ldGVycy5odG1s\">Bash 参数和参数扩展<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4zNjF3YXkuY29tL3NoZWxsLWdldG9wdC80OTgxLmh0bWw=\">shell中的getopt与getopts<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>"},{"title":"分享 stylus 语法学习笔记","subtitle":"stylus 语法笔记","layout":"post","author":"Mark","date":"2019-05-28T07:51:21.000Z","_content":"\n### 定义变量\n\n```stylus\n$var_name = value\n```\n\nis defined 用来判断一个变量是否已经被赋值。\n\n```stylus\nfoo is defined\n// => false\n```\n<!-- more -->\n或者采用内置函数 lookup(name)：\n\n```stylus\nname = #80e2e9\nlookup(name) // 变量名，判断是否已经定义该变量\n// => #80e2e9\n```\n\n### for 循环\n\n```stylus\nfor $i in (0 .. 24)\n   .cc-{$i}\n      width 100 / $i\n```\n\n### 导入\n\n@import \"文件路径\"\n@import \"文件路径/\\*\"导入目录下所有 styl 文件\n\n@require \"文件路径\"\n@require \"文件路径/\\*\"导入目录下所有 styl 文件\n\n### 插值\n\n{}使用该花括号进行插值\nStylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。\n例如：\n\n```stylus\n-webkit-{'border' + '-radius'}评估为-webkit-border-radius。\n```\n\n选择器插值\n\n```stylus\ntable\n  for row in 1 2 3 4 5\n    tr:nth-child({row})\n      height: 10px * row\n```\n\n会产生如下 css\n\n```css\ntable tr:nth-child(1) {\n\theight: 10px;\n}\ntable tr:nth-child(2) {\n\theight: 20px;\n}\ntable tr:nth-child(3) {\n\theight: 30px;\n}\ntable tr:nth-child(4) {\n\theight: 40px;\n}\ntable tr:nth-child(5) {\n\theight: 50px;\n}\n```\n\n您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：\n\n```stylus\nmySelectors = '#foo,#bar,.baz'\n\n{mySelectors}\n  background: #000\n```\n\n产生如下\n\n```css\n#foo,\n#bar,\n.baz {\n\tbackground: #000;\n}\n```\n\n### mixin\n\nmixin 和函数都以相同的方式定义，但它们以不同的方式应用。\n\n例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。\n\n在 border-radius()选择器中调用时，属性将展开并复制到选择器中。\n\n```stylus\nborder-radius(n)\n  -webkit-border-radius n\n  -moz-border-radius n\n  border-radius n\n\nform input[type=button]\n  border-radius(5px)\n```\n\n编译后\n\n```css\nform input[type=\"button\"] {\n\t-webkit-border-radius: 5px;\n\t-moz-border-radius: 5px;\n\tborder-radius: 5px;\n}\n```\n\n使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！\n\n```stylus\nborder-radius(n)\n  -webkit-border-radius n\n  -moz-border-radius n\n  border-radius n\n\nform input[type=button]\n  border-radius 5px\n```\n\n请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。\n为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：\narguments 和 js 函数的 arguments 差不多都是获取函数实际参数\nlength(arguments) 获取参数个数\n\n```stylus\nborder-radius()\n  -webkit-border-radius arguments\n  -moz-border-radius arguments\n  border-radius arguments\n```\n\n现在我们可以传递像 border-radius 1px 2px / 3px 4px！\n\n### 选择器\n\n^[N],选择嵌套选择器的第个\n^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。\n^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。\n\n```stylus\n.foo\n  &__bar\n    width: 10px\n\n    ^[0]:hover &\n      width: 20px\n```\n\n注：第一层和第二层是一个完整的选择器.foo\\_\\_bar，但^[0]部分引用第一层，即.foo。\n编译后：\n\n```stylus\n.foo__bar {\n  width: 10px;\n}\n.foo:hover .foo__bar {\n  width: 20px;\n}\n```\n\n若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。\n\n```stylus\n.foo\n  &__bar\n    &_baz\n      width: 10px\n\n      ^[-1]:hover &\n        width: 20px\n```\n\n编译后：\n\n```stylus\n.foo__bar_baz {\n  width: 10px;\n}\n.foo__bar:hover .foo__bar_baz {\n  width: 20px;\n}\n```\n\n### 块混合 Block mixins\n\n我们使用+前缀可以给混合(mixins)传递块(blocks):\n\n```stylus\nfoo()\n  .bar\n    {block}// 调用 mixins里的代码块类似vue 的slot一样\n\n+foo()\n  width: 10px\n编译后：\n\n.bar {\n   width: 10px;\n }\n```\n\n### 内置方法\n\n[文档](http://stylus-lang.com/docs/bifs.html)\n","source":"_posts/stylus语法笔记.md","raw":"---\ntitle: 分享 stylus 语法学习笔记\nsubtitle: \"stylus 语法笔记\"\nlayout: post\nauthor: \"Mark\"\ncategories: JavaScript #分类\ndate: 2019-05-28 15:51:21\ntags:\n  - 前端开发\n  - stylus\n  - css\n---\n\n### 定义变量\n\n```stylus\n$var_name = value\n```\n\nis defined 用来判断一个变量是否已经被赋值。\n\n```stylus\nfoo is defined\n// => false\n```\n<!-- more -->\n或者采用内置函数 lookup(name)：\n\n```stylus\nname = #80e2e9\nlookup(name) // 变量名，判断是否已经定义该变量\n// => #80e2e9\n```\n\n### for 循环\n\n```stylus\nfor $i in (0 .. 24)\n   .cc-{$i}\n      width 100 / $i\n```\n\n### 导入\n\n@import \"文件路径\"\n@import \"文件路径/\\*\"导入目录下所有 styl 文件\n\n@require \"文件路径\"\n@require \"文件路径/\\*\"导入目录下所有 styl 文件\n\n### 插值\n\n{}使用该花括号进行插值\nStylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。\n例如：\n\n```stylus\n-webkit-{'border' + '-radius'}评估为-webkit-border-radius。\n```\n\n选择器插值\n\n```stylus\ntable\n  for row in 1 2 3 4 5\n    tr:nth-child({row})\n      height: 10px * row\n```\n\n会产生如下 css\n\n```css\ntable tr:nth-child(1) {\n\theight: 10px;\n}\ntable tr:nth-child(2) {\n\theight: 20px;\n}\ntable tr:nth-child(3) {\n\theight: 30px;\n}\ntable tr:nth-child(4) {\n\theight: 40px;\n}\ntable tr:nth-child(5) {\n\theight: 50px;\n}\n```\n\n您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：\n\n```stylus\nmySelectors = '#foo,#bar,.baz'\n\n{mySelectors}\n  background: #000\n```\n\n产生如下\n\n```css\n#foo,\n#bar,\n.baz {\n\tbackground: #000;\n}\n```\n\n### mixin\n\nmixin 和函数都以相同的方式定义，但它们以不同的方式应用。\n\n例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。\n\n在 border-radius()选择器中调用时，属性将展开并复制到选择器中。\n\n```stylus\nborder-radius(n)\n  -webkit-border-radius n\n  -moz-border-radius n\n  border-radius n\n\nform input[type=button]\n  border-radius(5px)\n```\n\n编译后\n\n```css\nform input[type=\"button\"] {\n\t-webkit-border-radius: 5px;\n\t-moz-border-radius: 5px;\n\tborder-radius: 5px;\n}\n```\n\n使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！\n\n```stylus\nborder-radius(n)\n  -webkit-border-radius n\n  -moz-border-radius n\n  border-radius n\n\nform input[type=button]\n  border-radius 5px\n```\n\n请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。\n为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：\narguments 和 js 函数的 arguments 差不多都是获取函数实际参数\nlength(arguments) 获取参数个数\n\n```stylus\nborder-radius()\n  -webkit-border-radius arguments\n  -moz-border-radius arguments\n  border-radius arguments\n```\n\n现在我们可以传递像 border-radius 1px 2px / 3px 4px！\n\n### 选择器\n\n^[N],选择嵌套选择器的第个\n^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。\n^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。\n\n```stylus\n.foo\n  &__bar\n    width: 10px\n\n    ^[0]:hover &\n      width: 20px\n```\n\n注：第一层和第二层是一个完整的选择器.foo\\_\\_bar，但^[0]部分引用第一层，即.foo。\n编译后：\n\n```stylus\n.foo__bar {\n  width: 10px;\n}\n.foo:hover .foo__bar {\n  width: 20px;\n}\n```\n\n若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。\n\n```stylus\n.foo\n  &__bar\n    &_baz\n      width: 10px\n\n      ^[-1]:hover &\n        width: 20px\n```\n\n编译后：\n\n```stylus\n.foo__bar_baz {\n  width: 10px;\n}\n.foo__bar:hover .foo__bar_baz {\n  width: 20px;\n}\n```\n\n### 块混合 Block mixins\n\n我们使用+前缀可以给混合(mixins)传递块(blocks):\n\n```stylus\nfoo()\n  .bar\n    {block}// 调用 mixins里的代码块类似vue 的slot一样\n\n+foo()\n  width: 10px\n编译后：\n\n.bar {\n   width: 10px;\n }\n```\n\n### 内置方法\n\n[文档](http://stylus-lang.com/docs/bifs.html)\n","slug":"stylus语法笔记","published":1,"updated":"2020-04-17T08:49:49.194Z","_id":"ck8q1pzyb000qbhc36usa2k85","comments":1,"photos":[],"link":"","content":"<h3 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$var_name</span> = value</span><br></pre></td></tr></table></figure>\n\n<p>is defined 用来判断一个变量是否已经被赋值。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo is defined</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>或者采用内置函数 lookup(name)：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"number\">#80e2e9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">lookup</span><span class=\"params\">(name)</span></span> <span class=\"comment\">// 变量名，判断是否已经定义该变量</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; #80e2e9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">$i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span> .. <span class=\"number\">24</span>)</span><br><span class=\"line\">   .cc-&#123;<span class=\"variable\">$i</span>&#125;</span><br><span class=\"line\">      <span class=\"attribute\">width</span> <span class=\"number\">100</span> / <span class=\"variable\">$i</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>@import “文件路径”<br>@import “文件路径/*“导入目录下所有 styl 文件</p>\n<p>@require “文件路径”<br>@require “文件路径/*“导入目录下所有 styl 文件</p>\n<h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><p>{}使用该花括号进行插值<br>Stylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。<br>例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-&#123;<span class=\"string\">'border'</span> + <span class=\"string\">'-radius'</span>&#125;评估为-webkit-<span class=\"attribute\">border-radius</span>。</span><br></pre></td></tr></table></figure>\n\n<p>选择器插值</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table</span><br><span class=\"line\">  <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"selector-tag\">tr</span>:nth-child(&#123;row&#125;)</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">10px</span> * row</span><br></pre></td></tr></table></figure>\n\n<p>会产生如下 css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(2)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(3)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(4)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(5)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mySelectors = <span class=\"string\">'#foo,#bar,.baz'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;mySelectors&#125;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span></span><br></pre></td></tr></table></figure>\n\n<p>产生如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#foo</span>,</span><br><span class=\"line\"><span class=\"selector-id\">#bar</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.baz</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h3><p>mixin 和函数都以相同的方式定义，但它们以不同的方式应用。</p>\n<p>例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。</p>\n<p>在 border-radius()选择器中调用时，属性将展开并复制到选择器中。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>(<span class=\"number\">5px</span>)</span><br></pre></td></tr></table></figure>\n\n<p>编译后</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"button\"]</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> <span class=\"number\">5px</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。<br>为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：<br>arguments 和 js 函数的 arguments 差不多都是获取函数实际参数<br>length(arguments) 获取参数个数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> arguments</span><br></pre></td></tr></table></figure>\n\n<p>现在我们可以传递像 border-radius 1px 2px / 3px 4px！</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>^[N],选择嵌套选择器的第个<br>^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。<br>^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ^[<span class=\"number\">0</span>]:hover &amp;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n\n<p>注：第一层和第二层是一个完整的选择器.foo__bar，但^[0]部分引用第一层，即.foo。<br>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span>:hover <span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    &amp;_baz</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">      ^[-<span class=\"number\">1</span>]:hover &amp;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo__bar</span>:hover <span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"块混合-Block-mixins\"><a href=\"#块混合-Block-mixins\" class=\"headerlink\" title=\"块混合 Block mixins\"></a>块混合 Block mixins</h3><p>我们使用+前缀可以给混合(mixins)传递块(blocks):</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  .bar</span><br><span class=\"line\">    &#123;block&#125;<span class=\"comment\">// 调用 mixins里的代码块类似vue 的slot一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">+foo()</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\">编译后：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL3N0eWx1cy1sYW5nLmNvbS9kb2NzL2JpZnMuaHRtbA==\">文档<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$var_name</span> = value</span><br></pre></td></tr></table></figure>\n\n<p>is defined 用来判断一个变量是否已经被赋值。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo is defined</span><br><span class=\"line\"><span class=\"comment\">// =&gt; false</span></span><br></pre></td></tr></table></figure>","more":"<p>或者采用内置函数 lookup(name)：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"number\">#80e2e9</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">lookup</span><span class=\"params\">(name)</span></span> <span class=\"comment\">// 变量名，判断是否已经定义该变量</span></span><br><span class=\"line\"><span class=\"comment\">// =&gt; #80e2e9</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> <span class=\"variable\">$i</span> <span class=\"keyword\">in</span> (<span class=\"number\">0</span> .. <span class=\"number\">24</span>)</span><br><span class=\"line\">   .cc-&#123;<span class=\"variable\">$i</span>&#125;</span><br><span class=\"line\">      <span class=\"attribute\">width</span> <span class=\"number\">100</span> / <span class=\"variable\">$i</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><p>@import “文件路径”<br>@import “文件路径/*“导入目录下所有 styl 文件</p>\n<p>@require “文件路径”<br>@require “文件路径/*“导入目录下所有 styl 文件</p>\n<h3 id=\"插值\"><a href=\"#插值\" class=\"headerlink\" title=\"插值\"></a>插值</h3><p>{}使用该花括号进行插值<br>Stylus 支持使用{}字符包围表达式进行插值，然后表达式成为标识符的一部分。<br>例如：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-webkit-&#123;<span class=\"string\">'border'</span> + <span class=\"string\">'-radius'</span>&#125;评估为-webkit-<span class=\"attribute\">border-radius</span>。</span><br></pre></td></tr></table></figure>\n\n<p>选择器插值</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table</span><br><span class=\"line\">  <span class=\"keyword\">for</span> row <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span></span><br><span class=\"line\">    <span class=\"selector-tag\">tr</span>:nth-child(&#123;row&#125;)</span><br><span class=\"line\">      <span class=\"attribute\">height</span>: <span class=\"number\">10px</span> * row</span><br></pre></td></tr></table></figure>\n\n<p>会产生如下 css</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(1)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(2)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(3)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(4)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">table</span> <span class=\"selector-tag\">tr</span><span class=\"selector-pseudo\">:nth-child(5)</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>您还可以通过构建一个字符串并将它们插入到位来将多个选择器放在一个变量中：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mySelectors = <span class=\"string\">'#foo,#bar,.baz'</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;mySelectors&#125;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#000</span></span><br></pre></td></tr></table></figure>\n\n<p>产生如下</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#foo</span>,</span><br><span class=\"line\"><span class=\"selector-id\">#bar</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.baz</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">background</span>: <span class=\"number\">#000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mixin\"><a href=\"#mixin\" class=\"headerlink\" title=\"mixin\"></a>mixin</h3><p>mixin 和函数都以相同的方式定义，但它们以不同的方式应用。</p>\n<p>例如，我们有一个 border-radius(n)下面定义的函数，它作为 mixin 调用（即，作为语句调用，而不是表达式的一部分）。</p>\n<p>在 border-radius()选择器中调用时，属性将展开并复制到选择器中。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>(<span class=\"number\">5px</span>)</span><br></pre></td></tr></table></figure>\n\n<p>编译后</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span><span class=\"selector-attr\">[type=\"button\"]</span> &#123;</span><br><span class=\"line\">\t<span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">\t<span class=\"attribute\">border-radius</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用 mixins 时，您可以完全省略括号，提供出色的透明供应商属性支持！</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">(n)</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> n</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">form</span> <span class=\"selector-tag\">input</span>[type=button]</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> <span class=\"number\">5px</span></span><br></pre></td></tr></table></figure>\n\n<p>请注意，border-radius 我们的 mixin 中的内容被视为属性，而不是递归函数调用。<br>为了更进一步，我们可以利用自动 arguments 局部变量，包含传递的表达式，允许传递多个值：<br>arguments 和 js 函数的 arguments 差不多都是获取函数实际参数<br>length(arguments) 获取参数个数</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">border-radius</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  -webkit-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  -moz-<span class=\"attribute\">border-radius</span> arguments</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span> arguments</span><br></pre></td></tr></table></figure>\n\n<p>现在我们可以传递像 border-radius 1px 2px / 3px 4px！</p>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><p>^[N],选择嵌套选择器的第个<br>^[N]表示部分引用，其中 N 是数字(-1, 0, 1 等等)。<br>^[0]引用嵌套选择器中的第一层，^[1]则引用第一层和第二层。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ^[<span class=\"number\">0</span>]:hover &amp;</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n\n<p>注：第一层和第二层是一个完整的选择器.foo__bar，但^[0]部分引用第一层，即.foo。<br>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo</span>:hover <span class=\"selector-class\">.foo__bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>若 N 为负数，则从尾部计算。如^[-1]表示去除最后一层后剩下部分的引用。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.foo</span><br><span class=\"line\">  &amp;__bar</span><br><span class=\"line\">    &amp;_baz</span><br><span class=\"line\">      <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\"></span><br><span class=\"line\">      ^[-<span class=\"number\">1</span>]:hover &amp;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n\n<p>编译后：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.foo__bar</span>:hover <span class=\"selector-class\">.foo__bar_baz</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"块混合-Block-mixins\"><a href=\"#块混合-Block-mixins\" class=\"headerlink\" title=\"块混合 Block mixins\"></a>块混合 Block mixins</h3><p>我们使用+前缀可以给混合(mixins)传递块(blocks):</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">foo</span><span class=\"params\">()</span></span></span><br><span class=\"line\">  .bar</span><br><span class=\"line\">    &#123;block&#125;<span class=\"comment\">// 调用 mixins里的代码块类似vue 的slot一样</span></span><br><span class=\"line\"></span><br><span class=\"line\">+foo()</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span></span><br><span class=\"line\">编译后：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内置方法\"><a href=\"#内置方法\" class=\"headerlink\" title=\"内置方法\"></a>内置方法</h3><p><span class=\"exturl\" data-url=\"aHR0cDovL3N0eWx1cy1sYW5nLmNvbS9kb2NzL2JpZnMuaHRtbA==\">文档<i class=\"fa fa-external-link-alt\"></i></span></p>"},{"layout":"post","title":"Vue二维码组件","subtitle":"vue, qrcode, vueqr, 二维码组件","date":"2018-03-12T08:30:00.000Z","author":"Mark","top":8,"_content":"\n# vue components\n\n[![npm](https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square)](https://github.com/Jack-In/vueQr-new/master/license)\n\n> ### 快速安装\n\n### install\n\n快速添加 `vueqr-new` 组件到 app 中\n\n```bash\nnpm install --save vueqr-new\n```\n<!-- more -->\n### components\n\n```html\n<template>\n  <div>\n    <vue-qr :config=\"config\" :text=\"text\"></vue-qr>\n  </div>\n</template>\n<script>\nimport vueQr from 'vueqr-new';\nconst config = {\n  // 容错等级\n  errorCorrectionLevel: 'H',\n  // 图片类型\n  type: 'image/png',\n  rendererOpts: {\n  quality: 0.3\n  },\n  // 边框与二维码之间的间距\n  margin: 0,\n  // 缩放倍数\n  scale: 4,\n  width: 500,\n  maskPattern:1,\n  color: {\n  dark: '#000000',\n  light : \"#ffffff\"\n  },\n  style: {\n  width: '128px',\n  border: '1px solid #ccc'\n  }\n}\nexport default {\n  data() {\n    return {\n      text: 'https://example.com',\n      config: config\n    }\n  },\n  components: {\n    vueQr\n  }\n}\n</script>\n```\n\n## Component props\n\n| 属性   | 类型   | 属性描述      |\n| ------ | ------ | ------------- |\n| config | Object | qrcode option |\n| text   | String | qrcode value  |\n\n## 参考代码\n\n[\"node-qrcode\"](https://github.com/zpao/qrcode.react)\n\n> ### License\n\n[MIT](https://github.com/Jack-In/vueQr-new/blob/master/LICENSE)\n","source":"_posts/vueqr-new.md","raw":"---\nlayout: post\ntitle: 'Vue二维码组件'\nsubtitle: 'vue, qrcode, vueqr, 二维码组件'\ndate: 2018-03-12 16:30:00\nauthor: 'Mark'\ncategories: Vue #分类\ntop: 8\ntags:\n  - 前端开发\n  - Vue\n---\n\n# vue components\n\n[![npm](https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square)](https://www.npmjs.com/package/vueqr-new)[![npm](https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square)](https://github.com/Jack-In/vueQr-new/master/license)\n\n> ### 快速安装\n\n### install\n\n快速添加 `vueqr-new` 组件到 app 中\n\n```bash\nnpm install --save vueqr-new\n```\n<!-- more -->\n### components\n\n```html\n<template>\n  <div>\n    <vue-qr :config=\"config\" :text=\"text\"></vue-qr>\n  </div>\n</template>\n<script>\nimport vueQr from 'vueqr-new';\nconst config = {\n  // 容错等级\n  errorCorrectionLevel: 'H',\n  // 图片类型\n  type: 'image/png',\n  rendererOpts: {\n  quality: 0.3\n  },\n  // 边框与二维码之间的间距\n  margin: 0,\n  // 缩放倍数\n  scale: 4,\n  width: 500,\n  maskPattern:1,\n  color: {\n  dark: '#000000',\n  light : \"#ffffff\"\n  },\n  style: {\n  width: '128px',\n  border: '1px solid #ccc'\n  }\n}\nexport default {\n  data() {\n    return {\n      text: 'https://example.com',\n      config: config\n    }\n  },\n  components: {\n    vueQr\n  }\n}\n</script>\n```\n\n## Component props\n\n| 属性   | 类型   | 属性描述      |\n| ------ | ------ | ------------- |\n| config | Object | qrcode option |\n| text   | String | qrcode value  |\n\n## 参考代码\n\n[\"node-qrcode\"](https://github.com/zpao/qrcode.react)\n\n> ### License\n\n[MIT](https://github.com/Jack-In/vueQr-new/blob/master/LICENSE)\n","slug":"vueqr-new","published":1,"updated":"2020-04-11T02:33:15.637Z","_id":"ck8q1pzyd000tbhc38hioehkw","comments":1,"photos":[],"link":"","content":"<h1 id=\"vue-components\"><a href=\"#vue-components\" class=\"headerlink\" title=\"vue components\"></a>vue components</h1><p><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://github.com/Jack-In/vueQr-new/master/license\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a></p>\n<blockquote>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h3></blockquote>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vueqr-new</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vue-qr</span> <span class=\"attr\">:config</span>=<span class=\"string\">\"config\"</span> <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vue-qr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueQr <span class=\"keyword\">from</span> <span class=\"string\">'vueqr-new'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">const</span> config = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 容错等级</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  errorCorrectionLevel: <span class=\"string\">'H'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 图片类型</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  type: <span class=\"string\">'image/png'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  rendererOpts: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  quality: 0.3</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 边框与二维码之间的间距</span></span></span><br><span class=\"line\"><span class=\"undefined\">  margin: 0,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 缩放倍数</span></span></span><br><span class=\"line\"><span class=\"undefined\">  scale: 4,</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 500,</span></span><br><span class=\"line\"><span class=\"undefined\">  maskPattern:1,</span></span><br><span class=\"line\"><span class=\"undefined\">  color: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  dark: <span class=\"string\">'#000000'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  light : <span class=\"string\">\"#ffffff\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  style: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  width: <span class=\"string\">'128px'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  border: <span class=\"string\">'1px solid #ccc'</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://example.com'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      config: config</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    vueQr</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Component-props\"><a href=\"#Component-props\" class=\"headerlink\" title=\"Component props\"></a>Component props</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>config</td>\n<td>Object</td>\n<td>qrcode option</td>\n</tr>\n<tr>\n<td>text</td>\n<td>String</td>\n<td>qrcode value</td>\n</tr>\n</tbody></table>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3pwYW8vcXJjb2RlLnJlYWN0\">“node-qrcode”<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3></blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phY2stSW4vdnVlUXItbmV3L2Jsb2IvbWFzdGVyL0xJQ0VOU0U=\">MIT<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"vue-components\"><a href=\"#vue-components\" class=\"headerlink\" title=\"vue components\"></a>vue components</h1><p><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/v/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://www.npmjs.com/package/vueqr-new\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/dt/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a><a href=\"https://github.com/Jack-In/vueQr-new/master/license\" target=\"_blank\" rel=\"noopener\"><img data-src=\"https://img.shields.io/npm/l/vueqr-new.svg?style=flat-square\" alt=\"npm\"></a></p>\n<blockquote>\n<h3 id=\"快速安装\"><a href=\"#快速安装\" class=\"headerlink\" title=\"快速安装\"></a>快速安装</h3></blockquote>\n<h3 id=\"install\"><a href=\"#install\" class=\"headerlink\" title=\"install\"></a>install</h3><p>快速添加 <code>vueqr-new</code> 组件到 app 中</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save vueqr-new</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"components\"><a href=\"#components\" class=\"headerlink\" title=\"components\"></a>components</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">vue-qr</span> <span class=\"attr\">:config</span>=<span class=\"string\">\"config\"</span> <span class=\"attr\">:text</span>=<span class=\"string\">\"text\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">vue-qr</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> vueQr <span class=\"keyword\">from</span> <span class=\"string\">'vueqr-new'</span>;</span></span><br><span class=\"line\"><span class=\"actionscript\"><span class=\"keyword\">const</span> config = &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 容错等级</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  errorCorrectionLevel: <span class=\"string\">'H'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 图片类型</span></span></span><br><span class=\"line\"><span class=\"actionscript\">  type: <span class=\"string\">'image/png'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">  rendererOpts: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  quality: 0.3</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 边框与二维码之间的间距</span></span></span><br><span class=\"line\"><span class=\"undefined\">  margin: 0,</span></span><br><span class=\"line\"><span class=\"actionscript\">  <span class=\"comment\">// 缩放倍数</span></span></span><br><span class=\"line\"><span class=\"undefined\">  scale: 4,</span></span><br><span class=\"line\"><span class=\"undefined\">  width: 500,</span></span><br><span class=\"line\"><span class=\"undefined\">  maskPattern:1,</span></span><br><span class=\"line\"><span class=\"undefined\">  color: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  dark: <span class=\"string\">'#000000'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  light : <span class=\"string\">\"#ffffff\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  style: &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">  width: <span class=\"string\">'128px'</span>,</span></span><br><span class=\"line\"><span class=\"actionscript\">  border: <span class=\"string\">'1px solid #ccc'</span></span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">  data() &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"actionscript\">      text: <span class=\"string\">'https://example.com'</span>,</span></span><br><span class=\"line\"><span class=\"undefined\">      config: config</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;,</span></span><br><span class=\"line\"><span class=\"undefined\">  components: &#123;</span></span><br><span class=\"line\"><span class=\"undefined\">    vueQr</span></span><br><span class=\"line\"><span class=\"undefined\">  &#125;</span></span><br><span class=\"line\"><span class=\"undefined\">&#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Component-props\"><a href=\"#Component-props\" class=\"headerlink\" title=\"Component props\"></a>Component props</h2><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>属性描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>config</td>\n<td>Object</td>\n<td>qrcode option</td>\n</tr>\n<tr>\n<td>text</td>\n<td>String</td>\n<td>qrcode value</td>\n</tr>\n</tbody></table>\n<h2 id=\"参考代码\"><a href=\"#参考代码\" class=\"headerlink\" title=\"参考代码\"></a>参考代码</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3pwYW8vcXJjb2RlLnJlYWN0\">“node-qrcode”<i class=\"fa fa-external-link-alt\"></i></span></p>\n<blockquote>\n<h3 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h3></blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0phY2stSW4vdnVlUXItbmV3L2Jsb2IvbWFzdGVyL0xJQ0VOU0U=\">MIT<i class=\"fa fa-external-link-alt\"></i></span></p>"},{"layout":"post","title":"Typora For Markdown 语法","date":"2018-03-11T16:00:00.000Z","author":"Mark","top":6,"_content":"\n#Typora For Markdown 语法\n\n[Learning-Markdown (Markdown 入门参考)](http://xianbai.me/learn-md/index.html)\n[TOC]\n\n###数学表达式\n\n要启用这个功能，首先到`Preference`->`Editor`中启用。然后使用`$`符号包裹 Tex 命令，例如：`$lim_{x \\to \\infty} \\ exp(-x)=0$`将产生如下的数学表达式：\n\n$\\lim\\_{x \\to \\infty} \\exp(-x)=0$\n<!-- more -->\n###下标\n\n下标使用`~`包裹，例如：`H~2~O`将产生 H~2~O, 即水的分子式。\n\n###上标\n\n上标使用`^`包裹，例如：`y^2^=4`将产生表达式 y^2^ = 4\n\n###插入表情:happy:\n\n使用`:happy:`输入表情:happy:,使用`:sad:`输入表情:sad:,使用`:cry:`输入表情:cry:等。以此类推！\n\n### 下划线\n\n用 HTML 的语法`<u>Underline</u>`将产生下划线<u>Underline</u>.\n\n### 删除线\n\nGFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用`~~`包裹的文本将会具有删除的样式，例如`~删除文本~`将产生~~删除文本~~的样式。\n\n### 代码\n\n- 使用`包裹的内容将会以代码样式显示，例如\n\n```\n使用`printf()`\n```\n\n则会产生`printf()`样式。\n\n- 输入`~~~`或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：\n\n- ````\n  ​```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ​```\n  ````\n\n  将会产生\n\n  ```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ```\n\n  ### 强调\n\n  使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n  ```\n  **使用两个*号强调内容**\n  __使用两个下划线强调内容__\n  ```\n\n  将会输出\n\n  **使用两个\\*号强调内容**\n  **使用两个下划线强调内容**\n  Typroa 推荐使用两个\\*号。\n\n  ### 斜体\n\n  在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n  ```\n  \\*\n  ```\n\n  ### 插入图片\n\n  我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n  ![drag and drop image](http://typora.io/img/drag-img.gif)\n\n  ​\n\n  ​\n\n### 插入 URL 连接\n\n使用尖括号包裹的 url 将产生一个连接，例如：`<www.baidu.com>`将产生连接:<www.baidu.com>.\n\n如果是标准的 url，则会自动产生连接，例如:www.google.com\n\n### 目录列表 Table of Contents（TOC）\n\n输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。\n\n### 水平分割线\n\n使用`***`或者`---`，然后回车，来产生水平分割线。\n\n---\n\n### 标注\n\n我们可以对某一个词语进行标注。例如\n\n```\n某些人用过了才知道[^注释]\n[^注释]:Somebody that I used to know.\n```\n\n将产生：\n\n某些人用过了才知道[^注释]\n[^注释]: Somebody that I used to know.\n\n把鼠标放在`注释`上，将会有提示内容。\n\n### 表格\n\n```\n|姓名|性别|毕业学校|工资|\n|:---|:---:|:---:|---:|\n|杨洋|男|重庆交通大学|3200|\n|峰哥|男|贵州大学|5000|\n|坑货|女|北京大学|2000|\n```\n\n将产生:\n\n| 姓名 | 性别 |   毕业学校   | 工资 |\n| :--- | :--: | :----------: | ---: |\n| 杨洋 |  男  | 重庆交通大学 | 3200 |\n| 峰哥 |  男  |   贵州大学   | 5000 |\n| 坑货 |  女  |   北京大学   | 2000 |\n\n其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。\n\n### 数学表达式块\n\n输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：\n\n```\n $$\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n```\n\n将会产生:\n\n$$\\mathbf{V}\\_1 \\times \\mathbf{V}\\_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n\n### 任务列表\n\n使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。\n\n```\n- [ ] 吃饭\n- [ ] 逛街\n- [ ] 看电影\n- [ ] 约泡\n```\n\n- [x] 吃饭\n\n      ​\n\n- [x] 逛街\n\n      ​\n\n- [x] 看电影\n\n      ​\n\n- [x] 约泡\n\n### 列表\n\n输入+, -, \\*,创建无序的列表，使用任意数字开头，创建有序列表，例如：\n\n```\n**无序的列表**\n* tfboys\n* 杨洋\n* 我爱你\n```\n\n**无序的列表**\n\n- tfboys\n- 杨洋\n- 我爱你\n\n```\n**有序的列表**\n1. 苹果\n6. 香蕉\n10. 我都不喜欢\n```\n\n**有序的列表**\n\n1. 苹果\n2. 香蕉\n3. 我都不喜欢\n\n### 块引用\n\n使用>来插入块引用。例如：\n\n```\n>这是一个块引用！\n```\n\n将产生：\n\n> 这是一个块引用！\n\n### 标题\n\n使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。\n","source":"_posts/typora.md","raw":"---\nlayout: post\ntitle: 'Typora For Markdown 语法'\ndate: 2018-03-12\nauthor: 'Mark'\ncategories: 软件工具 #分类\ntop: 6\ntags:\n  - 前端开发\n  - Markdown\n---\n\n#Typora For Markdown 语法\n\n[Learning-Markdown (Markdown 入门参考)](http://xianbai.me/learn-md/index.html)\n[TOC]\n\n###数学表达式\n\n要启用这个功能，首先到`Preference`->`Editor`中启用。然后使用`$`符号包裹 Tex 命令，例如：`$lim_{x \\to \\infty} \\ exp(-x)=0$`将产生如下的数学表达式：\n\n$\\lim\\_{x \\to \\infty} \\exp(-x)=0$\n<!-- more -->\n###下标\n\n下标使用`~`包裹，例如：`H~2~O`将产生 H~2~O, 即水的分子式。\n\n###上标\n\n上标使用`^`包裹，例如：`y^2^=4`将产生表达式 y^2^ = 4\n\n###插入表情:happy:\n\n使用`:happy:`输入表情:happy:,使用`:sad:`输入表情:sad:,使用`:cry:`输入表情:cry:等。以此类推！\n\n### 下划线\n\n用 HTML 的语法`<u>Underline</u>`将产生下划线<u>Underline</u>.\n\n### 删除线\n\nGFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用`~~`包裹的文本将会具有删除的样式，例如`~删除文本~`将产生~~删除文本~~的样式。\n\n### 代码\n\n- 使用`包裹的内容将会以代码样式显示，例如\n\n```\n使用`printf()`\n```\n\n则会产生`printf()`样式。\n\n- 输入`~~~`或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：\n\n- ````\n  ​```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ​```\n  ````\n\n  将会产生\n\n  ```java\n  public Class HelloWorld{\n    System.out.println(\"Hello World!\");\n  }\n  ```\n\n  ### 强调\n\n  使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n  ```\n  **使用两个*号强调内容**\n  __使用两个下划线强调内容__\n  ```\n\n  将会输出\n\n  **使用两个\\*号强调内容**\n  **使用两个下划线强调内容**\n  Typroa 推荐使用两个\\*号。\n\n  ### 斜体\n\n  在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n  ```\n  \\*\n  ```\n\n  ### 插入图片\n\n  我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n  ![drag and drop image](http://typora.io/img/drag-img.gif)\n\n  ​\n\n  ​\n\n### 插入 URL 连接\n\n使用尖括号包裹的 url 将产生一个连接，例如：`<www.baidu.com>`将产生连接:<www.baidu.com>.\n\n如果是标准的 url，则会自动产生连接，例如:www.google.com\n\n### 目录列表 Table of Contents（TOC）\n\n输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。\n\n### 水平分割线\n\n使用`***`或者`---`，然后回车，来产生水平分割线。\n\n---\n\n### 标注\n\n我们可以对某一个词语进行标注。例如\n\n```\n某些人用过了才知道[^注释]\n[^注释]:Somebody that I used to know.\n```\n\n将产生：\n\n某些人用过了才知道[^注释]\n[^注释]: Somebody that I used to know.\n\n把鼠标放在`注释`上，将会有提示内容。\n\n### 表格\n\n```\n|姓名|性别|毕业学校|工资|\n|:---|:---:|:---:|---:|\n|杨洋|男|重庆交通大学|3200|\n|峰哥|男|贵州大学|5000|\n|坑货|女|北京大学|2000|\n```\n\n将产生:\n\n| 姓名 | 性别 |   毕业学校   | 工资 |\n| :--- | :--: | :----------: | ---: |\n| 杨洋 |  男  | 重庆交通大学 | 3200 |\n| 峰哥 |  男  |   贵州大学   | 5000 |\n| 坑货 |  女  |   北京大学   | 2000 |\n\n其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。\n\n### 数学表达式块\n\n输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：\n\n```\n $$\\mathbf{V}_1 \\times \\mathbf{V}_2 =  \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} &  \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} &  \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n```\n\n将会产生:\n\n$$\\mathbf{V}\\_1 \\times \\mathbf{V}\\_2 = \\begin{vmatrix} \\mathbf{i} & \\mathbf{j} & \\mathbf{k} \\\\\\frac{\\partial X}{\\partial u} & \\frac{\\partial Y}{\\partial u} & 0 \\\\\\frac{\\partial X}{\\partial v} & \\frac{\\partial Y}{\\partial v} & 0 \\\\\\end{vmatrix}$$\n\n### 任务列表\n\n使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。\n\n```\n- [ ] 吃饭\n- [ ] 逛街\n- [ ] 看电影\n- [ ] 约泡\n```\n\n- [x] 吃饭\n\n      ​\n\n- [x] 逛街\n\n      ​\n\n- [x] 看电影\n\n      ​\n\n- [x] 约泡\n\n### 列表\n\n输入+, -, \\*,创建无序的列表，使用任意数字开头，创建有序列表，例如：\n\n```\n**无序的列表**\n* tfboys\n* 杨洋\n* 我爱你\n```\n\n**无序的列表**\n\n- tfboys\n- 杨洋\n- 我爱你\n\n```\n**有序的列表**\n1. 苹果\n6. 香蕉\n10. 我都不喜欢\n```\n\n**有序的列表**\n\n1. 苹果\n2. 香蕉\n3. 我都不喜欢\n\n### 块引用\n\n使用>来插入块引用。例如：\n\n```\n>这是一个块引用！\n```\n\n将产生：\n\n> 这是一个块引用！\n\n### 标题\n\n使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。\n","slug":"typora","published":1,"updated":"2020-04-07T14:40:08.278Z","comments":1,"photos":[],"link":"","_id":"ck8q1pzye000xbhc3591bd7rx","content":"<p>#Typora For Markdown 语法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3hpYW5iYWkubWUvbGVhcm4tbWQvaW5kZXguaHRtbA==\">Learning-Markdown (Markdown 入门参考)<i class=\"fa fa-external-link-alt\"></i></span><br>[TOC]</p>\n<p>###数学表达式</p>\n<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_{x \\to \\infty} \\ exp(-x)=0$</code>将产生如下的数学表达式：</p>\n<p>$\\lim_{x \\to \\infty} \\exp(-x)=0$</p>\n<a id=\"more\"></a>\n<p>###下标</p>\n<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H<del>2</del>O, 即水的分子式。</p>\n<p>###上标</p>\n<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>\n<p>###插入表情:happy:</p>\n<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>使用`包裹的内容将会以代码样式显示，例如</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`printf()`</span><br></pre></td></tr></table></figure>\n\n<p>则会产生<code>printf()</code>样式。</p>\n<ul>\n<li><p>输入<code>~~~</code>或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：</p>\n</li>\n<li><pre><code>​```java\npublic Class HelloWorld{\n  System.out.println(&quot;Hello World!&quot;);\n}\n​```\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">将会产生</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">public Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n### 强调\n\n使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**使用两个*号强调内容**</span></span><br><span class=\"line\"><span class=\"strong\">__使用两个下划线强调内容__</span></span><br></pre></td></tr></table></figure>\n\n将会输出\n\n**使用两个\\*号强调内容**\n**使用两个下划线强调内容**\nTyproa 推荐使用两个\\*号。\n\n### 斜体\n\n在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\\*</span></span><br></pre></td></tr></table></figure>\n\n### 插入图片\n\n我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n![drag and drop image](http://typora.io/img/drag-img.gif)\n\n​\n\n​\n</code></pre></li>\n</ul>\n<h3 id=\"插入-URL-连接\"><a href=\"#插入-URL-连接\" class=\"headerlink\" title=\"插入 URL 连接\"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20mZ3Q7\">www.baidu.com&gt;<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>如果是标准的 url，则会自动产生连接，例如:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"目录列表-Table-of-Contents（TOC）\"><a href=\"#目录列表-Table-of-Contents（TOC）\" class=\"headerlink\" title=\"目录列表 Table of Contents（TOC）\"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>\n<h3 id=\"水平分割线\"><a href=\"#水平分割线\" class=\"headerlink\" title=\"水平分割线\"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>\n<hr>\n<h3 id=\"标注\"><a href=\"#标注\" class=\"headerlink\" title=\"标注\"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些人用过了才知道<span class=\"selector-attr\">[^注释]</span></span><br><span class=\"line\"><span class=\"selector-attr\">[^注释]</span><span class=\"selector-pseudo\">:Somebody</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">I</span> <span class=\"selector-tag\">used</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">know</span>.</span><br></pre></td></tr></table></figure>\n\n<p>将产生：</p>\n<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>\n<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">|姓名|</span>性别<span class=\"params\">|毕业学校|</span>工资<span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span><span class=\"symbol\">:---|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\"><span class=\"params\">|杨洋|</span>男<span class=\"params\">|重庆交通大学|</span><span class=\"number\">3200</span><span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span>峰哥<span class=\"params\">|男|</span>贵州大学<span class=\"params\">|5000|</span></span><br><span class=\"line\"><span class=\"params\">|坑货|</span>女<span class=\"params\">|北京大学|</span><span class=\"number\">2000</span><span class=\"params\">|</span></span><br></pre></td></tr></table></figure>\n\n<p>将产生:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">姓名</th>\n<th align=\"center\">性别</th>\n<th align=\"center\">毕业学校</th>\n<th align=\"right\">工资</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">杨洋</td>\n<td align=\"center\">男</td>\n<td align=\"center\">重庆交通大学</td>\n<td align=\"right\">3200</td>\n</tr>\n<tr>\n<td align=\"left\">峰哥</td>\n<td align=\"center\">男</td>\n<td align=\"center\">贵州大学</td>\n<td align=\"right\">5000</td>\n</tr>\n<tr>\n<td align=\"left\">坑货</td>\n<td align=\"center\">女</td>\n<td align=\"center\">北京大学</td>\n<td align=\"right\">2000</td>\n</tr>\n</tbody></table>\n<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>\n<h3 id=\"数学表达式块\"><a href=\"#数学表达式块\" class=\"headerlink\" title=\"数学表达式块\"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_1 <span class=\"tag\">\\<span class=\"name\">times</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_2 =  <span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;vmatrix&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;i&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;j&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;k&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;vmatrix&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>\n\n<p>将会产生:</p>\n<p>$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$</p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">[ ]</span> 吃饭</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 逛街</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 看电影</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 约泡</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>吃饭</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>逛街</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>看电影</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>约泡</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*无序的列表*</span><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> tfboys</span><br><span class=\"line\"><span class=\"bullet\">* </span>杨洋</span><br><span class=\"line\"><span class=\"bullet\">* </span>我爱你</span><br></pre></td></tr></table></figure>\n\n<p><strong>无序的列表</strong></p>\n<ul>\n<li>tfboys</li>\n<li>杨洋</li>\n<li>我爱你</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**有序的列表**</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>苹果</span><br><span class=\"line\"><span class=\"bullet\">6. </span>香蕉</span><br><span class=\"line\"><span class=\"bullet\">10. </span>我都不喜欢</span><br></pre></td></tr></table></figure>\n\n<p><strong>有序的列表</strong></p>\n<ol>\n<li>苹果</li>\n<li>香蕉</li>\n<li>我都不喜欢</li>\n</ol>\n<h3 id=\"块引用\"><a href=\"#块引用\" class=\"headerlink\" title=\"块引用\"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">这是一个块引用！</span></span><br></pre></td></tr></table></figure>\n\n<p>将产生：</p>\n<blockquote>\n<p>这是一个块引用！</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>\n","site":{"data":{}},"excerpt":"<p>#Typora For Markdown 语法</p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3hpYW5iYWkubWUvbGVhcm4tbWQvaW5kZXguaHRtbA==\">Learning-Markdown (Markdown 入门参考)<i class=\"fa fa-external-link-alt\"></i></span><br>[TOC]</p>\n<p>###数学表达式</p>\n<p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹 Tex 命令，例如：<code>$lim_{x \\to \\infty} \\ exp(-x)=0$</code>将产生如下的数学表达式：</p>\n<p>$\\lim_{x \\to \\infty} \\exp(-x)=0$</p>","more":"<p>###下标</p>\n<p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生 H<del>2</del>O, 即水的分子式。</p>\n<p>###上标</p>\n<p>上标使用<code>^</code>包裹，例如：<code>y^2^=4</code>将产生表达式 y^2^ = 4</p>\n<p>###插入表情:happy:</p>\n<p>使用<code>:happy:</code>输入表情:happy:,使用<code>:sad:</code>输入表情:sad:,使用<code>:cry:</code>输入表情:cry:等。以此类推！</p>\n<h3 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h3><p>用 HTML 的语法<code>&lt;u&gt;Underline&lt;/u&gt;</code>将产生下划线<u>Underline</u>.</p>\n<h3 id=\"删除线\"><a href=\"#删除线\" class=\"headerlink\" title=\"删除线\"></a>删除线</h3><p>GFM 添加了删除文本的语法，这是标准的 Markdown 语法木有的。使用<code>~~</code>包裹的文本将会具有删除的样式，例如<code>~删除文本~</code>将产生<del>删除文本</del>的样式。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>使用`包裹的内容将会以代码样式显示，例如</li>\n</ul>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用`printf()`</span><br></pre></td></tr></table></figure>\n\n<p>则会产生<code>printf()</code>样式。</p>\n<ul>\n<li><p>输入<code>~~~</code>或者```然后回车，可以输入代码块，并且可以选择代码的语言。例如：</p>\n</li>\n<li><pre><code>​```java\npublic Class HelloWorld{\n  System.out.println(&quot;Hello World!&quot;);\n}\n​```\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">将会产生</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">public Class HelloWorld&#123;</span><br><span class=\"line\">  System.out.println(&quot;Hello World!&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n### 强调\n\n使用两个\\*号或者两个\\_包裹的内容将会被强调。例如\n\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**使用两个*号强调内容**</span></span><br><span class=\"line\"><span class=\"strong\">__使用两个下划线强调内容__</span></span><br></pre></td></tr></table></figure>\n\n将会输出\n\n**使用两个\\*号强调内容**\n**使用两个下划线强调内容**\nTyproa 推荐使用两个\\*号。\n\n### 斜体\n\n在标准的 Markdown 语法中，\\*和\\_包裹的内容会是斜体显示，但是 GFM 下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：\n\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\\*</span></span><br></pre></td></tr></table></figure>\n\n### 插入图片\n\n我们可以通过拖拉的方式，将本地文件夹中的图片或者网络上的图片插入。\n\n![drag and drop image](http://typora.io/img/drag-img.gif)\n\n​\n\n​\n</code></pre></li>\n</ul>\n<h3 id=\"插入-URL-连接\"><a href=\"#插入-URL-连接\" class=\"headerlink\" title=\"插入 URL 连接\"></a>插入 URL 连接</h3><p>使用尖括号包裹的 url 将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:&lt;<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5iYWlkdS5jb20mZ3Q7\">www.baidu.com&gt;<i class=\"fa fa-external-link-alt\"></i></span>.</p>\n<p>如果是标准的 url，则会自动产生连接，例如:<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5nb29nbGUuY29t\">www.google.com<i class=\"fa fa-external-link-alt\"></i></span></p>\n<h3 id=\"目录列表-Table-of-Contents（TOC）\"><a href=\"#目录列表-Table-of-Contents（TOC）\" class=\"headerlink\" title=\"目录列表 Table of Contents（TOC）\"></a>目录列表 Table of Contents（TOC）</h3><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p>\n<h3 id=\"水平分割线\"><a href=\"#水平分割线\" class=\"headerlink\" title=\"水平分割线\"></a>水平分割线</h3><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p>\n<hr>\n<h3 id=\"标注\"><a href=\"#标注\" class=\"headerlink\" title=\"标注\"></a>标注</h3><p>我们可以对某一个词语进行标注。例如</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">某些人用过了才知道<span class=\"selector-attr\">[^注释]</span></span><br><span class=\"line\"><span class=\"selector-attr\">[^注释]</span><span class=\"selector-pseudo\">:Somebody</span> <span class=\"selector-tag\">that</span> <span class=\"selector-tag\">I</span> <span class=\"selector-tag\">used</span> <span class=\"selector-tag\">to</span> <span class=\"selector-tag\">know</span>.</span><br></pre></td></tr></table></figure>\n\n<p>将产生：</p>\n<p>某些人用过了才知道[^注释]<br>[^注释]: Somebody that I used to know.</p>\n<p>把鼠标放在<code>注释</code>上，将会有提示内容。</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">|姓名|</span>性别<span class=\"params\">|毕业学校|</span>工资<span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span><span class=\"symbol\">:---|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|</span><span class=\"symbol\">:---</span><span class=\"symbol\">:|---</span><span class=\"symbol\">:|</span></span><br><span class=\"line\"><span class=\"params\">|杨洋|</span>男<span class=\"params\">|重庆交通大学|</span><span class=\"number\">3200</span><span class=\"params\">|</span></span><br><span class=\"line\"><span class=\"params\">|</span>峰哥<span class=\"params\">|男|</span>贵州大学<span class=\"params\">|5000|</span></span><br><span class=\"line\"><span class=\"params\">|坑货|</span>女<span class=\"params\">|北京大学|</span><span class=\"number\">2000</span><span class=\"params\">|</span></span><br></pre></td></tr></table></figure>\n\n<p>将产生:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">姓名</th>\n<th align=\"center\">性别</th>\n<th align=\"center\">毕业学校</th>\n<th align=\"right\">工资</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">杨洋</td>\n<td align=\"center\">男</td>\n<td align=\"center\">重庆交通大学</td>\n<td align=\"right\">3200</td>\n</tr>\n<tr>\n<td align=\"left\">峰哥</td>\n<td align=\"center\">男</td>\n<td align=\"center\">贵州大学</td>\n<td align=\"right\">5000</td>\n</tr>\n<tr>\n<td align=\"left\">坑货</td>\n<td align=\"center\">女</td>\n<td align=\"center\">北京大学</td>\n<td align=\"right\">2000</td>\n</tr>\n</tbody></table>\n<p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p>\n<h3 id=\"数学表达式块\"><a href=\"#数学表达式块\" class=\"headerlink\" title=\"数学表达式块\"></a>数学表达式块</h3><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"formula\">$$<span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_1 <span class=\"tag\">\\<span class=\"name\">times</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;V&#125;</span></span>_2 =  <span class=\"tag\">\\<span class=\"name\">begin</span><span class=\"string\">&#123;vmatrix&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;i&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;j&#125;</span></span> &amp; <span class=\"tag\">\\<span class=\"name\">mathbf</span><span class=\"string\">&#123;k&#125;</span></span> <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial u&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial X&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp;  <span class=\"tag\">\\<span class=\"name\">frac</span><span class=\"string\">&#123;\\partial Y&#125;</span><span class=\"string\">&#123;\\partial v&#125;</span></span> &amp; 0 <span class=\"tag\">\\<span class=\"name\">\\</span></span><span class=\"tag\">\\<span class=\"name\">end</span><span class=\"string\">&#123;vmatrix&#125;</span></span>$$</span></span><br></pre></td></tr></table></figure>\n\n<p>将会产生:</p>\n<p>$$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix} \\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}$$</p>\n<h3 id=\"任务列表\"><a href=\"#任务列表\" class=\"headerlink\" title=\"任务列表\"></a>任务列表</h3><p>使用如下的代码创建任务列表，在[]中输入 x 表示完成，也可以通过点击选择完成或者没完成。</p>\n<figure class=\"highlight accesslog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- <span class=\"string\">[ ]</span> 吃饭</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 逛街</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 看电影</span><br><span class=\"line\">- <span class=\"string\">[ ]</span> 约泡</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>吃饭</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>逛街</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>看电影</p>\n<pre><code>​</code></pre></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <p>约泡</p>\n</li>\n</ul>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*<span class=\"strong\">*无序的列表*</span><span class=\"strong\">*</span></span><br><span class=\"line\"><span class=\"strong\">*</span> tfboys</span><br><span class=\"line\"><span class=\"bullet\">* </span>杨洋</span><br><span class=\"line\"><span class=\"bullet\">* </span>我爱你</span><br></pre></td></tr></table></figure>\n\n<p><strong>无序的列表</strong></p>\n<ul>\n<li>tfboys</li>\n<li>杨洋</li>\n<li>我爱你</li>\n</ul>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"strong\">**有序的列表**</span></span><br><span class=\"line\"><span class=\"bullet\">1. </span>苹果</span><br><span class=\"line\"><span class=\"bullet\">6. </span>香蕉</span><br><span class=\"line\"><span class=\"bullet\">10. </span>我都不喜欢</span><br></pre></td></tr></table></figure>\n\n<p><strong>有序的列表</strong></p>\n<ol>\n<li>苹果</li>\n<li>香蕉</li>\n<li>我都不喜欢</li>\n</ol>\n<h3 id=\"块引用\"><a href=\"#块引用\" class=\"headerlink\" title=\"块引用\"></a>块引用</h3><p>使用&gt;来插入块引用。例如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">这是一个块引用！</span></span><br></pre></td></tr></table></figure>\n\n<p>将产生：</p>\n<blockquote>\n<p>这是一个块引用！</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>使用#表示一级标题，##表示二级标题，以此类推，有 6 个标题。</p>"},{"layout":"post","title":"修改了SSH默认端口之后，如何配置git？","date":"2020-01-19T15:24:30.000Z","author":"Mark","top":12,"_content":"### 出现问题\n\n由于安全或者其它原因，我们可能会修改默认的SSH服务端口号，默认情况下，已有的git项目在pull或者push的时候会报错！\n\n现在假设原来的项目的remote设置为git@xxx.com:Projects/xxx.git，将服务器SSH默认端口修改为223后，导致push或 pull出错\n<!-- more -->\n### 有两个解决办法\n\n#### 第一种方法\n\n```bash\ngit remote set-url origin ssh://git@xxx.com:223/~/Projects/p1.git\n```\n\n#### 第二种方法\n\n```bash\ncat>~/.ssh/config\n# 映射一个别名\nHost xxx.com\nHostName xxxx.com\nPort 223\nAddKeysToAgent yes\nUseKeychain yes\n#此处是开启git的ssh翻墙代理\n#ProxyCommand /usr/bin/nc -X 5 -x 127.0.0.1:1086 %h %p\nIdentityFile ~/.ssh/id_rsa\n```\n\n修改p1.git项目下的git配置文件\n\n```bash\ngit remote set-url origin git@xxx:Projects/p1.git\n```\n\n### 相关链接\n\n> [gitlab 社区解决方案](https://about.gitlab.com/2016/02/18/gitlab-dot-com-now-supports-an-alternate-git-plus-ssh-port/)\n","source":"_posts/修改了SSH默认端口之后，如何配置git？.md","raw":"---\nlayout: post\ntitle: \"修改了SSH默认端口之后，如何配置git？\"\ndate: 2020-01-19 23:24:30\nauthor: \"Mark\"\ncategories: git操作 #分类\ntop: 12\ntags:\n  - 前端开发\n  - sourceTree\n  - git\n---\n### 出现问题\n\n由于安全或者其它原因，我们可能会修改默认的SSH服务端口号，默认情况下，已有的git项目在pull或者push的时候会报错！\n\n现在假设原来的项目的remote设置为git@xxx.com:Projects/xxx.git，将服务器SSH默认端口修改为223后，导致push或 pull出错\n<!-- more -->\n### 有两个解决办法\n\n#### 第一种方法\n\n```bash\ngit remote set-url origin ssh://git@xxx.com:223/~/Projects/p1.git\n```\n\n#### 第二种方法\n\n```bash\ncat>~/.ssh/config\n# 映射一个别名\nHost xxx.com\nHostName xxxx.com\nPort 223\nAddKeysToAgent yes\nUseKeychain yes\n#此处是开启git的ssh翻墙代理\n#ProxyCommand /usr/bin/nc -X 5 -x 127.0.0.1:1086 %h %p\nIdentityFile ~/.ssh/id_rsa\n```\n\n修改p1.git项目下的git配置文件\n\n```bash\ngit remote set-url origin git@xxx:Projects/p1.git\n```\n\n### 相关链接\n\n> [gitlab 社区解决方案](https://about.gitlab.com/2016/02/18/gitlab-dot-com-now-supports-an-alternate-git-plus-ssh-port/)\n","slug":"修改了SSH默认端口之后，如何配置git？","published":1,"updated":"2020-04-06T17:52:37.171Z","comments":1,"photos":[],"link":"","_id":"ck8q1pzyf000zbhc3huus7kqy","content":"<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>由于安全或者其它原因，我们可能会修改默认的SSH服务端口号，默认情况下，已有的git项目在pull或者push的时候会报错！</p>\n<p>现在假设原来的项目的remote设置为<span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEB4eHguY29t\">git@xxx.com<i class=\"fa fa-external-link-alt\"></i></span>:Projects/xxx.git，将服务器SSH默认端口修改为223后，导致push或 pull出错</p>\n<a id=\"more\"></a>\n<h3 id=\"有两个解决办法\"><a href=\"#有两个解决办法\" class=\"headerlink\" title=\"有两个解决办法\"></a>有两个解决办法</h3><h4 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin ssh://git@xxx.com:223/~/Projects/p1.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat&gt;~/.ssh/config</span><br><span class=\"line\"><span class=\"comment\"># 映射一个别名</span></span><br><span class=\"line\">Host xxx.com</span><br><span class=\"line\">HostName xxxx.com</span><br><span class=\"line\">Port 223</span><br><span class=\"line\">AddKeysToAgent yes</span><br><span class=\"line\">UseKeychain yes</span><br><span class=\"line\"><span class=\"comment\">#此处是开启git的ssh翻墙代理</span></span><br><span class=\"line\"><span class=\"comment\">#ProxyCommand /usr/bin/nc -X 5 -x 127.0.0.1:1086 %h %p</span></span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>修改p1.git项目下的git配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin git@xxx:Projects/p1.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLzIwMTYvMDIvMTgvZ2l0bGFiLWRvdC1jb20tbm93LXN1cHBvcnRzLWFuLWFsdGVybmF0ZS1naXQtcGx1cy1zc2gtcG9ydC8=\">gitlab 社区解决方案<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"出现问题\"><a href=\"#出现问题\" class=\"headerlink\" title=\"出现问题\"></a>出现问题</h3><p>由于安全或者其它原因，我们可能会修改默认的SSH服务端口号，默认情况下，已有的git项目在pull或者push的时候会报错！</p>\n<p>现在假设原来的项目的remote设置为<span class=\"exturl\" data-url=\"bWFpbHRvOmdpdEB4eHguY29t\">git@xxx.com<i class=\"fa fa-external-link-alt\"></i></span>:Projects/xxx.git，将服务器SSH默认端口修改为223后，导致push或 pull出错</p>","more":"<h3 id=\"有两个解决办法\"><a href=\"#有两个解决办法\" class=\"headerlink\" title=\"有两个解决办法\"></a>有两个解决办法</h3><h4 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin ssh://git@xxx.com:223/~/Projects/p1.git</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat&gt;~/.ssh/config</span><br><span class=\"line\"><span class=\"comment\"># 映射一个别名</span></span><br><span class=\"line\">Host xxx.com</span><br><span class=\"line\">HostName xxxx.com</span><br><span class=\"line\">Port 223</span><br><span class=\"line\">AddKeysToAgent yes</span><br><span class=\"line\">UseKeychain yes</span><br><span class=\"line\"><span class=\"comment\">#此处是开启git的ssh翻墙代理</span></span><br><span class=\"line\"><span class=\"comment\">#ProxyCommand /usr/bin/nc -X 5 -x 127.0.0.1:1086 %h %p</span></span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>\n\n<p>修改p1.git项目下的git配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin git@xxx:Projects/p1.git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"相关链接\"><a href=\"#相关链接\" class=\"headerlink\" title=\"相关链接\"></a>相关链接</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hYm91dC5naXRsYWIuY29tLzIwMTYvMDIvMTgvZ2l0bGFiLWRvdC1jb20tbm93LXN1cHBvcnRzLWFuLWFsdGVybmF0ZS1naXQtcGx1cy1zc2gtcG9ydC8=\">gitlab 社区解决方案<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>"},{"layout":"post","title":"用掘金－Markdown 编辑器写文章","date":"2018-12-11T04:37:00.000Z","author":"Mark","top":12,"_content":"\n### 用掘金－Markdown 编辑器写文章\n\n欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。\n<!-- more -->\n### 丰富的快捷键\n\n本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。\n\n支持的快捷键有：\n\n- 加粗： `Ctrl/Cmd + B`\n- 标题： `Ctrl/Cmd + H`\n- 插入链接： `Ctrl/Cmd + K`\n- 插入代码： `Ctrl/Cmd + Shift + C`\n- 行内代码： `Ctrl/Cmd + Shift + K`\n- 插入图片： `Ctrl/Cmd + Shift + I`\n- 无序列表： `Ctrl/Cmd + Shift + L`\n- 撤销： `Ctrl/Cmd + Z`\n\n### 常用语法\n\n#### 标题\n\n> 语法格式：**'#'+'空格'+'文本'**\n\n```text\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n```\n\n#### 列表\n\n> 无序列表语法格式：**'-' + '空格' ＋ '文本'**\n\n```text\n- 文本一\n- 文本二\n- 文本三\n```\n\n> 有序列表语法格式：**'数字' + '.' + '空格' + '文本'**\n\n```text\n1. 文本一\n2. 文本二\n3. 文本三\n```\n\n> 任务列表语法格式：**'-' + '空格' + '[ ]' + '文本'**\n\n```text\n- [x] 文本一\n- [ ] 文本二\n- [ ] 文本三\n```\n\n#### 链接和图片\n\n- 在 Markdown 中插入链接不需要其他按钮，你只需要使用`［显示文本］(链接地址)`这样的格式语法即可。例如：\n[稀土掘金](https://gold.xitu.io)\n- 插入图片的语法与插入链接的语法很像，只是前面多了一个 `!`.语法如下：\n`![图片的标注](图片链接地址)`\n\n#### 引用\n\n> 语法：**'>'+'空格'+'文本'**\n\n例如：\n\n```text\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。\n```\n\n#### 代码\n\n如下是代码段的语法：\n\n````\n```编程语言\n这是代码段\n```\n\n````\n\n```python\n例如：\n\ndef bubbleSort(alist):\n for passnum in range(len(alist)-1,0,-1):\n #print alist,passnum\n for i in range(passnum):\n if alist[i]>alist[i+1]:\n temp = alist[i]\n alist[i] = alist[i+1]\n alist[i+1] = temp\n return alist\n```\n\n#### 表格\n\n```text\n**Markdown 　 Extra**　表格语法：\n\n| 项目   | 价格   |\n|--------|--------|\n| iPhone | \\$560  |\n| iPad   | \\$780  |\n| iMac   | \\$1000 |\n\n可以使用冒号来定义对齐方式：\n\n| 项目   | 价格     | 数量 |\n|--------|---------|------|\n| iPhone | 6000 元  | 5    |\n| iPad   | 3800 元  | 12   |\n| iMac   | 10000 元 | 234  |\n```\n\n### 结语\n\n以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里[Markdown 语法](https://www.appinn.com/markdown/)，非常感谢使用**掘金－Markdown 编辑器**,希望为您提供舒适的写作体验。\n","source":"_posts/掘金文档编辑器使用方法.md","raw":"---\nlayout: post\ntitle: \"用掘金－Markdown 编辑器写文章\"\ndate: 2018-12-11 12:37:00\nauthor: \"Mark\"\ncategories: 网站应用 #分类\ntop: 12\ntags:\n  - 前端开发\n  - 掘金\n  - Markdown\n---\n\n### 用掘金－Markdown 编辑器写文章\n\n欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。\n<!-- more -->\n### 丰富的快捷键\n\n本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。\n\n支持的快捷键有：\n\n- 加粗： `Ctrl/Cmd + B`\n- 标题： `Ctrl/Cmd + H`\n- 插入链接： `Ctrl/Cmd + K`\n- 插入代码： `Ctrl/Cmd + Shift + C`\n- 行内代码： `Ctrl/Cmd + Shift + K`\n- 插入图片： `Ctrl/Cmd + Shift + I`\n- 无序列表： `Ctrl/Cmd + Shift + L`\n- 撤销： `Ctrl/Cmd + Z`\n\n### 常用语法\n\n#### 标题\n\n> 语法格式：**'#'+'空格'+'文本'**\n\n```text\n# 一级标题\n\n## 二级标题\n\n### 三级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n```\n\n#### 列表\n\n> 无序列表语法格式：**'-' + '空格' ＋ '文本'**\n\n```text\n- 文本一\n- 文本二\n- 文本三\n```\n\n> 有序列表语法格式：**'数字' + '.' + '空格' + '文本'**\n\n```text\n1. 文本一\n2. 文本二\n3. 文本三\n```\n\n> 任务列表语法格式：**'-' + '空格' + '[ ]' + '文本'**\n\n```text\n- [x] 文本一\n- [ ] 文本二\n- [ ] 文本三\n```\n\n#### 链接和图片\n\n- 在 Markdown 中插入链接不需要其他按钮，你只需要使用`［显示文本］(链接地址)`这样的格式语法即可。例如：\n[稀土掘金](https://gold.xitu.io)\n- 插入图片的语法与插入链接的语法很像，只是前面多了一个 `!`.语法如下：\n`![图片的标注](图片链接地址)`\n\n#### 引用\n\n> 语法：**'>'+'空格'+'文本'**\n\n例如：\n\n```text\n> Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。\n```\n\n#### 代码\n\n如下是代码段的语法：\n\n````\n```编程语言\n这是代码段\n```\n\n````\n\n```python\n例如：\n\ndef bubbleSort(alist):\n for passnum in range(len(alist)-1,0,-1):\n #print alist,passnum\n for i in range(passnum):\n if alist[i]>alist[i+1]:\n temp = alist[i]\n alist[i] = alist[i+1]\n alist[i+1] = temp\n return alist\n```\n\n#### 表格\n\n```text\n**Markdown 　 Extra**　表格语法：\n\n| 项目   | 价格   |\n|--------|--------|\n| iPhone | \\$560  |\n| iPad   | \\$780  |\n| iMac   | \\$1000 |\n\n可以使用冒号来定义对齐方式：\n\n| 项目   | 价格     | 数量 |\n|--------|---------|------|\n| iPhone | 6000 元  | 5    |\n| iPad   | 3800 元  | 12   |\n| iMac   | 10000 元 | 234  |\n```\n\n### 结语\n\n以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里[Markdown 语法](https://www.appinn.com/markdown/)，非常感谢使用**掘金－Markdown 编辑器**,希望为您提供舒适的写作体验。\n","slug":"掘金文档编辑器使用方法","published":1,"updated":"2020-04-29T14:34:27.151Z","_id":"ck8q1pzyg0012bhc3gvmn462l","comments":1,"photos":[],"link":"","content":"<h3 id=\"用掘金－Markdown-编辑器写文章\"><a href=\"#用掘金－Markdown-编辑器写文章\" class=\"headerlink\" title=\"用掘金－Markdown 编辑器写文章\"></a>用掘金－Markdown 编辑器写文章</h3><p>欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。</p>\n<a id=\"more\"></a>\n<h3 id=\"丰富的快捷键\"><a href=\"#丰富的快捷键\" class=\"headerlink\" title=\"丰富的快捷键\"></a>丰富的快捷键</h3><p>本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。</p>\n<p>支持的快捷键有：</p>\n<ul>\n<li>加粗： <code>Ctrl/Cmd + B</code></li>\n<li>标题： <code>Ctrl/Cmd + H</code></li>\n<li>插入链接： <code>Ctrl/Cmd + K</code></li>\n<li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li>\n<li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li>\n<li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li>\n<li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li>\n<li>撤销： <code>Ctrl/Cmd + Z</code></li>\n</ul>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><blockquote>\n<p>语法格式：<strong>‘#’+’空格’+’文本’</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\"></span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\"></span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\"></span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\"></span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><blockquote>\n<p>无序列表语法格式：<strong>‘-‘ + ‘空格’ ＋ ‘文本’</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本一</span><br><span class=\"line\">- 文本二</span><br><span class=\"line\">- 文本三</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有序列表语法格式：<strong>‘数字’ + ‘.’ + ‘空格’ + ‘文本’</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 文本一</span><br><span class=\"line\">2. 文本二</span><br><span class=\"line\">3. 文本三</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>任务列表语法格式：<strong>‘-‘ + ‘空格’ + ‘[ ]’ + ‘文本’</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [x] 文本一</span><br><span class=\"line\">- [ ] 文本二</span><br><span class=\"line\">- [ ] 文本三</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h4><ul>\n<li>在 Markdown 中插入链接不需要其他按钮，你只需要使用<code>［显示文本］(链接地址)</code>这样的格式语法即可。例如：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xkLnhpdHUuaW8=\">稀土掘金<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>插入图片的语法与插入链接的语法很像，只是前面多了一个 <code>!</code>.语法如下：<br><code>![图片的标注](图片链接地址)</code></li>\n</ul>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><blockquote>\n<p>语法：<strong>‘&gt;’+’空格’+’文本’</strong></p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>如下是代码段的语法：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```编程语言</span><br><span class=\"line\">这是代码段</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(alist)</span>:</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> passnum <span class=\"keyword\">in</span> range(len(alist)<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\"> <span class=\"comment\">#print alist,passnum</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(passnum):</span><br><span class=\"line\"> <span class=\"keyword\">if</span> alist[i]&gt;alist[i+<span class=\"number\">1</span>]:</span><br><span class=\"line\"> temp = alist[i]</span><br><span class=\"line\"> alist[i] = alist[i+<span class=\"number\">1</span>]</span><br><span class=\"line\"> alist[i+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\"> <span class=\"keyword\">return</span> alist</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**Markdown 　 Extra**　表格语法：</span><br><span class=\"line\"></span><br><span class=\"line\">| 项目   | 价格   |</span><br><span class=\"line\">|--------|--------|</span><br><span class=\"line\">| iPhone | \\$560  |</span><br><span class=\"line\">| iPad   | \\$780  |</span><br><span class=\"line\">| iMac   | \\$1000 |</span><br><span class=\"line\"></span><br><span class=\"line\">可以使用冒号来定义对齐方式：</span><br><span class=\"line\"></span><br><span class=\"line\">| 项目   | 价格     | 数量 |</span><br><span class=\"line\">|--------|---------|------|</span><br><span class=\"line\">| iPhone | 6000 元  | 5    |</span><br><span class=\"line\">| iPad   | 3800 元  | 12   |</span><br><span class=\"line\">| iMac   | 10000 元 | 234  |</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBwaW5uLmNvbS9tYXJrZG93bi8=\">Markdown 语法<i class=\"fa fa-external-link-alt\"></i></span>，非常感谢使用<strong>掘金－Markdown 编辑器</strong>,希望为您提供舒适的写作体验。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"用掘金－Markdown-编辑器写文章\"><a href=\"#用掘金－Markdown-编辑器写文章\" class=\"headerlink\" title=\"用掘金－Markdown 编辑器写文章\"></a>用掘金－Markdown 编辑器写文章</h3><p>欢迎使用 掘金－Markdown 编辑器撰写技术文章，只专注于内容和技术，不再费心排版的问题。这是一份简要的 Markdown 引导指南，希望可以帮助您顺利的开始使用 Markdown 编辑器。</p>","more":"<h3 id=\"丰富的快捷键\"><a href=\"#丰富的快捷键\" class=\"headerlink\" title=\"丰富的快捷键\"></a>丰富的快捷键</h3><p>本 Markdown 编辑器支持丰富的格式快捷键，可以非常便捷、轻松的使用 Markdown 语言，形成优美的排版和内容格式。</p>\n<p>支持的快捷键有：</p>\n<ul>\n<li>加粗： <code>Ctrl/Cmd + B</code></li>\n<li>标题： <code>Ctrl/Cmd + H</code></li>\n<li>插入链接： <code>Ctrl/Cmd + K</code></li>\n<li>插入代码： <code>Ctrl/Cmd + Shift + C</code></li>\n<li>行内代码： <code>Ctrl/Cmd + Shift + K</code></li>\n<li>插入图片： <code>Ctrl/Cmd + Shift + I</code></li>\n<li>无序列表： <code>Ctrl/Cmd + Shift + L</code></li>\n<li>撤销： <code>Ctrl/Cmd + Z</code></li>\n</ul>\n<h3 id=\"常用语法\"><a href=\"#常用语法\" class=\"headerlink\" title=\"常用语法\"></a>常用语法</h3><h4 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h4><blockquote>\n<p>语法格式：<strong>‘#’+’空格’+’文本’</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\"></span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\"></span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\"></span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\"></span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\"></span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h4><blockquote>\n<p>无序列表语法格式：<strong>‘-‘ + ‘空格’ ＋ ‘文本’</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本一</span><br><span class=\"line\">- 文本二</span><br><span class=\"line\">- 文本三</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>有序列表语法格式：<strong>‘数字’ + ‘.’ + ‘空格’ + ‘文本’</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 文本一</span><br><span class=\"line\">2. 文本二</span><br><span class=\"line\">3. 文本三</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>任务列表语法格式：<strong>‘-‘ + ‘空格’ + ‘[ ]’ + ‘文本’</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- [x] 文本一</span><br><span class=\"line\">- [ ] 文本二</span><br><span class=\"line\">- [ ] 文本三</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"链接和图片\"><a href=\"#链接和图片\" class=\"headerlink\" title=\"链接和图片\"></a>链接和图片</h4><ul>\n<li>在 Markdown 中插入链接不需要其他按钮，你只需要使用<code>［显示文本］(链接地址)</code>这样的格式语法即可。例如：<br><span class=\"exturl\" data-url=\"aHR0cHM6Ly9nb2xkLnhpdHUuaW8=\">稀土掘金<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>插入图片的语法与插入链接的语法很像，只是前面多了一个 <code>!</code>.语法如下：<br><code>![图片的标注](图片链接地址)</code></li>\n</ul>\n<h4 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h4><blockquote>\n<p>语法：<strong>‘&gt;’+’空格’+’文本’</strong></p>\n</blockquote>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的 HTML 页面。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><p>如下是代码段的语法：</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```编程语言</span><br><span class=\"line\">这是代码段</span><br><span class=\"line\">```</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例如：</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(alist)</span>:</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> passnum <span class=\"keyword\">in</span> range(len(alist)<span class=\"number\">-1</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>):</span><br><span class=\"line\"> <span class=\"comment\">#print alist,passnum</span></span><br><span class=\"line\"> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(passnum):</span><br><span class=\"line\"> <span class=\"keyword\">if</span> alist[i]&gt;alist[i+<span class=\"number\">1</span>]:</span><br><span class=\"line\"> temp = alist[i]</span><br><span class=\"line\"> alist[i] = alist[i+<span class=\"number\">1</span>]</span><br><span class=\"line\"> alist[i+<span class=\"number\">1</span>] = temp</span><br><span class=\"line\"> <span class=\"keyword\">return</span> alist</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**Markdown 　 Extra**　表格语法：</span><br><span class=\"line\"></span><br><span class=\"line\">| 项目   | 价格   |</span><br><span class=\"line\">|--------|--------|</span><br><span class=\"line\">| iPhone | \\$560  |</span><br><span class=\"line\">| iPad   | \\$780  |</span><br><span class=\"line\">| iMac   | \\$1000 |</span><br><span class=\"line\"></span><br><span class=\"line\">可以使用冒号来定义对齐方式：</span><br><span class=\"line\"></span><br><span class=\"line\">| 项目   | 价格     | 数量 |</span><br><span class=\"line\">|--------|---------|------|</span><br><span class=\"line\">| iPhone | 6000 元  | 5    |</span><br><span class=\"line\">| iPad   | 3800 元  | 12   |</span><br><span class=\"line\">| iMac   | 10000 元 | 234  |</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h3><p>以上是最常见的 Markdown 的语法和格式，如果你还希望深入的学习 Markdown，可以参考这里<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYXBwaW5uLmNvbS9tYXJrZG93bi8=\">Markdown 语法<i class=\"fa fa-external-link-alt\"></i></span>，非常感谢使用<strong>掘金－Markdown 编辑器</strong>,希望为您提供舒适的写作体验。</p>"},{"title":"命令行配置代理服务","layout":"post","date":"2019-01-29T01:15:16.000Z","description":"命令行配置代理服务","top":11,"_content":"\n- 因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。\n\n### Windows\n<!-- more -->\n- 通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 `set` 命令临时设置。\n- 控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 http://ip:port 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。\n\n```sh\nhttp_proxy=http://localhost:1080\nhttp_proxy_user=zhangsan\nhttp_proxy_pass=lisi\n通过 set 命令的形式大致如下所示。\n```\n\n#### 设置参数\n\n```sh\nset http_proxy=http://localhost:1080\nset http_proxy_user=zhangsan\nset http_proxy_pass=lisi\n```\n\n#### 删除参数\n\n```sh\nset http_proxy=\nset http_proxy_user=\nset http_proxy_pass=\n```\n\n另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。\n\n### Linux\n\n- 因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。\n- 据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。\n- 可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。\n\n```sh\nhttp*proxy=192.168.10.91:3128\nhttps_proxy=192.168.10.91:3128\nftp_proxy=192.168.10.91:3128\nno_proxy=\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"\n```\n\n- 在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。\n\n### 总结\n\n- Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。\n\n### 参考资料\n\n> [命令行配置代理服务器](https://www.ezloo.com/2008/12/set_http_proxy.html)</br>[为 windows cmd 设置代理](http://www.fx114.net/qa-15-153867.aspx)</br>[linux 命令行模式下实现代理上网](http://lymrg.blog.51cto.com/1551327/425744)</br>[Ubuntu 设置代理和例外](http://www.linuxdiyf.com/linux/14191.html)\n","source":"_posts/命令行配置代理服务.md","raw":"---\ntitle: 命令行配置代理服务\nlayout: post\ndate: 2019-01-29 09:15:16\ncategories: 系统\ntags: [windows, linux]\ndescription: 命令行配置代理服务\ntop: 11\n---\n\n- 因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。\n\n### Windows\n<!-- more -->\n- 通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 `set` 命令临时设置。\n- 控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 http://ip:port 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。\n\n```sh\nhttp_proxy=http://localhost:1080\nhttp_proxy_user=zhangsan\nhttp_proxy_pass=lisi\n通过 set 命令的形式大致如下所示。\n```\n\n#### 设置参数\n\n```sh\nset http_proxy=http://localhost:1080\nset http_proxy_user=zhangsan\nset http_proxy_pass=lisi\n```\n\n#### 删除参数\n\n```sh\nset http_proxy=\nset http_proxy_user=\nset http_proxy_pass=\n```\n\n另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。\n\n### Linux\n\n- 因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。\n- 据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。\n- 可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。\n\n```sh\nhttp*proxy=192.168.10.91:3128\nhttps_proxy=192.168.10.91:3128\nftp_proxy=192.168.10.91:3128\nno_proxy=\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"\n```\n\n- 在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。\n\n### 总结\n\n- Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。\n\n### 参考资料\n\n> [命令行配置代理服务器](https://www.ezloo.com/2008/12/set_http_proxy.html)</br>[为 windows cmd 设置代理](http://www.fx114.net/qa-15-153867.aspx)</br>[linux 命令行模式下实现代理上网](http://lymrg.blog.51cto.com/1551327/425744)</br>[Ubuntu 设置代理和例外](http://www.linuxdiyf.com/linux/14191.html)\n","slug":"命令行配置代理服务","published":1,"updated":"2020-04-17T08:47:03.178Z","_id":"ck8q1pzyh0016bhc37clz0i4a","comments":1,"photos":[],"link":"","content":"<ul>\n<li>因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。</li>\n</ul>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><a id=\"more\"></a>\n<ul>\n<li>通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 <code>set</code> 命令临时设置。</li>\n<li>控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 <span class=\"exturl\" data-url=\"aHR0cDovL2lwOnBvcnQ=\">http://ip:port<i class=\"fa fa-external-link-alt\"></i></span> 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http_proxy=http://localhost:1080</span><br><span class=\"line\">http_proxy_user=zhangsan</span><br><span class=\"line\">http_proxy_pass=lisi</span><br><span class=\"line\">通过 <span class=\"built_in\">set</span> 命令的形式大致如下所示。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置参数\"><a href=\"#设置参数\" class=\"headerlink\" title=\"设置参数\"></a>设置参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://localhost:1080</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=zhangsan</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=lisi</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除参数\"><a href=\"#删除参数\" class=\"headerlink\" title=\"删除参数\"></a>删除参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=</span><br></pre></td></tr></table></figure>\n\n<p>另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li>因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。</li>\n<li>据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。</li>\n<li>可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http*proxy=192.168.10.91:3128</span><br><span class=\"line\">https_proxy=192.168.10.91:3128</span><br><span class=\"line\">ftp_proxy=192.168.10.91:3128</span><br><span class=\"line\">no_proxy=<span class=\"string\">\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXpsb28uY29tLzIwMDgvMTIvc2V0X2h0dHBfcHJveHkuaHRtbA==\">命令行配置代理服务器<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5meDExNC5uZXQvcWEtMTUtMTUzODY3LmFzcHg=\">为 windows cmd 设置代理<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL2x5bXJnLmJsb2cuNTFjdG8uY29tLzE1NTEzMjcvNDI1NzQ0\">linux 命令行模式下实现代理上网<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eGRpeWYuY29tL2xpbnV4LzE0MTkxLmh0bWw=\">Ubuntu 设置代理和例外<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<ul>\n<li>因为需要通过命令下载国外资源，但在 IE 配置代理后，对 cmd 却没有效果，于是查了下，有配置 cmd 代理的方法。</li>\n</ul>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3>","more":"<ul>\n<li>通过设置环境变量来配置代理，一种方式是直接在系统设置中配置（这个就不解释了），另一种方式是在需要时通过 <code>set</code> 命令临时设置。</li>\n<li>控制代理的环境变量分别是 http_proxy、http_proxy_user、http_proxy_pass，不区分大小写，分别代表代理地址（应是 <span class=\"exturl\" data-url=\"aHR0cDovL2lwOnBvcnQ=\">http://ip:port<i class=\"fa fa-external-link-alt\"></i></span> 的形式）、代理用户名、代理密码，一般情况下只需要配置 http_proxy 即可（其余两个参数暂无条件测试，是否有作用未知），参数格式大致如下所示。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http_proxy=http://localhost:1080</span><br><span class=\"line\">http_proxy_user=zhangsan</span><br><span class=\"line\">http_proxy_pass=lisi</span><br><span class=\"line\">通过 <span class=\"built_in\">set</span> 命令的形式大致如下所示。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"设置参数\"><a href=\"#设置参数\" class=\"headerlink\" title=\"设置参数\"></a>设置参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=http://localhost:1080</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=zhangsan</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=lisi</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除参数\"><a href=\"#删除参数\" class=\"headerlink\" title=\"删除参数\"></a>删除参数</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> http_proxy=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_user=</span><br><span class=\"line\"><span class=\"built_in\">set</span> http_proxy_pass=</span><br></pre></td></tr></table></figure>\n\n<p>另外经测试还有 https_proxy 环境变量可配置，用于配置 https 的代理，如果未配置则将使用 http_proxy 的配置。据此可推测有 https_proxy_user 等参数。</p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><ul>\n<li>因目前没有环境测试，故以下结论仅根据网上资料整理并推测所得，仅做记录和供参考，详见参考资料。</li>\n<li>据资料得，Linux 配置方式与 Windows 相似，仅命令及配置方式有所不同。</li>\n<li>可配置的环境变量名分别为 http_proxy、https_proxy、ftp_proxy、no_proxy，分别是配置 http 代理、https 代理、ftp 代理、不使用代理的地址，参数格式大致如下所示（正确性有待考察，可能需要加 http:// 前缀），no_proxy 较特殊。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http*proxy=192.168.10.91:3128</span><br><span class=\"line\">https_proxy=192.168.10.91:3128</span><br><span class=\"line\">ftp_proxy=192.168.10.91:3128</span><br><span class=\"line\">no_proxy=<span class=\"string\">\"127.0.0.1, localhost, 172.26.*, 172.25.6.66, 192.168.\\_\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在 linux 下也有两种配置方式，一是需要在相关系统文件中配置，二是通过 export 命令临时设置，这里不做详细介绍。</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ul>\n<li>Windows 和 Linux 的配置方式大致相同，推测 Windows 也有类似 no_proxy 等的配置，鉴于很少用到，故不做深入研究，需要之时可做尝试。</li>\n</ul>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZXpsb28uY29tLzIwMDgvMTIvc2V0X2h0dHBfcHJveHkuaHRtbA==\">命令行配置代理服务器<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5meDExNC5uZXQvcWEtMTUtMTUzODY3LmFzcHg=\">为 windows cmd 设置代理<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL2x5bXJnLmJsb2cuNTFjdG8uY29tLzE1NTEzMjcvNDI1NzQ0\">linux 命令行模式下实现代理上网<i class=\"fa fa-external-link-alt\"></i></span></br><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5saW51eGRpeWYuY29tL2xpbnV4LzE0MTkxLmh0bWw=\">Ubuntu 设置代理和例外<i class=\"fa fa-external-link-alt\"></i></span></p>\n</blockquote>"},{"title":"聊聊网络中的传输协议","date":"2019-03-25T06:10:48.000Z","layout":"post","author":"Mark","_content":"\n一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~\n\n#### 聊聊网络传输协议\n<!-- more -->\n<br/>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。\n&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。\n\n> 下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：\n\n![image](/assets/img/2019/03/1.png)![image](/assets/img/2019/03/2.png)\n\n它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。\n\n![image](/assets/img/2019/03/3.png)![image](/assets/img/2019/03/4.png)![image](/assets/img/2019/03/5.png)\n\n#### http 协议与 tcp 协议的恩怨情仇\n\n##### tcp 三次握手和四次挥手\n\n讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!\n\n![image](/assets/img/2019/03/6.png)\n\n动画介绍三次握手和四次挥手\n\n![image](/assets/img/2019/03/7.gif)![image](/assets/img/2019/03/8.gif)\n\n> 先写到这待补充完善！\n\n#### 参考资料：\n\n- [网络传输协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n- [OSI 模型 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B)\n- [超文本传输协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n- [互联网协议入门（一） - 阮一峰的网络日志](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n- [TCP 协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n- [MDN http 响应代码](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status)\n- 《图解 HTTP 协议》\n- 《计算机网络》\n","source":"_posts/聊聊网络中的传输协议.md","raw":"---\ntitle: 聊聊网络中的传输协议\ndate: 2019-03-25 14:10:48\nlayout: post\nauthor: \"Mark\"\ncategories: 网络传输协议 #分类\ntags:\n  - 网络传输协议\n  - TCP/IP协议族\n  - HTTP/HTTPS\n---\n\n一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~\n\n#### 聊聊网络传输协议\n<!-- more -->\n<br/>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。\n&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。\n\n> 下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：\n\n![image](/assets/img/2019/03/1.png)![image](/assets/img/2019/03/2.png)\n\n它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。\n\n![image](/assets/img/2019/03/3.png)![image](/assets/img/2019/03/4.png)![image](/assets/img/2019/03/5.png)\n\n#### http 协议与 tcp 协议的恩怨情仇\n\n##### tcp 三次握手和四次挥手\n\n讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!\n\n![image](/assets/img/2019/03/6.png)\n\n动画介绍三次握手和四次挥手\n\n![image](/assets/img/2019/03/7.gif)![image](/assets/img/2019/03/8.gif)\n\n> 先写到这待补充完善！\n\n#### 参考资料：\n\n- [网络传输协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n- [OSI 模型 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/OSI%E6%A8%A1%E5%9E%8B)\n- [超文本传输协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE)\n- [互联网协议入门（一） - 阮一峰的网络日志](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n- [TCP 协议 - 维基百科，自由的百科全书](https://zh.wikipedia.org/wiki/%E4%BC%A0%E8%BE%93%E6%8E%A7%E5%88%B6%E5%8D%8F%E8%AE%AE)\n- [MDN http 响应代码](https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status)\n- 《图解 HTTP 协议》\n- 《计算机网络》\n","slug":"聊聊网络中的传输协议","published":1,"updated":"2020-04-07T14:39:20.726Z","comments":1,"photos":[],"link":"","_id":"ck8q1pzyl001abhc30ygrhzb2","content":"<p>一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~</p>\n<h4 id=\"聊聊网络传输协议\"><a href=\"#聊聊网络传输协议\" class=\"headerlink\" title=\"聊聊网络传输协议\"></a>聊聊网络传输协议</h4><a id=\"more\"></a>\n<p><br/>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。<br>&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。</p>\n<blockquote>\n<p>下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：</p>\n</blockquote>\n<p><img data-src=\"/assets/img/2019/03/1.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/2.png\" alt=\"image\"></p>\n<p>它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。</p>\n<p><img data-src=\"/assets/img/2019/03/3.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/4.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/5.png\" alt=\"image\"></p>\n<h4 id=\"http-协议与-tcp-协议的恩怨情仇\"><a href=\"#http-协议与-tcp-协议的恩怨情仇\" class=\"headerlink\" title=\"http 协议与 tcp 协议的恩怨情仇\"></a>http 协议与 tcp 协议的恩怨情仇</h4><h5 id=\"tcp-三次握手和四次挥手\"><a href=\"#tcp-三次握手和四次挥手\" class=\"headerlink\" title=\"tcp 三次握手和四次挥手\"></a>tcp 三次握手和四次挥手</h5><p>讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!</p>\n<p><img data-src=\"/assets/img/2019/03/6.png\" alt=\"image\"></p>\n<p>动画介绍三次握手和四次挥手</p>\n<p><img data-src=\"/assets/img/2019/03/7.gif\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/8.gif\" alt=\"image\"></p>\n<blockquote>\n<p>先写到这待补充完善！</p>\n</blockquote>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJEJTkxJUU3JUJCJTlDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">网络传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT1NJJUU2JUE4JUExJUU1JTlFJThC\">OSI 模型 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI2JTg1JUU2JTk2JTg3JUU2JTlDJUFDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">超文本传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">互联网协议入门（一） - 阮一峰的网络日志<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">TCP 协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=\">MDN http 响应代码<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>《图解 HTTP 协议》</li>\n<li>《计算机网络》</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>一直说写这么一篇文章，可是都没什么时间静下心来整理，最近项目不是很忙，打算抽时间整理整理一些常用的方法，反正慢慢来嘛~~</p>\n<h4 id=\"聊聊网络传输协议\"><a href=\"#聊聊网络传输协议\" class=\"headerlink\" title=\"聊聊网络传输协议\"></a>聊聊网络传输协议</h4>","more":"<p><br/>&emsp;&emsp;网络传输协议，英文全名（Internet communication protocol）又叫互联网协议（Internet Protocol Suite）是一个网络通信模型，以及一整个网络传输协议家族，为互联网的基础通信架构。它常被通称为 TCP/IP 协议族（英语：TCP/IP Protocol Suite，或 TCP/IP Protocols），简称 TCP/IP。因为该协议家族的两个核心协议：TCP（传输控制协议）和 IP（网际协议），为该家族中最早通过的标准。由于在网络通讯协议普遍采用分层的结构，当多个层次的协议共同工作时，类似计算机科学中的堆栈，因此又被称为 TCP/IP 协议栈（英语：TCP/IP Protocol Stack） 。这些协议最早发源于美国国防部（缩写为 DoD）的 ARPA 网项目，因此也被称作 DoD 模型（DoD Model）。这个协议族由互联网工程任务组（IETF）负责维护。<br>&emsp;&emsp;TCP/IP 提供点对点的链接机制，将数据应该如何封装、定址、传输、路由以及在目的地如何接收，都加以标准化。它将软件通信过程抽象化为四个抽象层，采取协议堆栈的方式，分别实现出不同通信协议。协议族下的各种协议，依其功能不同，被分别归属到这四个层次结构之中，常被视为是简化的七层 OSI 模型。</p>\n<blockquote>\n<p>下图介绍了网络传输协议七层 OSI 模型图以及四层网络协议解构图：</p>\n</blockquote>\n<p><img data-src=\"/assets/img/2019/03/1.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/2.png\" alt=\"image\"></p>\n<p>它们叫什么名字，其实并不重要。只需要知道，互联网传输协议分成若干层就可以了那么接下来我讲讲这个互联网络中的一些规定协议，这些协议大多都是我们常见的一些：。。。</p>\n<p><img data-src=\"/assets/img/2019/03/3.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/4.png\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/5.png\" alt=\"image\"></p>\n<h4 id=\"http-协议与-tcp-协议的恩怨情仇\"><a href=\"#http-协议与-tcp-协议的恩怨情仇\" class=\"headerlink\" title=\"http 协议与 tcp 协议的恩怨情仇\"></a>http 协议与 tcp 协议的恩怨情仇</h4><h5 id=\"tcp-三次握手和四次挥手\"><a href=\"#tcp-三次握手和四次挥手\" class=\"headerlink\" title=\"tcp 三次握手和四次挥手\"></a>tcp 三次握手和四次挥手</h5><p>讲这个 http 协议协议与 tcp 协议的恩怨情仇，就不得不提 tcp 的三次握手和四次挥手，从上图来看谁让人家是传输层，咱们是应用层呐！下图介绍了关于三次握手和四次挥手的拟人化描述!</p>\n<p><img data-src=\"/assets/img/2019/03/6.png\" alt=\"image\"></p>\n<p>动画介绍三次握手和四次挥手</p>\n<p><img data-src=\"/assets/img/2019/03/7.gif\" alt=\"image\">)<img data-src=\"/assets/img/2019/03/8.gif\" alt=\"image\"></p>\n<blockquote>\n<p>先写到这待补充完善！</p>\n</blockquote>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JUJEJTkxJUU3JUJCJTlDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">网络传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvT1NJJUU2JUE4JUExJUU1JTlFJThC\">OSI 模型 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU4JUI2JTg1JUU2JTk2JTg3JUU2JTlDJUFDJUU0JUJDJUEwJUU4JUJFJTkzJUU1JThEJThGJUU4JUFFJUFF\">超文本传输协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">互联网协议入门（一） - 阮一峰的网络日志<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJDJUEwJUU4JUJFJTkzJUU2JThFJUE3JUU1JTg4JUI2JUU1JThEJThGJUU4JUFFJUFF\">TCP 协议 - 维基百科，自由的百科全书<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRUUC9TdGF0dXM=\">MDN http 响应代码<i class=\"fa fa-external-link-alt\"></i></span></li>\n<li>《图解 HTTP 协议》</li>\n<li>《计算机网络》</li>\n</ul>"},{"title":"ES6语法（一）","date":"2019-03-25T06:51:56.000Z","layout":"post","author":"Mark","_content":"\n学习 ES6 语法笔记\n\n#### 变量的解构赋值\n\n##### 数组的解构赋值\n\n###### 基本用法\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n以前，为变量赋值，只能直接指定值。\n<!-- more -->\n```javascript\nlet a = 1\nlet b = 2\nlet c = 3\n```\n\nES6 允许写成下面这样。\n\n```javascript\nlet [a, b, c] = [1, 2, 3]\n```\n\n上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。\n\n本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。\n\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]]\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [, , third] = [\"foo\", \"bar\", \"baz\"]\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3]\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4]\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = [\"a\"]\nx // \"a\"\ny // undefined\nz // []\n```\n\n如果解构不成功，变量的值就等于`undefined`。\n\n```javascript\nlet [foo] = []\nlet [bar, foo] = [1]\n```\n\n以上两种情况都属于解构不成功，`foo`的值都会等于`undefined`。\n\n另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3]\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4]\na // 1\nb // 2\nd // 4\n```\n\n上面两个例子，都属于不完全解构，但是可以成功。\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n\n```javascript\n// 报错\nlet [foo] = 1\nlet [foo] = false\nlet [foo] = NaN\nlet [foo] = undefined\nlet [foo] = null\nlet [foo] = {}\n```\n\n上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。\n\n对于 Set 结构，也可以使用数组的解构赋值。\n\n```javascript\nlet [x, y, z] = new Set([\"a\", \"b\", \"c\"])\nx // \"a\"\n```\n\n事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n\n```javascript\nfunction* fibs() {\n\tlet a = 0\n\tlet b = 1\n\twhile (true) {\n\t\tyield a\n\t\t;[a, b] = [b, a + b]\n\t}\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs()\nsixth // 5\n```\n\n上面代码中，`fibs`是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。\n\n###### 默认值\n\n解构赋值允许指定默认值。\n\n```javascript\nlet [foo = true] = []\nfoo // true\n\nlet [x, y = \"b\"] = [\"a\"] // x='a', y='b'\nlet [x, y = \"b\"] = [\"a\", undefined] // x='a', y='b'\n```\n\n注意，ES6 内部使用严格相等运算符（`===`），判断一个位置是否有值。所以，只有当一个数组成员严格等于`undefined`，默认值才会生效。\n\n```javascript\nlet [x = 1] = [undefined]\nx // 1\n\nlet [x = 1] = [null]\nx // null\n```\n\n上面代码中，如果一个数组成员是`null`，默认值就不会生效，因为`null`不严格等于`undefined`。\n\n如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\n\n```javascript\nfunction f() {\n\tconsole.log(\"aaa\")\n}\n\nlet [x = f()] = [1]\n```\n\n上面代码中，因为`x`能取到值，所以函数`f`根本不会执行。上面的代码其实等价于下面的代码。\n\n```javascript\nlet x\nif ([1][0] === undefined) {\n\tx = f()\n} else {\n\tx = [1][0]\n}\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```javascript\nlet [x = 1, y = x] = [] // x=1; y=1\nlet [x = 1, y = x] = [2] // x=2; y=2\nlet [x = 1, y = x] = [1, 2] // x=1; y=2\nlet [x = y, y = 1] = [] // ReferenceError: y is not defined\n```\n\n上面最后一个表达式之所以会报错，是因为`x`用`y`做默认值时，`y`还没有声明。\n\n##### 对象的解构赋值\n\n解构不仅可以用于数组，还可以用于对象。\n\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" }\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\nlet { bar, foo } = { foo: \"aaa\", bar: \"bbb\" }\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // undefined\n```\n\n上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于`undefined`。\n\n如果变量名与属性名不一致，必须写成下面这样。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // \"aaa\"\n\nlet obj = { first: \"hello\", last: \"world\" }\nlet { first: f, last: l } = obj\nf // 'hello'\nl // 'world'\n```\n\n这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。\n\n```javascript\nlet { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" }\n```\n\n也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // \"aaa\"\nfoo // error: foo is not defined\n```\n\n上面代码中，`foo`是匹配的模式，`baz`才是变量。真正被赋值的是变量`baz`，而不是模式`foo`。\n\n与数组一样，解构也可以用于嵌套结构的对象。\n\n```javascript\nlet obj = {\n\tp: [\"Hello\", { y: \"World\" }]\n}\n\nlet {\n\tp: [x, { y }]\n} = obj\nx // \"Hello\"\ny // \"World\"\n```\n\n注意，这时`p`是模式，不是变量，因此不会被赋值。如果`p`也要作为变量赋值，可以写成下面这样。\n\n```javascript\nlet obj = {\n\tp: [\"Hello\", { y: \"World\" }]\n}\n\nlet {\n\tp,\n\tp: [x, { y }]\n} = obj\nx // \"Hello\"\ny // \"World\"\np // [\"Hello\", {y: \"World\"}]\n```\n\n下面是另一个例子。\n\n```javascript\nconst node = {\n\tloc: {\n\t\tstart: {\n\t\t\tline: 1,\n\t\t\tcolumn: 5\n\t\t}\n\t}\n}\n\nlet {\n\tloc,\n\tloc: { start },\n\tloc: {\n\t\tstart: { line }\n\t}\n} = node\nline // 1\nloc // Object {start: Object}\nstart // Object {line: 1, column: 5}\n```\n\n上面代码有三次解构赋值，分别是对`loc`、`start`、`line`三个属性的解构赋值。注意，最后一次对`line`属性的解构赋值之中，只有`line`是变量，`loc`和`start`都是模式，不是变量。\n\n下面是嵌套赋值的例子。\n\n```javascript\nlet obj = {}\nlet arr = []\n\n;({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true })\n\nobj // {prop:123}\narr // [true]\n```\n\n对象的解构也可以指定默认值。\n\n```javascript\nvar { x = 3 } = {}\nx // 3\n\nvar { x, y = 5 } = { x: 1 }\nx // 1\ny // 5\n\nvar { x: y = 3 } = {}\ny // 3\n\nvar { x: y = 3 } = { x: 5 }\ny // 5\n\nvar { message: msg = \"Something went wrong\" } = {}\nmsg // \"Something went wrong\"\n```\n\n默认值生效的条件是，对象的属性值严格等于`undefined`。\n\n```javascript\nvar { x = 3 } = { x: undefined }\nx // 3\n\nvar { x = 3 } = { x: null }\nx // null\n```\n\n上面代码中，属性`x`等于`null`，因为`null`与`undefined`不严格相等，所以是个有效的赋值，导致默认值`3`不会生效。\n\n如果解构失败，变量的值等于`undefined`。\n\n```javascript\nlet { foo } = { bar: \"baz\" }\nfoo // undefined\n```\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n```javascript\n// 报错\nlet {\n\tfoo: { bar }\n} = { baz: \"baz\" }\n```\n\n上面代码中，等号左边对象的`foo`属性，对应一个子对象。该子对象的`bar`属性，解构时会报错。原因很简单，因为`foo`这时等于`undefined`，再取子属性就会报错，请看下面的代码。\n\n```javascript\nlet _tmp = { baz: \"baz\" }\n_tmp.foo.bar // 报错\n```\n\n如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n```javascript\n// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n```\n\n上面代码的写法会报错，因为 JavaScript 引擎会将`{x}`理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n```javascript\n// 正确的写法\nlet x\n;({ x } = { x: 1 })\n```\n\n上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\n\n解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n\n```javascript\n;({} = [true, false])\n;({} = \"abc\")\n;({} = [])\n```\n\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。\n\n```javascript\nlet { log, sin, cos } = Math\n```\n\n上面代码将`Math`对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。\n\n由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n```javascript\nlet arr = [1, 2, 3]\nlet { 0: first, [arr.length - 1]: last } = arr\nfirst // 1\nlast // 3\n```\n\n上面代码对数组进行对象解构。数组`arr`的`0`键对应的值是`1`，`[arr.length - 1]`就是`2`键，对应的值是`3`。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。\n\n##### 字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = \"hello\"\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n\n类似数组的对象都有一个`length`属性，因此还可以对这个属性解构赋值。\n\n```javascript\nlet { length: len } = \"hello\"\nlen // 5\n```\n\n##### 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n```javascript\nlet { toString: s } = 123\ns === Number.prototype.toString // true\n\nlet { toString: s } = true\ns === Boolean.prototype.toString // true\n```\n\n上面代码中，数值和布尔值的包装对象都有`toString`属性，因此变量`s`都能取到值。\n\n解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于`undefined`和`null`无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined // TypeError\nlet { prop: y } = null // TypeError\n```\n\n##### 函数参数的解构赋值\n\n函数的参数也可以使用解构赋值。\n\n```javascript\nfunction add([x, y]) {\n\treturn x + y\n}\n\nadd([1, 2]) // 3\n```\n\n上面代码中，函数`add`的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量`x`和`y`。对于函数内部的代码来说，它们能感受到的参数就是`x`和`y`。\n\n下面是另一个例子。\n\n```javascript\n;[[1, 2], [3, 4]].map(([a, b]) => a + b)\n// [ 3, 7 ]\n```\n\n函数参数的解构也可以使用默认值。\n\n```javascript\nfunction move({ x = 0, y = 0 } = {}) {\n\treturn [x, y]\n}\n\nmove({ x: 3, y: 8 }) // [3, 8]\nmove({ x: 3 }) // [3, 0]\nmove({}) // [0, 0]\nmove() // [0, 0]\n```\n\n上面代码中，函数`move`的参数是一个对象，通过对这个对象进行解构，得到变量`x`和`y`的值。如果解构失败，`x`和`y`等于默认值。\n\n注意，下面的写法会得到不一样的结果。\n\n```javascript\nfunction move({ x, y } = { x: 0, y: 0 }) {\n\treturn [x, y]\n}\n\nmove({ x: 3, y: 8 }) // [3, 8]\nmove({ x: 3 }) // [3, undefined]\nmove({}) // [undefined, undefined]\nmove() // [0, 0]\n```\n\n上面代码是为函数`move`的参数指定默认值，而不是为变量`x`和`y`指定默认值，所以会得到与前一种写法不同的结果。\n\n`undefined`就会触发函数参数的默认值。\n\n```javascript\n;[1, undefined, 3].map((x = \"yes\") => x)\n// [ 1, 'yes', 3 ]\n```\n\n##### 圆括号问题\n\n解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\n\n由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\n\n但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。\n\n###### 不能使用圆括号的情况\n\n以下三种解构赋值不得使用圆括号。\n\n（1）变量声明语句\n\n```javascript\n// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n```\n\n上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\n\n（2）函数参数\n\n函数参数也属于变量声明，因此不能带有圆括号。\n\n```javascript\n// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n```\n\n（3）赋值语句的模式\n\n```javascript\n// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n```\n\n上面代码将整个模式放在圆括号之中，导致报错。\n\n```javascript\n// 报错\n;[{ p: a }, { x: c }] = [{}, {}]\n```\n\n上面代码将一部分模式放在圆括号之中，导致报错。\n\n##### 可以使用圆括号的情况\n\n可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。\n\n```javascript\n;[b] = [3] // 正确\n;({ p: d } = {}) // 正确\n;[parseInt.prop] = [3] // 正确\n```\n\n上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是`p`，而不是`d`；第三行语句与第一行语句的性质一致。\n\n##### 用途\n\n变量的解构赋值用途很多。\n\n**（1）交换变量的值**\n\n```javascript\nlet x = 1\nlet y = 2\n\n;[x, y] = [y, x]\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n**（2）从函数返回多个值**\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```javascript\n// 返回一个数组\n\nfunction example() {\n\treturn [1, 2, 3]\n}\nlet [a, b, c] = example()\n\n// 返回一个对象\n\nfunction example() {\n\treturn {\n\t\tfoo: 1,\n\t\tbar: 2\n\t}\n}\nlet { foo, bar } = example()\n```\n\n**（3）函数参数的定义**\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n**（4）提取 JSON 数据**\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```javascript\nlet jsonData = {\n\tid: 42,\n\tstatus: \"OK\",\n\tdata: [867, 5309]\n}\n\nlet { id, status, data: number } = jsonData\n\nconsole.log(id, status, number)\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n**（5）函数参数的默认值**\n\n```javascript\njQuery.ajax = function(\n\turl,\n\t{\n\t\tasync = true,\n\t\tbeforeSend = function() {},\n\t\tcache = true,\n\t\tcomplete = function() {},\n\t\tcrossDomain = false,\n\t\tglobal = true\n\t\t// ... more config\n\t} = {}\n) {\n\t// ... do stuff\n}\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n**（6）遍历 Map 结构**\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nconst map = new Map()\nmap.set(\"first\", \"hello\")\nmap.set(\"second\", \"world\")\n\nfor (let [key, value] of map) {\n\tconsole.log(key + \" is \" + value)\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```javascript\n// 获取键名\nfor (let [key] of map) {\n\t// ...\n}\n\n// 获取键值\nfor (let [, value] of map) {\n\t// ...\n}\n```\n\n**（7）输入模块的指定方法**\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```javascript\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\")\n```\n\n#### 参考文档：\n\n- [《ECMAScript 6 入门》](http://es6.ruanyifeng.com/#docs)\n","source":"_posts/ES6语法（一）.md","raw":"---\ntitle: ES6语法（一）\ndate: 2019-03-25 14:51:56\nlayout: post\nauthor: \"Mark\"\ncategories: JavaScript #分类\ntags:\n  - 前端开发\n  - JavaScript\n  - ES6语法\n---\n\n学习 ES6 语法笔记\n\n#### 变量的解构赋值\n\n##### 数组的解构赋值\n\n###### 基本用法\n\nES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。\n\n以前，为变量赋值，只能直接指定值。\n<!-- more -->\n```javascript\nlet a = 1\nlet b = 2\nlet c = 3\n```\n\nES6 允许写成下面这样。\n\n```javascript\nlet [a, b, c] = [1, 2, 3]\n```\n\n上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。\n\n本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。\n\n```javascript\nlet [foo, [[bar], baz]] = [1, [[2], 3]]\nfoo // 1\nbar // 2\nbaz // 3\n\nlet [, , third] = [\"foo\", \"bar\", \"baz\"]\nthird // \"baz\"\n\nlet [x, , y] = [1, 2, 3]\nx // 1\ny // 3\n\nlet [head, ...tail] = [1, 2, 3, 4]\nhead // 1\ntail // [2, 3, 4]\n\nlet [x, y, ...z] = [\"a\"]\nx // \"a\"\ny // undefined\nz // []\n```\n\n如果解构不成功，变量的值就等于`undefined`。\n\n```javascript\nlet [foo] = []\nlet [bar, foo] = [1]\n```\n\n以上两种情况都属于解构不成功，`foo`的值都会等于`undefined`。\n\n另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。\n\n```javascript\nlet [x, y] = [1, 2, 3]\nx // 1\ny // 2\n\nlet [a, [b], d] = [1, [2, 3], 4]\na // 1\nb // 2\nd // 4\n```\n\n上面两个例子，都属于不完全解构，但是可以成功。\n\n如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。\n\n```javascript\n// 报错\nlet [foo] = 1\nlet [foo] = false\nlet [foo] = NaN\nlet [foo] = undefined\nlet [foo] = null\nlet [foo] = {}\n```\n\n上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。\n\n对于 Set 结构，也可以使用数组的解构赋值。\n\n```javascript\nlet [x, y, z] = new Set([\"a\", \"b\", \"c\"])\nx // \"a\"\n```\n\n事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。\n\n```javascript\nfunction* fibs() {\n\tlet a = 0\n\tlet b = 1\n\twhile (true) {\n\t\tyield a\n\t\t;[a, b] = [b, a + b]\n\t}\n}\n\nlet [first, second, third, fourth, fifth, sixth] = fibs()\nsixth // 5\n```\n\n上面代码中，`fibs`是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。\n\n###### 默认值\n\n解构赋值允许指定默认值。\n\n```javascript\nlet [foo = true] = []\nfoo // true\n\nlet [x, y = \"b\"] = [\"a\"] // x='a', y='b'\nlet [x, y = \"b\"] = [\"a\", undefined] // x='a', y='b'\n```\n\n注意，ES6 内部使用严格相等运算符（`===`），判断一个位置是否有值。所以，只有当一个数组成员严格等于`undefined`，默认值才会生效。\n\n```javascript\nlet [x = 1] = [undefined]\nx // 1\n\nlet [x = 1] = [null]\nx // null\n```\n\n上面代码中，如果一个数组成员是`null`，默认值就不会生效，因为`null`不严格等于`undefined`。\n\n如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。\n\n```javascript\nfunction f() {\n\tconsole.log(\"aaa\")\n}\n\nlet [x = f()] = [1]\n```\n\n上面代码中，因为`x`能取到值，所以函数`f`根本不会执行。上面的代码其实等价于下面的代码。\n\n```javascript\nlet x\nif ([1][0] === undefined) {\n\tx = f()\n} else {\n\tx = [1][0]\n}\n```\n\n默认值可以引用解构赋值的其他变量，但该变量必须已经声明。\n\n```javascript\nlet [x = 1, y = x] = [] // x=1; y=1\nlet [x = 1, y = x] = [2] // x=2; y=2\nlet [x = 1, y = x] = [1, 2] // x=1; y=2\nlet [x = y, y = 1] = [] // ReferenceError: y is not defined\n```\n\n上面最后一个表达式之所以会报错，是因为`x`用`y`做默认值时，`y`还没有声明。\n\n##### 对象的解构赋值\n\n解构不仅可以用于数组，还可以用于对象。\n\n```javascript\nlet { foo, bar } = { foo: \"aaa\", bar: \"bbb\" }\nfoo // \"aaa\"\nbar // \"bbb\"\n```\n\n对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。\n\n```javascript\nlet { bar, foo } = { foo: \"aaa\", bar: \"bbb\" }\nfoo // \"aaa\"\nbar // \"bbb\"\n\nlet { baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // undefined\n```\n\n上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于`undefined`。\n\n如果变量名与属性名不一致，必须写成下面这样。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // \"aaa\"\n\nlet obj = { first: \"hello\", last: \"world\" }\nlet { first: f, last: l } = obj\nf // 'hello'\nl // 'world'\n```\n\n这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。\n\n```javascript\nlet { foo: foo, bar: bar } = { foo: \"aaa\", bar: \"bbb\" }\n```\n\n也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。\n\n```javascript\nlet { foo: baz } = { foo: \"aaa\", bar: \"bbb\" }\nbaz // \"aaa\"\nfoo // error: foo is not defined\n```\n\n上面代码中，`foo`是匹配的模式，`baz`才是变量。真正被赋值的是变量`baz`，而不是模式`foo`。\n\n与数组一样，解构也可以用于嵌套结构的对象。\n\n```javascript\nlet obj = {\n\tp: [\"Hello\", { y: \"World\" }]\n}\n\nlet {\n\tp: [x, { y }]\n} = obj\nx // \"Hello\"\ny // \"World\"\n```\n\n注意，这时`p`是模式，不是变量，因此不会被赋值。如果`p`也要作为变量赋值，可以写成下面这样。\n\n```javascript\nlet obj = {\n\tp: [\"Hello\", { y: \"World\" }]\n}\n\nlet {\n\tp,\n\tp: [x, { y }]\n} = obj\nx // \"Hello\"\ny // \"World\"\np // [\"Hello\", {y: \"World\"}]\n```\n\n下面是另一个例子。\n\n```javascript\nconst node = {\n\tloc: {\n\t\tstart: {\n\t\t\tline: 1,\n\t\t\tcolumn: 5\n\t\t}\n\t}\n}\n\nlet {\n\tloc,\n\tloc: { start },\n\tloc: {\n\t\tstart: { line }\n\t}\n} = node\nline // 1\nloc // Object {start: Object}\nstart // Object {line: 1, column: 5}\n```\n\n上面代码有三次解构赋值，分别是对`loc`、`start`、`line`三个属性的解构赋值。注意，最后一次对`line`属性的解构赋值之中，只有`line`是变量，`loc`和`start`都是模式，不是变量。\n\n下面是嵌套赋值的例子。\n\n```javascript\nlet obj = {}\nlet arr = []\n\n;({ foo: obj.prop, bar: arr[0] } = { foo: 123, bar: true })\n\nobj // {prop:123}\narr // [true]\n```\n\n对象的解构也可以指定默认值。\n\n```javascript\nvar { x = 3 } = {}\nx // 3\n\nvar { x, y = 5 } = { x: 1 }\nx // 1\ny // 5\n\nvar { x: y = 3 } = {}\ny // 3\n\nvar { x: y = 3 } = { x: 5 }\ny // 5\n\nvar { message: msg = \"Something went wrong\" } = {}\nmsg // \"Something went wrong\"\n```\n\n默认值生效的条件是，对象的属性值严格等于`undefined`。\n\n```javascript\nvar { x = 3 } = { x: undefined }\nx // 3\n\nvar { x = 3 } = { x: null }\nx // null\n```\n\n上面代码中，属性`x`等于`null`，因为`null`与`undefined`不严格相等，所以是个有效的赋值，导致默认值`3`不会生效。\n\n如果解构失败，变量的值等于`undefined`。\n\n```javascript\nlet { foo } = { bar: \"baz\" }\nfoo // undefined\n```\n\n如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。\n\n```javascript\n// 报错\nlet {\n\tfoo: { bar }\n} = { baz: \"baz\" }\n```\n\n上面代码中，等号左边对象的`foo`属性，对应一个子对象。该子对象的`bar`属性，解构时会报错。原因很简单，因为`foo`这时等于`undefined`，再取子属性就会报错，请看下面的代码。\n\n```javascript\nlet _tmp = { baz: \"baz\" }\n_tmp.foo.bar // 报错\n```\n\n如果要将一个已经声明的变量用于解构赋值，必须非常小心。\n\n```javascript\n// 错误的写法\nlet x;\n{x} = {x: 1};\n// SyntaxError: syntax error\n```\n\n上面代码的写法会报错，因为 JavaScript 引擎会将`{x}`理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。\n\n```javascript\n// 正确的写法\nlet x\n;({ x } = { x: 1 })\n```\n\n上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。\n\n解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。\n\n```javascript\n;({} = [true, false])\n;({} = \"abc\")\n;({} = [])\n```\n\n上面的表达式虽然毫无意义，但是语法是合法的，可以执行。\n\n对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。\n\n```javascript\nlet { log, sin, cos } = Math\n```\n\n上面代码将`Math`对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。\n\n由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。\n\n```javascript\nlet arr = [1, 2, 3]\nlet { 0: first, [arr.length - 1]: last } = arr\nfirst // 1\nlast // 3\n```\n\n上面代码对数组进行对象解构。数组`arr`的`0`键对应的值是`1`，`[arr.length - 1]`就是`2`键，对应的值是`3`。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。\n\n##### 字符串的解构赋值\n\n字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。\n\n```javascript\nconst [a, b, c, d, e] = \"hello\"\na // \"h\"\nb // \"e\"\nc // \"l\"\nd // \"l\"\ne // \"o\"\n```\n\n类似数组的对象都有一个`length`属性，因此还可以对这个属性解构赋值。\n\n```javascript\nlet { length: len } = \"hello\"\nlen // 5\n```\n\n##### 数值和布尔值的解构赋值\n\n解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。\n\n```javascript\nlet { toString: s } = 123\ns === Number.prototype.toString // true\n\nlet { toString: s } = true\ns === Boolean.prototype.toString // true\n```\n\n上面代码中，数值和布尔值的包装对象都有`toString`属性，因此变量`s`都能取到值。\n\n解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于`undefined`和`null`无法转为对象，所以对它们进行解构赋值，都会报错。\n\n```javascript\nlet { prop: x } = undefined // TypeError\nlet { prop: y } = null // TypeError\n```\n\n##### 函数参数的解构赋值\n\n函数的参数也可以使用解构赋值。\n\n```javascript\nfunction add([x, y]) {\n\treturn x + y\n}\n\nadd([1, 2]) // 3\n```\n\n上面代码中，函数`add`的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量`x`和`y`。对于函数内部的代码来说，它们能感受到的参数就是`x`和`y`。\n\n下面是另一个例子。\n\n```javascript\n;[[1, 2], [3, 4]].map(([a, b]) => a + b)\n// [ 3, 7 ]\n```\n\n函数参数的解构也可以使用默认值。\n\n```javascript\nfunction move({ x = 0, y = 0 } = {}) {\n\treturn [x, y]\n}\n\nmove({ x: 3, y: 8 }) // [3, 8]\nmove({ x: 3 }) // [3, 0]\nmove({}) // [0, 0]\nmove() // [0, 0]\n```\n\n上面代码中，函数`move`的参数是一个对象，通过对这个对象进行解构，得到变量`x`和`y`的值。如果解构失败，`x`和`y`等于默认值。\n\n注意，下面的写法会得到不一样的结果。\n\n```javascript\nfunction move({ x, y } = { x: 0, y: 0 }) {\n\treturn [x, y]\n}\n\nmove({ x: 3, y: 8 }) // [3, 8]\nmove({ x: 3 }) // [3, undefined]\nmove({}) // [undefined, undefined]\nmove() // [0, 0]\n```\n\n上面代码是为函数`move`的参数指定默认值，而不是为变量`x`和`y`指定默认值，所以会得到与前一种写法不同的结果。\n\n`undefined`就会触发函数参数的默认值。\n\n```javascript\n;[1, undefined, 3].map((x = \"yes\") => x)\n// [ 1, 'yes', 3 ]\n```\n\n##### 圆括号问题\n\n解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。\n\n由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。\n\n但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。\n\n###### 不能使用圆括号的情况\n\n以下三种解构赋值不得使用圆括号。\n\n（1）变量声明语句\n\n```javascript\n// 全部报错\nlet [(a)] = [1];\n\nlet {x: (c)} = {};\nlet ({x: c}) = {};\nlet {(x: c)} = {};\nlet {(x): c} = {};\n\nlet { o: ({ p: p }) } = { o: { p: 2 } };\n```\n\n上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。\n\n（2）函数参数\n\n函数参数也属于变量声明，因此不能带有圆括号。\n\n```javascript\n// 报错\nfunction f([(z)]) { return z; }\n// 报错\nfunction f([z,(x)]) { return x; }\n```\n\n（3）赋值语句的模式\n\n```javascript\n// 全部报错\n({ p: a }) = { p: 42 };\n([a]) = [5];\n```\n\n上面代码将整个模式放在圆括号之中，导致报错。\n\n```javascript\n// 报错\n;[{ p: a }, { x: c }] = [{}, {}]\n```\n\n上面代码将一部分模式放在圆括号之中，导致报错。\n\n##### 可以使用圆括号的情况\n\n可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。\n\n```javascript\n;[b] = [3] // 正确\n;({ p: d } = {}) // 正确\n;[parseInt.prop] = [3] // 正确\n```\n\n上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是`p`，而不是`d`；第三行语句与第一行语句的性质一致。\n\n##### 用途\n\n变量的解构赋值用途很多。\n\n**（1）交换变量的值**\n\n```javascript\nlet x = 1\nlet y = 2\n\n;[x, y] = [y, x]\n```\n\n上面代码交换变量`x`和`y`的值，这样的写法不仅简洁，而且易读，语义非常清晰。\n\n**（2）从函数返回多个值**\n\n函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。\n\n```javascript\n// 返回一个数组\n\nfunction example() {\n\treturn [1, 2, 3]\n}\nlet [a, b, c] = example()\n\n// 返回一个对象\n\nfunction example() {\n\treturn {\n\t\tfoo: 1,\n\t\tbar: 2\n\t}\n}\nlet { foo, bar } = example()\n```\n\n**（3）函数参数的定义**\n\n解构赋值可以方便地将一组参数与变量名对应起来。\n\n```javascript\n// 参数是一组有次序的值\nfunction f([x, y, z]) { ... }\nf([1, 2, 3]);\n\n// 参数是一组无次序的值\nfunction f({x, y, z}) { ... }\nf({z: 3, y: 2, x: 1});\n```\n\n**（4）提取 JSON 数据**\n\n解构赋值对提取 JSON 对象中的数据，尤其有用。\n\n```javascript\nlet jsonData = {\n\tid: 42,\n\tstatus: \"OK\",\n\tdata: [867, 5309]\n}\n\nlet { id, status, data: number } = jsonData\n\nconsole.log(id, status, number)\n// 42, \"OK\", [867, 5309]\n```\n\n上面代码可以快速提取 JSON 数据的值。\n\n**（5）函数参数的默认值**\n\n```javascript\njQuery.ajax = function(\n\turl,\n\t{\n\t\tasync = true,\n\t\tbeforeSend = function() {},\n\t\tcache = true,\n\t\tcomplete = function() {},\n\t\tcrossDomain = false,\n\t\tglobal = true\n\t\t// ... more config\n\t} = {}\n) {\n\t// ... do stuff\n}\n```\n\n指定参数的默认值，就避免了在函数体内部再写`var foo = config.foo || 'default foo';`这样的语句。\n\n**（6）遍历 Map 结构**\n\n任何部署了 Iterator 接口的对象，都可以用`for...of`循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。\n\n```javascript\nconst map = new Map()\nmap.set(\"first\", \"hello\")\nmap.set(\"second\", \"world\")\n\nfor (let [key, value] of map) {\n\tconsole.log(key + \" is \" + value)\n}\n// first is hello\n// second is world\n```\n\n如果只想获取键名，或者只想获取键值，可以写成下面这样。\n\n```javascript\n// 获取键名\nfor (let [key] of map) {\n\t// ...\n}\n\n// 获取键值\nfor (let [, value] of map) {\n\t// ...\n}\n```\n\n**（7）输入模块的指定方法**\n\n加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。\n\n```javascript\nconst { SourceMapConsumer, SourceNode } = require(\"source-map\")\n```\n\n#### 参考文档：\n\n- [《ECMAScript 6 入门》](http://es6.ruanyifeng.com/#docs)\n","slug":"ES6语法（一）","published":1,"updated":"2020-04-07T14:39:37.718Z","comments":1,"photos":[],"link":"","_id":"ck8q1q00r0049bhc3bi67b84g","content":"<p>学习 ES6 语法笔记</p>\n<h4 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h4><h5 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h5><h6 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h6><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 允许写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>\n<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [, , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>]</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">\"a\"</span>]</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>])</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></figure>\n\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> a</span><br><span class=\"line\">\t\t;[a, b] = [b, a + b]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs()</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n<h6 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h6><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = []</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>] <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>]</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"aaa\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，因为<code>x</code>能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">\tx = f()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tx = [<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [] <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>] <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>] <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [] <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p>\n<h5 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h5><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">\"hello\"</span>, <span class=\"attr\">last</span>: <span class=\"string\">\"world\"</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n\n<p>这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp,</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br><span class=\"line\">p <span class=\"comment\">// [\"Hello\", &#123;y: \"World\"&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123;</span><br><span class=\"line\">\t\t\tline: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tcolumn: <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tloc,</span><br><span class=\"line\">\tloc: &#123; start &#125;,</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123; line &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; = node</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc <span class=\"comment\">// Object &#123;start: Object&#125;</span></span><br><span class=\"line\">start <span class=\"comment\">// Object &#123;line: 1, column: 5&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码有三次解构赋值，分别是对<code>loc</code>、<code>start</code>、<code>line</code>三个属性的解构赋值。注意，最后一次对<code>line</code>属性的解构赋值之中，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<p>下面是嵌套赋值的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\">;(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x, y = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">\"Something went wrong\"</span> &#125; = &#123;&#125;</span><br><span class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<p>如果解构失败，变量的值等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo &#125; = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tfoo: &#123; bar &#125;</span><br><span class=\"line\">&#125; = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，等号左边对象的<code>foo</code>属性，对应一个子对象。该子对象的<code>bar</code>属性，解构时会报错。原因很简单，因为<code>foo</code>这时等于<code>undefined</code>，再取子属性就会报错，请看下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _tmp = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">_tmp.foo.bar <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\">;(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>])</span><br><span class=\"line\">;(&#123;&#125; = <span class=\"string\">\"abc\"</span>)</span><br><span class=\"line\">;(&#123;&#125; = [])</span><br></pre></td></tr></table></figure>\n\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码将<code>Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"number\">0</span>: first, [arr.length - <span class=\"number\">1</span>]: last &#125; = arr</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h5 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">length</span>: len &#125; = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"number\">123</span></span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"literal\">true</span></span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span> <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span> <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x, y &#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p><code>undefined</code>就会触发函数参数的默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">\"yes\"</span></span>) =&gt;</span> x)</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 'yes', 3 ]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"圆括号问题\"><a href=\"#圆括号问题\" class=\"headerlink\" title=\"圆括号问题\"></a>圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h6 id=\"不能使用圆括号的情况\"><a href=\"#不能使用圆括号的情况\" class=\"headerlink\" title=\"不能使用圆括号的情况\"></a>不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[(z</span>)]) </span>&#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[z,(x</span>)]) </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">;[&#123; <span class=\"attr\">p</span>: a &#125;, &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h5 id=\"可以使用圆括号的情况\"><a href=\"#可以使用圆括号的情况\" class=\"headerlink\" title=\"可以使用圆括号的情况\"></a>可以使用圆括号的情况</h5><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[b] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;(&#123; <span class=\"attr\">p</span>: d &#125; = &#123;&#125;) <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;[<span class=\"built_in\">parseInt</span>.prop] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h5 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h5><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tfoo: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tbar: <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example()</span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">\tid: <span class=\"number\">42</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">\tdata: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number)</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\turl,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tasync = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tbeforeSend = function(</span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tcomplete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcrossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\tglobal = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// ... more config</span></span><br><span class=\"line\">\t&#125; = &#123;&#125;</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">\"first\"</span>, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">map.set(<span class=\"string\">\"second\"</span>, <span class=\"string\">\"world\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcw==\">《ECMAScript 6 入门》<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>学习 ES6 语法笔记</p>\n<h4 id=\"变量的解构赋值\"><a href=\"#变量的解构赋值\" class=\"headerlink\" title=\"变量的解构赋值\"></a>变量的解构赋值</h4><h5 id=\"数组的解构赋值\"><a href=\"#数组的解构赋值\" class=\"headerlink\" title=\"数组的解构赋值\"></a>数组的解构赋值</h5><h6 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h6><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>\n<p>以前，为变量赋值，只能直接指定值。</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>ES6 允许写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p>\n<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo, [[bar], baz]] = [<span class=\"number\">1</span>, [[<span class=\"number\">2</span>], <span class=\"number\">3</span>]]</span><br><span class=\"line\">foo <span class=\"comment\">// 1</span></span><br><span class=\"line\">bar <span class=\"comment\">// 2</span></span><br><span class=\"line\">baz <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [, , third] = [<span class=\"string\">\"foo\"</span>, <span class=\"string\">\"bar\"</span>, <span class=\"string\">\"baz\"</span>]</span><br><span class=\"line\">third <span class=\"comment\">// \"baz\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, , y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [head, ...tail] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\">head <span class=\"comment\">// 1</span></span><br><span class=\"line\">tail <span class=\"comment\">// [2, 3, 4]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y, ...z] = [<span class=\"string\">\"a\"</span>]</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br><span class=\"line\">y <span class=\"comment\">// undefined</span></span><br><span class=\"line\">z <span class=\"comment\">// []</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构不成功，变量的值就等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo] = []</span><br><span class=\"line\"><span class=\"keyword\">let</span> [bar, foo] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p>\n<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, [b], d] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"number\">4</span>]</span><br><span class=\"line\">a <span class=\"comment\">// 1</span></span><br><span class=\"line\">b <span class=\"comment\">// 2</span></span><br><span class=\"line\">d <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>上面两个例子，都属于不完全解构，但是可以成功。</p>\n<p>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，参见《Iterator》一章），那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">NaN</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">undefined</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [foo] = &#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的语句都会报错，因为等号右边的值，要么转为对象以后不具备 Iterator 接口（前五个表达式），要么本身就不具备 Iterator 接口（最后一个表达式）。</p>\n<p>对于 Set 结构，也可以使用数组的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x, y, z] = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>])</span><br><span class=\"line\">x <span class=\"comment\">// \"a\"</span></span><br></pre></td></tr></table></figure>\n\n<p>事实上，只要某种数据结构具有 Iterator 接口，都可以采用数组形式的解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibs</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> a = <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> b = <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">yield</span> a</span><br><span class=\"line\">\t\t;[a, b] = [b, a + b]</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [first, second, third, fourth, fifth, sixth] = fibs()</span><br><span class=\"line\">sixth <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>fibs</code>是一个 Generator 函数（参见《Generator 函数》一章），原生具有 Iterator 接口。解构赋值会依次从这个接口获取值。</p>\n<h6 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h6><p>解构赋值允许指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [foo = <span class=\"literal\">true</span>] = []</span><br><span class=\"line\">foo <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>] <span class=\"comment\">// x='a', y='b'</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x, y = <span class=\"string\">\"b\"</span>] = [<span class=\"string\">\"a\"</span>, <span class=\"literal\">undefined</span>] <span class=\"comment\">// x='a', y='b'</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">undefined</span>]</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>] = [<span class=\"literal\">null</span>]</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p>\n<p>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"aaa\"</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = f()] = [<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，因为<code>x</code>能取到值，所以函数<code>f</code>根本不会执行。上面的代码其实等价于下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\"><span class=\"keyword\">if</span> ([<span class=\"number\">1</span>][<span class=\"number\">0</span>] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">\tx = f()</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\tx = [<span class=\"number\">1</span>][<span class=\"number\">0</span>]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [] <span class=\"comment\">// x=1; y=1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">2</span>] <span class=\"comment\">// x=2; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = <span class=\"number\">1</span>, y = x] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>] <span class=\"comment\">// x=1; y=2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [x = y, y = <span class=\"number\">1</span>] = [] <span class=\"comment\">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p>\n<h5 id=\"对象的解构赋值\"><a href=\"#对象的解构赋值\" class=\"headerlink\" title=\"对象的解构赋值\"></a>对象的解构赋值</h5><p>解构不仅可以用于数组，还可以用于对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; bar, foo &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">bar <span class=\"comment\">// \"bbb\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的第一个例子，等号左边的两个变量的次序，与等号右边两个同名属性的次序不一致，但是对取值完全没有影响。第二个例子的变量没有对应的同名属性，导致取不到值，最后等于<code>undefined</code>。</p>\n<p>如果变量名与属性名不一致，必须写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123; <span class=\"attr\">first</span>: <span class=\"string\">\"hello\"</span>, <span class=\"attr\">last</span>: <span class=\"string\">\"world\"</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">first</span>: f, <span class=\"attr\">last</span>: l &#125; = obj</span><br><span class=\"line\">f <span class=\"comment\">// 'hello'</span></span><br><span class=\"line\">l <span class=\"comment\">// 'world'</span></span><br></pre></td></tr></table></figure>\n\n<p>这实际上说明，对象的解构赋值是下面形式的简写（参见《对象的扩展》一章）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: foo, <span class=\"attr\">bar</span>: bar &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">foo</span>: baz &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"string\">\"aaa\"</span>, <span class=\"attr\">bar</span>: <span class=\"string\">\"bbb\"</span> &#125;</span><br><span class=\"line\">baz <span class=\"comment\">// \"aaa\"</span></span><br><span class=\"line\">foo <span class=\"comment\">// error: foo is not defined</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。</p>\n<p>与数组一样，解构也可以用于嵌套结构的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br></pre></td></tr></table></figure>\n\n<p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">\tp: [<span class=\"string\">\"Hello\"</span>, &#123; <span class=\"attr\">y</span>: <span class=\"string\">\"World\"</span> &#125;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tp,</span><br><span class=\"line\">\tp: [x, &#123; y &#125;]</span><br><span class=\"line\">&#125; = obj</span><br><span class=\"line\">x <span class=\"comment\">// \"Hello\"</span></span><br><span class=\"line\">y <span class=\"comment\">// \"World\"</span></span><br><span class=\"line\">p <span class=\"comment\">// [\"Hello\", &#123;y: \"World\"&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> node = &#123;</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123;</span><br><span class=\"line\">\t\t\tline: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\t\tcolumn: <span class=\"number\">5</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tloc,</span><br><span class=\"line\">\tloc: &#123; start &#125;,</span><br><span class=\"line\">\tloc: &#123;</span><br><span class=\"line\">\t\tstart: &#123; line &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125; = node</span><br><span class=\"line\">line <span class=\"comment\">// 1</span></span><br><span class=\"line\">loc <span class=\"comment\">// Object &#123;start: Object&#125;</span></span><br><span class=\"line\">start <span class=\"comment\">// Object &#123;line: 1, column: 5&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码有三次解构赋值，分别是对<code>loc</code>、<code>start</code>、<code>line</code>三个属性的解构赋值。注意，最后一次对<code>line</code>属性的解构赋值之中，只有<code>line</code>是变量，<code>loc</code>和<code>start</code>都是模式，不是变量。</p>\n<p>下面是嵌套赋值的例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = []</span><br><span class=\"line\"></span><br><span class=\"line\">;(&#123; <span class=\"attr\">foo</span>: obj.prop, <span class=\"attr\">bar</span>: arr[<span class=\"number\">0</span>] &#125; = &#123; <span class=\"attr\">foo</span>: <span class=\"number\">123</span>, <span class=\"attr\">bar</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">obj <span class=\"comment\">// &#123;prop:123&#125;</span></span><br><span class=\"line\">arr <span class=\"comment\">// [true]</span></span><br></pre></td></tr></table></figure>\n\n<p>对象的解构也可以指定默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x, y = <span class=\"number\">5</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 1</span></span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123;&#125;</span><br><span class=\"line\">y <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">x</span>: y = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">5</span> &#125;</span><br><span class=\"line\">y <span class=\"comment\">// 5</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; <span class=\"attr\">message</span>: msg = <span class=\"string\">\"Something went wrong\"</span> &#125; = &#123;&#125;</span><br><span class=\"line\">msg <span class=\"comment\">// \"Something went wrong\"</span></span><br></pre></td></tr></table></figure>\n\n<p>默认值生效的条件是，对象的属性值严格等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">undefined</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> &#123; x = <span class=\"number\">3</span> &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">x <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，属性<code>x</code>等于<code>null</code>，因为<code>null</code>与<code>undefined</code>不严格相等，所以是个有效的赋值，导致默认值<code>3</code>不会生效。</p>\n<p>如果解构失败，变量的值等于<code>undefined</code>。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo &#125; = &#123; <span class=\"attr\">bar</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">foo <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>如果解构模式是嵌套的对象，而且子对象所在的父属性不存在，那么将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">\tfoo: &#123; bar &#125;</span><br><span class=\"line\">&#125; = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，等号左边对象的<code>foo</code>属性，对应一个子对象。该子对象的<code>bar</code>属性，解构时会报错。原因很简单，因为<code>foo</code>这时等于<code>undefined</code>，再取子属性就会报错，请看下面的代码。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _tmp = &#123; <span class=\"attr\">baz</span>: <span class=\"string\">\"baz\"</span> &#125;</span><br><span class=\"line\">_tmp.foo.bar <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n\n<p>如果要将一个已经声明的变量用于解构赋值，必须非常小心。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x;</span><br><span class=\"line\">&#123;x&#125; = &#123;<span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码的写法会报错，因为 JavaScript 引擎会将<code>{x}</code>理解成一个代码块，从而发生语法错误。只有不将大括号写在行首，避免 JavaScript 将其解释为代码块，才能解决这个问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确的写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> x</span><br><span class=\"line\">;(&#123; x &#125; = &#123; <span class=\"attr\">x</span>: <span class=\"number\">1</span> &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个解构赋值语句，放在一个圆括号里面，就可以正确执行。关于圆括号与解构赋值的关系，参见下文。</p>\n<p>解构赋值允许等号左边的模式之中，不放置任何变量名。因此，可以写出非常古怪的赋值表达式。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;(&#123;&#125; = [<span class=\"literal\">true</span>, <span class=\"literal\">false</span>])</span><br><span class=\"line\">;(&#123;&#125; = <span class=\"string\">\"abc\"</span>)</span><br><span class=\"line\">;(&#123;&#125; = [])</span><br></pre></td></tr></table></figure>\n\n<p>上面的表达式虽然毫无意义，但是语法是合法的，可以执行。</p>\n<p>对象的解构赋值，可以很方便地将现有对象的方法，赋值到某个变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; log, sin, cos &#125; = <span class=\"built_in\">Math</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码将<code>Math</code>对象的对数、正弦、余弦三个方法，赋值到对应的变量上，使用起来就会方便很多。</p>\n<p>由于数组本质是特殊的对象，因此可以对数组进行对象属性的解构。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"number\">0</span>: first, [arr.length - <span class=\"number\">1</span>]: last &#125; = arr</span><br><span class=\"line\">first <span class=\"comment\">// 1</span></span><br><span class=\"line\">last <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码对数组进行对象解构。数组<code>arr</code>的<code>0</code>键对应的值是<code>1</code>，<code>[arr.length - 1]</code>就是<code>2</code>键，对应的值是<code>3</code>。方括号这种写法，属于“属性名表达式”（参见《对象的扩展》一章）。</p>\n<h5 id=\"字符串的解构赋值\"><a href=\"#字符串的解构赋值\" class=\"headerlink\" title=\"字符串的解构赋值\"></a>字符串的解构赋值</h5><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [a, b, c, d, e] = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">a <span class=\"comment\">// \"h\"</span></span><br><span class=\"line\">b <span class=\"comment\">// \"e\"</span></span><br><span class=\"line\">c <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">d <span class=\"comment\">// \"l\"</span></span><br><span class=\"line\">e <span class=\"comment\">// \"o\"</span></span><br></pre></td></tr></table></figure>\n\n<p>类似数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">length</span>: len &#125; = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">len <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"数值和布尔值的解构赋值\"><a href=\"#数值和布尔值的解构赋值\" class=\"headerlink\" title=\"数值和布尔值的解构赋值\"></a>数值和布尔值的解构赋值</h5><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"number\">123</span></span><br><span class=\"line\">s === <span class=\"built_in\">Number</span>.prototype.toString <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">toString</span>: s &#125; = <span class=\"literal\">true</span></span><br><span class=\"line\">s === <span class=\"built_in\">Boolean</span>.prototype.toString <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p>\n<p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: x &#125; = <span class=\"literal\">undefined</span> <span class=\"comment\">// TypeError</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">prop</span>: y &#125; = <span class=\"literal\">null</span> <span class=\"comment\">// TypeError</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"函数参数的解构赋值\"><a href=\"#函数参数的解构赋值\" class=\"headerlink\" title=\"函数参数的解构赋值\"></a>函数参数的解构赋值</h5><p>函数的参数也可以使用解构赋值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">[x, y]</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">add([<span class=\"number\">1</span>, <span class=\"number\">2</span>]) <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p>\n<p>下面是另一个例子。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[[<span class=\"number\">1</span>, <span class=\"number\">2</span>], [<span class=\"number\">3</span>, <span class=\"number\">4</span>]].map(<span class=\"function\">(<span class=\"params\">[a, b]</span>) =&gt;</span> a + b)</span><br><span class=\"line\"><span class=\"comment\">// [ 3, 7 ]</span></span><br></pre></td></tr></table></figure>\n\n<p>函数参数的解构也可以使用默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x = <span class=\"number\">0</span>, y = <span class=\"number\">0</span> &#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, 0]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [0, 0]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p>\n<p>注意，下面的写法会得到不一样的结果。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">move</span>(<span class=\"params\">&#123; x, y &#125; = &#123; x: <span class=\"number\">0</span>, y: <span class=\"number\">0</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [x, y]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">8</span> &#125;) <span class=\"comment\">// [3, 8]</span></span><br><span class=\"line\">move(&#123; <span class=\"attr\">x</span>: <span class=\"number\">3</span> &#125;) <span class=\"comment\">// [3, undefined]</span></span><br><span class=\"line\">move(&#123;&#125;) <span class=\"comment\">// [undefined, undefined]</span></span><br><span class=\"line\">move() <span class=\"comment\">// [0, 0]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p>\n<p><code>undefined</code>就会触发函数参数的默认值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[<span class=\"number\">1</span>, <span class=\"literal\">undefined</span>, <span class=\"number\">3</span>].map(<span class=\"function\">(<span class=\"params\">x = <span class=\"string\">\"yes\"</span></span>) =&gt;</span> x)</span><br><span class=\"line\"><span class=\"comment\">// [ 1, 'yes', 3 ]</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"圆括号问题\"><a href=\"#圆括号问题\" class=\"headerlink\" title=\"圆括号问题\"></a>圆括号问题</h5><p>解构赋值虽然很方便，但是解析起来并不容易。对于编译器来说，一个式子到底是模式，还是表达式，没有办法从一开始就知道，必须解析到（或解析不到）等号才能知道。</p>\n<p>由此带来的问题是，如果模式中出现圆括号怎么处理。ES6 的规则是，只要有可能导致解构的歧义，就不得使用圆括号。</p>\n<p>但是，这条规则实际上不那么容易辨别，处理起来相当麻烦。因此，建议只要有可能，就不要在模式中放置圆括号。</p>\n<h6 id=\"不能使用圆括号的情况\"><a href=\"#不能使用圆括号的情况\" class=\"headerlink\" title=\"不能使用圆括号的情况\"></a>不能使用圆括号的情况</h6><p>以下三种解构赋值不得使用圆括号。</p>\n<p>（1）变量声明语句</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> [(a)] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;<span class=\"attr\">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> (&#123;<span class=\"attr\">x</span>: c&#125;) = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; <span class=\"attr\">o</span>: (&#123; <span class=\"attr\">p</span>: p &#125;) &#125; = &#123; <span class=\"attr\">o</span>: &#123; <span class=\"attr\">p</span>: <span class=\"number\">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>上面 6 个语句都会报错，因为它们都是变量声明语句，模式不能使用圆括号。</p>\n<p>（2）函数参数</p>\n<p>函数参数也属于变量声明，因此不能带有圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[(z</span>)]) </span>&#123; <span class=\"keyword\">return</span> z; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[z,(x</span>)]) </span>&#123; <span class=\"keyword\">return</span> x; &#125;</span><br></pre></td></tr></table></figure>\n\n<p>（3）赋值语句的模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 全部报错</span></span><br><span class=\"line\">(&#123; <span class=\"attr\">p</span>: a &#125;) = &#123; <span class=\"attr\">p</span>: <span class=\"number\">42</span> &#125;;</span><br><span class=\"line\">([a]) = [<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将整个模式放在圆括号之中，导致报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\">;[&#123; <span class=\"attr\">p</span>: a &#125;, &#123; <span class=\"attr\">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码将一部分模式放在圆括号之中，导致报错。</p>\n<h5 id=\"可以使用圆括号的情况\"><a href=\"#可以使用圆括号的情况\" class=\"headerlink\" title=\"可以使用圆括号的情况\"></a>可以使用圆括号的情况</h5><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">;[b] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;(&#123; <span class=\"attr\">p</span>: d &#125; = &#123;&#125;) <span class=\"comment\">// 正确</span></span><br><span class=\"line\">;[<span class=\"built_in\">parseInt</span>.prop] = [<span class=\"number\">3</span>] <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n\n<p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是<code>p</code>，而不是<code>d</code>；第三行语句与第一行语句的性质一致。</p>\n<h5 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h5><p>变量的解构赋值用途很多。</p>\n<p><strong>（1）交换变量的值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> y = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>\n\n<p>上面代码交换变量<code>x</code>和<code>y</code>的值，这样的写法不仅简洁，而且易读，语义非常清晰。</p>\n<p><strong>（2）从函数返回多个值</strong></p>\n<p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回一个数组</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = example()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回一个对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">example</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\tfoo: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tbar: <span class=\"number\">2</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; foo, bar &#125; = example()</span><br></pre></td></tr></table></figure>\n\n<p><strong>（3）函数参数的定义</strong></p>\n<p>解构赋值可以方便地将一组参数与变量名对应起来。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 参数是一组有次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 参数是一组无次序的值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class=\"line\">f(&#123;<span class=\"attr\">z</span>: <span class=\"number\">3</span>, <span class=\"attr\">y</span>: <span class=\"number\">2</span>, <span class=\"attr\">x</span>: <span class=\"number\">1</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>（4）提取 JSON 数据</strong></p>\n<p>解构赋值对提取 JSON 对象中的数据，尤其有用。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> jsonData = &#123;</span><br><span class=\"line\">\tid: <span class=\"number\">42</span>,</span><br><span class=\"line\">\tstatus: <span class=\"string\">\"OK\"</span>,</span><br><span class=\"line\">\tdata: [<span class=\"number\">867</span>, <span class=\"number\">5309</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; id, status, <span class=\"attr\">data</span>: number &#125; = jsonData</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(id, status, number)</span><br><span class=\"line\"><span class=\"comment\">// 42, \"OK\", [867, 5309]</span></span><br></pre></td></tr></table></figure>\n\n<p>上面代码可以快速提取 JSON 数据的值。</p>\n<p><strong>（5）函数参数的默认值</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jQuery.ajax = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\turl,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t&#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tasync = true,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tbeforeSend = function(</span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcache = <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tcomplete = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;&#125;,</span><br><span class=\"line\">\t\tcrossDomain = <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\tglobal = <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// ... more config</span></span><br><span class=\"line\">\t&#125; = &#123;&#125;</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ... do stuff</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>指定参数的默认值，就避免了在函数体内部再写<code>var foo = config.foo || &#39;default foo&#39;;</code>这样的语句。</p>\n<p><strong>（6）遍历 Map 结构</strong></p>\n<p>任何部署了 Iterator 接口的对象，都可以用<code>for...of</code>循环遍历。Map 结构原生支持 Iterator 接口，配合变量的解构赋值，获取键名和键值就非常方便。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">map.set(<span class=\"string\">\"first\"</span>, <span class=\"string\">\"hello\"</span>)</span><br><span class=\"line\">map.set(<span class=\"string\">\"second\"</span>, <span class=\"string\">\"world\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(key + <span class=\"string\">\" is \"</span> + value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// first is hello</span></span><br><span class=\"line\"><span class=\"comment\">// second is world</span></span><br></pre></td></tr></table></figure>\n\n<p>如果只想获取键名，或者只想获取键值，可以写成下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取键名</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取键值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [, value] <span class=\"keyword\">of</span> map) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>（7）输入模块的指定方法</strong></p>\n<p>加载模块时，往往需要指定输入哪些方法。解构赋值使得输入语句非常清晰。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; SourceMapConsumer, SourceNode &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">\"source-map\"</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参考文档：\"><a href=\"#参考文档：\" class=\"headerlink\" title=\"参考文档：\"></a>参考文档：</h4><ul>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcw==\">《ECMAScript 6 入门》<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>"},{"title":"使用'SSH config'文件","type":"categories","layout":"post","external_link":{"enable":true},"date":"2020-04-11T02:38:08.000Z","_content":"\n\n`ssh`的介绍及使用参看：[`SSH简介`](/SSH/SSH-简介/#more \"SSH 简介\")、[`创建SSH密钥对`](/SSH/创建SSH密钥对/#more \"创建 SSH 密钥对\")。\n\n<!-- more -->\n# 配置文件\n\n`ssh`程序可以从以下途径获取配置参数：\n\n1. 命令行选项\n2. 用户配置文件 (~/.ssh/config)\n3. 系统配置文件 (/etc/ssh/ssh_config)\n\n配置文件可分为多个配置区段，每个配置区段使用`Host`来区分。我们可以在命令行中输入不同的`host`来加载不同的配置段。\n\n对每一个配置项来说，首次获取的参数值将被采用，因此通用的设置应该放到文件的后面，特定`host`相关的配置项应放到文件的前面。\n\n# 常用配置项\n\n下面介绍一些常用的`SSH`配置项：\n\n## Host\n\n`Host`配置项标识了一个配置区段。\n\n`ssh`配置项参数值可以使用通配符：`*`代表0～n个非空白字符，`?`代表一个非空白字符，`!`表示例外通配。\n\n我们可以在系统配置文件中看到一个匹配所有`host`的默认配置区段：\n\n```\n$ cat /etc/ssh/ssh_config | grep '^Host'\nHost *\n```\n\n这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。\n\n## GlobalKnownHostsFile\n\n指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：/etc/ssh/ssh\\_known\\_hosts, /etc/ssh/ssh\\_known\\_hosts2.\n\n## HostName\n\n指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。\n\n## IdentityFile\n\n指定密钥认证使用的私钥文件路径。默认为 ~/.ssh/id\\_dsa, ~/.ssh/id\\_ecdsa, ~/.ssh/id\\_ed25519 或 ~/.ssh/id\\_rsa 中的一个。文件名称可以使用以下转义符：\n\n```\n'%d' 本地用户目录\n'%u' 本地用户名称\n'%l' 本地主机名\n'%h' 远程主机名\n'%r' 远程用户名\n```\n\n可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。\n\n## Port\n\n指定远程主机端口号，默认为 22 。\n\n## User\n\n指定登录用户名。\n\n## UserKnownHostsFile\n\n指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： ~/.ssh/known\\_hosts, ~/.ssh/known\\_hosts2.\n\n还有更多参数的介绍，可以参看用户手册：\n\n```\nman ssh config\n```\n\n# 示例\n\n- 以下连接为例：\n\n```\nSSH 服务器： ssh.test.com\n端口号： 2200\n账户： user\n密钥文件： ~/.ssh/id_rsa_test\n```\n\n## 密码认证登录方式为\n\n```\n$ ssh -p 2200 -i ~/.ssh/id_rsa_test user@ssh.test.com\nuser@ssh.test.com's password:\n```\n\n## 密钥认证登录方式\n\n```\n$ ssh-copy-id -i ~/.ssh/id_rsa_test user@ssh.test.com\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nuser@ssh.test.com's password:\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'user@ssh.test.com'\"\nand check to make sure that only the key(s) you wanted were added.\n\n$ ssh user@ssh.test.com\n```\n\n## 使用配置文件方式\n\n- 有如下配置文件：\n\n```\n$ vim ~/.ssh/config\nHost sshtest\n    HostName ssh.test.com\n    User user\n    Port 2200\n    IdentityFile ~/.ssh/id_rsa_test\n\nHost ssttest2\n    HostName ssh.test2.com\n    User user2\n    Port 2345\n    IdentityFile ~/.ssh/id_rsa_test2\n```\n\n- 使用配置文件登录：\n\n```\nssh sshtest\n```\n\n# 环境\n\n- 1\\. Ubuntu\n\n- 2\\. macOs High Sierra(10.13.2)\n\n# 参看\n\n[SSH简介](/SSH/SSH-简介/#more \"SSH 简介\")\n\n[创建 SSH 密钥对](/SSH/创建SSH密钥对/#more \"创建 SSH 密钥对\")\n","source":"_posts/使-SSH-config-文件.md","raw":"---\ntitle: 使用'SSH config'文件\ntype: categories\nlayout: post\nexternal_link:\n  enable: true\ndate: 2020-04-11 10:38:08\ntags:\n  - 全栈开发\n  - SSH\ncategories: SSH\n---\n\n\n`ssh`的介绍及使用参看：[`SSH简介`](/SSH/SSH-简介/#more \"SSH 简介\")、[`创建SSH密钥对`](/SSH/创建SSH密钥对/#more \"创建 SSH 密钥对\")。\n\n<!-- more -->\n# 配置文件\n\n`ssh`程序可以从以下途径获取配置参数：\n\n1. 命令行选项\n2. 用户配置文件 (~/.ssh/config)\n3. 系统配置文件 (/etc/ssh/ssh_config)\n\n配置文件可分为多个配置区段，每个配置区段使用`Host`来区分。我们可以在命令行中输入不同的`host`来加载不同的配置段。\n\n对每一个配置项来说，首次获取的参数值将被采用，因此通用的设置应该放到文件的后面，特定`host`相关的配置项应放到文件的前面。\n\n# 常用配置项\n\n下面介绍一些常用的`SSH`配置项：\n\n## Host\n\n`Host`配置项标识了一个配置区段。\n\n`ssh`配置项参数值可以使用通配符：`*`代表0～n个非空白字符，`?`代表一个非空白字符，`!`表示例外通配。\n\n我们可以在系统配置文件中看到一个匹配所有`host`的默认配置区段：\n\n```\n$ cat /etc/ssh/ssh_config | grep '^Host'\nHost *\n```\n\n这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。\n\n## GlobalKnownHostsFile\n\n指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：/etc/ssh/ssh\\_known\\_hosts, /etc/ssh/ssh\\_known\\_hosts2.\n\n## HostName\n\n指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。\n\n## IdentityFile\n\n指定密钥认证使用的私钥文件路径。默认为 ~/.ssh/id\\_dsa, ~/.ssh/id\\_ecdsa, ~/.ssh/id\\_ed25519 或 ~/.ssh/id\\_rsa 中的一个。文件名称可以使用以下转义符：\n\n```\n'%d' 本地用户目录\n'%u' 本地用户名称\n'%l' 本地主机名\n'%h' 远程主机名\n'%r' 远程用户名\n```\n\n可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。\n\n## Port\n\n指定远程主机端口号，默认为 22 。\n\n## User\n\n指定登录用户名。\n\n## UserKnownHostsFile\n\n指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： ~/.ssh/known\\_hosts, ~/.ssh/known\\_hosts2.\n\n还有更多参数的介绍，可以参看用户手册：\n\n```\nman ssh config\n```\n\n# 示例\n\n- 以下连接为例：\n\n```\nSSH 服务器： ssh.test.com\n端口号： 2200\n账户： user\n密钥文件： ~/.ssh/id_rsa_test\n```\n\n## 密码认证登录方式为\n\n```\n$ ssh -p 2200 -i ~/.ssh/id_rsa_test user@ssh.test.com\nuser@ssh.test.com's password:\n```\n\n## 密钥认证登录方式\n\n```\n$ ssh-copy-id -i ~/.ssh/id_rsa_test user@ssh.test.com\n/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed\n/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys\nuser@ssh.test.com's password:\n\nNumber of key(s) added: 1\n\nNow try logging into the machine, with:   \"ssh 'user@ssh.test.com'\"\nand check to make sure that only the key(s) you wanted were added.\n\n$ ssh user@ssh.test.com\n```\n\n## 使用配置文件方式\n\n- 有如下配置文件：\n\n```\n$ vim ~/.ssh/config\nHost sshtest\n    HostName ssh.test.com\n    User user\n    Port 2200\n    IdentityFile ~/.ssh/id_rsa_test\n\nHost ssttest2\n    HostName ssh.test2.com\n    User user2\n    Port 2345\n    IdentityFile ~/.ssh/id_rsa_test2\n```\n\n- 使用配置文件登录：\n\n```\nssh sshtest\n```\n\n# 环境\n\n- 1\\. Ubuntu\n\n- 2\\. macOs High Sierra(10.13.2)\n\n# 参看\n\n[SSH简介](/SSH/SSH-简介/#more \"SSH 简介\")\n\n[创建 SSH 密钥对](/SSH/创建SSH密钥对/#more \"创建 SSH 密钥对\")\n","slug":"使-SSH-config-文件","published":1,"updated":"2020-04-17T08:46:58.506Z","_id":"ck8v0gcj100009zc344yqd814","comments":1,"photos":[],"link":"","content":"<p><code>ssh</code>的介绍及使用参看：<a href=\"/SSH/SSH-简介/#more\" title=\"SSH 简介\"><code>SSH简介</code></a>、<a href=\"/SSH/创建SSH密钥对/#more\" title=\"创建 SSH 密钥对\"><code>创建SSH密钥对</code></a>。</p>\n<a id=\"more\"></a>\n<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><p><code>ssh</code>程序可以从以下途径获取配置参数：</p>\n<ol>\n<li>命令行选项</li>\n<li>用户配置文件 (~/.ssh/config)</li>\n<li>系统配置文件 (/etc/ssh/ssh_config)</li>\n</ol>\n<p>配置文件可分为多个配置区段，每个配置区段使用<code>Host</code>来区分。我们可以在命令行中输入不同的<code>host</code>来加载不同的配置段。</p>\n<p>对每一个配置项来说，首次获取的参数值将被采用，因此通用的设置应该放到文件的后面，特定<code>host</code>相关的配置项应放到文件的前面。</p>\n<h1 id=\"常用配置项\"><a href=\"#常用配置项\" class=\"headerlink\" title=\"常用配置项\"></a>常用配置项</h1><p>下面介绍一些常用的<code>SSH</code>配置项：</p>\n<h2 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h2><p><code>Host</code>配置项标识了一个配置区段。</p>\n<p><code>ssh</code>配置项参数值可以使用通配符：<code>*</code>代表0～n个非空白字符，<code>?</code>代表一个非空白字符，<code>!</code>表示例外通配。</p>\n<p>我们可以在系统配置文件中看到一个匹配所有<code>host</code>的默认配置区段：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> /etc/ssh/ssh_config | <span class=\"keyword\">grep</span> <span class=\"string\">'^Host'</span></span><br><span class=\"line\">Host *</span><br></pre></td></tr></table></figure>\n\n<p>这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。</p>\n<h2 id=\"GlobalKnownHostsFile\"><a href=\"#GlobalKnownHostsFile\" class=\"headerlink\" title=\"GlobalKnownHostsFile\"></a>GlobalKnownHostsFile</h2><p>指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：/etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2.</p>\n<h2 id=\"HostName\"><a href=\"#HostName\" class=\"headerlink\" title=\"HostName\"></a>HostName</h2><p>指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。</p>\n<h2 id=\"IdentityFile\"><a href=\"#IdentityFile\" class=\"headerlink\" title=\"IdentityFile\"></a>IdentityFile</h2><p>指定密钥认证使用的私钥文件路径。默认为 ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 或 ~/.ssh/id_rsa 中的一个。文件名称可以使用以下转义符：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">'%d' 本地用户目录</span><br><span class=\"line\">'%u' 本地用户名称</span><br><span class=\"line\">'%l' 本地主机名</span><br><span class=\"line\">'%h' 远程主机名</span><br><span class=\"line\">'%r' 远程用户名</span><br></pre></td></tr></table></figure>\n\n<p>可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。</p>\n<h2 id=\"Port\"><a href=\"#Port\" class=\"headerlink\" title=\"Port\"></a>Port</h2><p>指定远程主机端口号，默认为 22 。</p>\n<h2 id=\"User\"><a href=\"#User\" class=\"headerlink\" title=\"User\"></a>User</h2><p>指定登录用户名。</p>\n<h2 id=\"UserKnownHostsFile\"><a href=\"#UserKnownHostsFile\" class=\"headerlink\" title=\"UserKnownHostsFile\"></a>UserKnownHostsFile</h2><p>指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： ~/.ssh/known_hosts, ~/.ssh/known_hosts2.</p>\n<p>还有更多参数的介绍，可以参看用户手册：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man ssh <span class=\"built_in\">config</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><ul>\n<li>以下连接为例：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSH 服务器： ssh.test.com</span><br><span class=\"line\">端口号： 2200</span><br><span class=\"line\">账户： user</span><br><span class=\"line\">密钥文件： ~/.ssh/id_rsa_test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"密码认证登录方式为\"><a href=\"#密码认证登录方式为\" class=\"headerlink\" title=\"密码认证登录方式为\"></a>密码认证登录方式为</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -<span class=\"selector-tag\">p</span> <span class=\"number\">2200</span> -<span class=\"selector-tag\">i</span> ~/.ssh/id_rsa_test user@ssh<span class=\"selector-class\">.test</span><span class=\"selector-class\">.com</span></span><br><span class=\"line\">user@ssh<span class=\"selector-class\">.test</span><span class=\"selector-class\">.com</span><span class=\"string\">'s password:</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"密钥认证登录方式\"><a href=\"#密钥认证登录方式\" class=\"headerlink\" title=\"密钥认证登录方式\"></a>密钥认证登录方式</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-<span class=\"keyword\">copy</span>-<span class=\"built_in\">id</span> -i ~/.ssh/id_rsa_test user@ssh.test.com</span><br><span class=\"line\">/usr/bin/ssh-<span class=\"keyword\">copy</span>-<span class=\"built_in\">id</span>: INFO: attempting <span class=\"keyword\">to</span> <span class=\"built_in\">log</span> <span class=\"keyword\">in</span> <span class=\"keyword\">with</span> <span class=\"keyword\">the</span> new key(s), <span class=\"keyword\">to</span> filter out any <span class=\"keyword\">that</span> are already installed</span><br><span class=\"line\">/usr/bin/ssh-<span class=\"keyword\">copy</span>-<span class=\"built_in\">id</span>: INFO: <span class=\"number\">1</span> key(s) remain <span class=\"keyword\">to</span> be installed <span class=\"comment\">-- if you are prompted now it is to install the new keys</span></span><br><span class=\"line\">user@ssh.test.com's password:</span><br><span class=\"line\"></span><br><span class=\"line\">Number <span class=\"keyword\">of</span> key(s) added: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">Now <span class=\"keyword\">try</span> logging <span class=\"keyword\">into</span> <span class=\"keyword\">the</span> machine, <span class=\"keyword\">with</span>:   <span class=\"string\">\"ssh 'user@ssh.test.com'\"</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> check <span class=\"keyword\">to</span> make sure <span class=\"keyword\">that</span> only <span class=\"keyword\">the</span> key(s) you wanted were added.</span><br><span class=\"line\"></span><br><span class=\"line\">$ ssh user@ssh.test.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用配置文件方式\"><a href=\"#使用配置文件方式\" class=\"headerlink\" title=\"使用配置文件方式\"></a>使用配置文件方式</h2><ul>\n<li>有如下配置文件：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.ssh/config</span><br><span class=\"line\">Host sshtest</span><br><span class=\"line\">    HostName ssh.test.com</span><br><span class=\"line\">   <span class=\"built_in\"> User </span>user</span><br><span class=\"line\">   <span class=\"built_in\"> Port </span>2200</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa_test</span><br><span class=\"line\"></span><br><span class=\"line\">Host ssttest2</span><br><span class=\"line\">    HostName ssh.test2.com</span><br><span class=\"line\">   <span class=\"built_in\"> User </span>user2</span><br><span class=\"line\">   <span class=\"built_in\"> Port </span>2345</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa_test2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用配置文件登录：</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ssh sshtest</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ul>\n<li><p>1. Ubuntu</p>\n</li>\n<li><p>2. macOs High Sierra(10.13.2)</p>\n</li>\n</ul>\n<h1 id=\"参看\"><a href=\"#参看\" class=\"headerlink\" title=\"参看\"></a>参看</h1><p><a href=\"/SSH/SSH-简介/#more\" title=\"SSH 简介\">SSH简介</a></p>\n<p><a href=\"/SSH/创建SSH密钥对/#more\" title=\"创建 SSH 密钥对\">创建 SSH 密钥对</a></p>\n","site":{"data":{}},"excerpt":"<p><code>ssh</code>的介绍及使用参看：<a href=\"/SSH/SSH-简介/#more\" title=\"SSH 简介\"><code>SSH简介</code></a>、<a href=\"/SSH/创建SSH密钥对/#more\" title=\"创建 SSH 密钥对\"><code>创建SSH密钥对</code></a>。</p>","more":"<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><p><code>ssh</code>程序可以从以下途径获取配置参数：</p>\n<ol>\n<li>命令行选项</li>\n<li>用户配置文件 (~/.ssh/config)</li>\n<li>系统配置文件 (/etc/ssh/ssh_config)</li>\n</ol>\n<p>配置文件可分为多个配置区段，每个配置区段使用<code>Host</code>来区分。我们可以在命令行中输入不同的<code>host</code>来加载不同的配置段。</p>\n<p>对每一个配置项来说，首次获取的参数值将被采用，因此通用的设置应该放到文件的后面，特定<code>host</code>相关的配置项应放到文件的前面。</p>\n<h1 id=\"常用配置项\"><a href=\"#常用配置项\" class=\"headerlink\" title=\"常用配置项\"></a>常用配置项</h1><p>下面介绍一些常用的<code>SSH</code>配置项：</p>\n<h2 id=\"Host\"><a href=\"#Host\" class=\"headerlink\" title=\"Host\"></a>Host</h2><p><code>Host</code>配置项标识了一个配置区段。</p>\n<p><code>ssh</code>配置项参数值可以使用通配符：<code>*</code>代表0～n个非空白字符，<code>?</code>代表一个非空白字符，<code>!</code>表示例外通配。</p>\n<p>我们可以在系统配置文件中看到一个匹配所有<code>host</code>的默认配置区段：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> /etc/ssh/ssh_config | <span class=\"keyword\">grep</span> <span class=\"string\">'^Host'</span></span><br><span class=\"line\">Host *</span><br></pre></td></tr></table></figure>\n\n<p>这里有一些默认配置项，我们可以在用户配置文件中覆盖这些默认配置。</p>\n<h2 id=\"GlobalKnownHostsFile\"><a href=\"#GlobalKnownHostsFile\" class=\"headerlink\" title=\"GlobalKnownHostsFile\"></a>GlobalKnownHostsFile</h2><p>指定一个或多个全局认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为：/etc/ssh/ssh_known_hosts, /etc/ssh/ssh_known_hosts2.</p>\n<h2 id=\"HostName\"><a href=\"#HostName\" class=\"headerlink\" title=\"HostName\"></a>HostName</h2><p>指定远程主机名，可以直接使用数字IP地址。如果主机名中包含 ‘%h’ ，则实际使用时会被命令行中的主机名替换。</p>\n<h2 id=\"IdentityFile\"><a href=\"#IdentityFile\" class=\"headerlink\" title=\"IdentityFile\"></a>IdentityFile</h2><p>指定密钥认证使用的私钥文件路径。默认为 ~/.ssh/id_dsa, ~/.ssh/id_ecdsa, ~/.ssh/id_ed25519 或 ~/.ssh/id_rsa 中的一个。文件名称可以使用以下转义符：</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">'%d' 本地用户目录</span><br><span class=\"line\">'%u' 本地用户名称</span><br><span class=\"line\">'%l' 本地主机名</span><br><span class=\"line\">'%h' 远程主机名</span><br><span class=\"line\">'%r' 远程用户名</span><br></pre></td></tr></table></figure>\n\n<p>可以指定多个密钥文件，在连接的过程中会依次尝试这些密钥文件。</p>\n<h2 id=\"Port\"><a href=\"#Port\" class=\"headerlink\" title=\"Port\"></a>Port</h2><p>指定远程主机端口号，默认为 22 。</p>\n<h2 id=\"User\"><a href=\"#User\" class=\"headerlink\" title=\"User\"></a>User</h2><p>指定登录用户名。</p>\n<h2 id=\"UserKnownHostsFile\"><a href=\"#UserKnownHostsFile\" class=\"headerlink\" title=\"UserKnownHostsFile\"></a>UserKnownHostsFile</h2><p>指定一个或多个用户认证主机缓存文件，用来缓存通过认证的远程主机的密钥，多个文件用空格分隔。默认缓存文件为： ~/.ssh/known_hosts, ~/.ssh/known_hosts2.</p>\n<p>还有更多参数的介绍，可以参看用户手册：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">man ssh <span class=\"built_in\">config</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><ul>\n<li>以下连接为例：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SSH 服务器： ssh.test.com</span><br><span class=\"line\">端口号： 2200</span><br><span class=\"line\">账户： user</span><br><span class=\"line\">密钥文件： ~/.ssh/id_rsa_test</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"密码认证登录方式为\"><a href=\"#密码认证登录方式为\" class=\"headerlink\" title=\"密码认证登录方式为\"></a>密码认证登录方式为</h2><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -<span class=\"selector-tag\">p</span> <span class=\"number\">2200</span> -<span class=\"selector-tag\">i</span> ~/.ssh/id_rsa_test user@ssh<span class=\"selector-class\">.test</span><span class=\"selector-class\">.com</span></span><br><span class=\"line\">user@ssh<span class=\"selector-class\">.test</span><span class=\"selector-class\">.com</span><span class=\"string\">'s password:</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"密钥认证登录方式\"><a href=\"#密钥认证登录方式\" class=\"headerlink\" title=\"密钥认证登录方式\"></a>密钥认证登录方式</h2><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-<span class=\"keyword\">copy</span>-<span class=\"built_in\">id</span> -i ~/.ssh/id_rsa_test user@ssh.test.com</span><br><span class=\"line\">/usr/bin/ssh-<span class=\"keyword\">copy</span>-<span class=\"built_in\">id</span>: INFO: attempting <span class=\"keyword\">to</span> <span class=\"built_in\">log</span> <span class=\"keyword\">in</span> <span class=\"keyword\">with</span> <span class=\"keyword\">the</span> new key(s), <span class=\"keyword\">to</span> filter out any <span class=\"keyword\">that</span> are already installed</span><br><span class=\"line\">/usr/bin/ssh-<span class=\"keyword\">copy</span>-<span class=\"built_in\">id</span>: INFO: <span class=\"number\">1</span> key(s) remain <span class=\"keyword\">to</span> be installed <span class=\"comment\">-- if you are prompted now it is to install the new keys</span></span><br><span class=\"line\">user@ssh.test.com's password:</span><br><span class=\"line\"></span><br><span class=\"line\">Number <span class=\"keyword\">of</span> key(s) added: <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">Now <span class=\"keyword\">try</span> logging <span class=\"keyword\">into</span> <span class=\"keyword\">the</span> machine, <span class=\"keyword\">with</span>:   <span class=\"string\">\"ssh 'user@ssh.test.com'\"</span></span><br><span class=\"line\"><span class=\"keyword\">and</span> check <span class=\"keyword\">to</span> make sure <span class=\"keyword\">that</span> only <span class=\"keyword\">the</span> key(s) you wanted were added.</span><br><span class=\"line\"></span><br><span class=\"line\">$ ssh user@ssh.test.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用配置文件方式\"><a href=\"#使用配置文件方式\" class=\"headerlink\" title=\"使用配置文件方式\"></a>使用配置文件方式</h2><ul>\n<li>有如下配置文件：</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim ~/.ssh/config</span><br><span class=\"line\">Host sshtest</span><br><span class=\"line\">    HostName ssh.test.com</span><br><span class=\"line\">   <span class=\"built_in\"> User </span>user</span><br><span class=\"line\">   <span class=\"built_in\"> Port </span>2200</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa_test</span><br><span class=\"line\"></span><br><span class=\"line\">Host ssttest2</span><br><span class=\"line\">    HostName ssh.test2.com</span><br><span class=\"line\">   <span class=\"built_in\"> User </span>user2</span><br><span class=\"line\">   <span class=\"built_in\"> Port </span>2345</span><br><span class=\"line\">    IdentityFile ~/.ssh/id_rsa_test2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用配置文件登录：</li>\n</ul>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">ssh sshtest</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h1><ul>\n<li><p>1. Ubuntu</p>\n</li>\n<li><p>2. macOs High Sierra(10.13.2)</p>\n</li>\n</ul>\n<h1 id=\"参看\"><a href=\"#参看\" class=\"headerlink\" title=\"参看\"></a>参看</h1><p><a href=\"/SSH/SSH-简介/#more\" title=\"SSH 简介\">SSH简介</a></p>\n<p><a href=\"/SSH/创建SSH密钥对/#more\" title=\"创建 SSH 密钥对\">创建 SSH 密钥对</a></p>"},{"title":"sourceTree 使用rebase操作","type":"categories","external_link":{"enable":true},"date":"2020-06-12T10:47:03.000Z","author":"Mark","layout":"post","top":0,"_content":"\n`git merge` vs `git rebase`\n\n1. 完成功能分支之后先不 merge，而是 `git checkout 主分支` 回到主干分支去 `git pull --rebase`\n2. 如果主干有更新，`git rebase 分支` 更新主分支的内容到功能分支来预检一下，看看在加入了最近别人的改动之后我的功能是否依然 OK（在这个过程中可能会有冲突处理，解决冲突之后使用 `git add .` 更新索引，更新完之后不需要执行 commit，只要执行 `git rebase --continue` 应用余下的补丁即可）\n3. 一切就绪之后再次 `git fetch` 主干看看有没有变动（因为在第二步的进行期间没准又有人 push 了新的变化），有的话重复第二部\n4. 合并功能分支到主干然后 push，收工。\n\n- git 命令在线学习\n- 用 git 整合分支的时候，大家更常用的是变基操作 (git rebase) 还是合并操作 (git merge)，你们觉得哪个比较好？\n- 在 sourceTree 中使用 rebase （变基）\n- Git - 使用 rebase 命令保持主分支树的整洁\n- git 的 GUI 工具 Sourcetree 使用及命令行对比\n\n原始状态\n\n![alt](006tNbRwgy1fy69b0529uj30sy0pg41h.jpg)\n\n假如我们要在 master 分支上进行开发，在远端的 master 分支上右键，检出 一个自己的开发分支 dev-1\n![alt](006tNbRwgy1fy69bjs148j30t20v2ae7.jpg)\n![alt](006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg)\n\n做一些开发，提交到本地，不要推送（push）到远端\n切换到 master 分支，拉取远端的 master 更新，（这里另一个同事在 master 分支上提交了 dev 2 的更新）\n![alt](006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg)\n\n切换到自己的开发分支 dev-1\n选中 master 分支，右键，选择 将当前变更变基到 master\n![alt](006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg)\n\n如果有冲突则合并冲突，\n点击左上角的加号，选择 继续变基\n![alt](006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg)\n\n此时我们的本地更新是基于最新的 master 分支\n![alt](006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg)\n\n最后’推送’我们的开发分支 dev-1 到远端\n切换到 master 分支，点击 拉取，拉取 dev-1 的更新到 master 分支\n![alt](006tNbRwgy1fy69doxd6zj30ym0h00vp.png)\n\n再推送 master 分支，就保证了 git 分支的整洁\n![alt](006tNbRwgy1fy69dtpcenj30zk0fstbx.png)","source":"_posts/sourceTree-使用rebase操作.md","raw":"---\ntitle: sourceTree 使用rebase操作\ntype: categories\nexternal_link:\n  enable: true\ndate: 2020-06-12 18:47:03\nauthor: \"Mark\"\nlayout: post\ncategories: 前端面试 #分类\ntop: 0\ntags:\n  - 前端开发\n  - git 多人协作开发\n  - git\n---\n\n`git merge` vs `git rebase`\n\n1. 完成功能分支之后先不 merge，而是 `git checkout 主分支` 回到主干分支去 `git pull --rebase`\n2. 如果主干有更新，`git rebase 分支` 更新主分支的内容到功能分支来预检一下，看看在加入了最近别人的改动之后我的功能是否依然 OK（在这个过程中可能会有冲突处理，解决冲突之后使用 `git add .` 更新索引，更新完之后不需要执行 commit，只要执行 `git rebase --continue` 应用余下的补丁即可）\n3. 一切就绪之后再次 `git fetch` 主干看看有没有变动（因为在第二步的进行期间没准又有人 push 了新的变化），有的话重复第二部\n4. 合并功能分支到主干然后 push，收工。\n\n- git 命令在线学习\n- 用 git 整合分支的时候，大家更常用的是变基操作 (git rebase) 还是合并操作 (git merge)，你们觉得哪个比较好？\n- 在 sourceTree 中使用 rebase （变基）\n- Git - 使用 rebase 命令保持主分支树的整洁\n- git 的 GUI 工具 Sourcetree 使用及命令行对比\n\n原始状态\n\n![alt](006tNbRwgy1fy69b0529uj30sy0pg41h.jpg)\n\n假如我们要在 master 分支上进行开发，在远端的 master 分支上右键，检出 一个自己的开发分支 dev-1\n![alt](006tNbRwgy1fy69bjs148j30t20v2ae7.jpg)\n![alt](006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg)\n\n做一些开发，提交到本地，不要推送（push）到远端\n切换到 master 分支，拉取远端的 master 更新，（这里另一个同事在 master 分支上提交了 dev 2 的更新）\n![alt](006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg)\n\n切换到自己的开发分支 dev-1\n选中 master 分支，右键，选择 将当前变更变基到 master\n![alt](006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg)\n\n如果有冲突则合并冲突，\n点击左上角的加号，选择 继续变基\n![alt](006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg)\n\n此时我们的本地更新是基于最新的 master 分支\n![alt](006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg)\n\n最后’推送’我们的开发分支 dev-1 到远端\n切换到 master 分支，点击 拉取，拉取 dev-1 的更新到 master 分支\n![alt](006tNbRwgy1fy69doxd6zj30ym0h00vp.png)\n\n再推送 master 分支，就保证了 git 分支的整洁\n![alt](006tNbRwgy1fy69dtpcenj30zk0fstbx.png)","slug":"sourceTree-使用rebase操作","published":1,"updated":"2020-06-12T11:02:09.472Z","_id":"ckbc2dr3h0000cjc31hp02iep","comments":1,"photos":[],"link":"","content":"<p><code>git merge</code> vs <code>git rebase</code></p>\n<ol>\n<li>完成功能分支之后先不 merge，而是 <code>git checkout 主分支</code> 回到主干分支去 <code>git pull --rebase</code></li>\n<li>如果主干有更新，<code>git rebase 分支</code> 更新主分支的内容到功能分支来预检一下，看看在加入了最近别人的改动之后我的功能是否依然 OK（在这个过程中可能会有冲突处理，解决冲突之后使用 <code>git add .</code> 更新索引，更新完之后不需要执行 commit，只要执行 <code>git rebase --continue</code> 应用余下的补丁即可）</li>\n<li>一切就绪之后再次 <code>git fetch</code> 主干看看有没有变动（因为在第二步的进行期间没准又有人 push 了新的变化），有的话重复第二部</li>\n<li>合并功能分支到主干然后 push，收工。</li>\n</ol>\n<ul>\n<li>git 命令在线学习</li>\n<li>用 git 整合分支的时候，大家更常用的是变基操作 (git rebase) 还是合并操作 (git merge)，你们觉得哪个比较好？</li>\n<li>在 sourceTree 中使用 rebase （变基）</li>\n<li>Git - 使用 rebase 命令保持主分支树的整洁</li>\n<li>git 的 GUI 工具 Sourcetree 使用及命令行对比</li>\n</ul>\n<p>原始状态</p>\n<p><img data-src=\"006tNbRwgy1fy69b0529uj30sy0pg41h.jpg\" alt=\"alt\"></p>\n<p>假如我们要在 master 分支上进行开发，在远端的 master 分支上右键，检出 一个自己的开发分支 dev-1<br><img data-src=\"006tNbRwgy1fy69bjs148j30t20v2ae7.jpg\" alt=\"alt\"><br><img data-src=\"006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg\" alt=\"alt\"></p>\n<p>做一些开发，提交到本地，不要推送（push）到远端<br>切换到 master 分支，拉取远端的 master 更新，（这里另一个同事在 master 分支上提交了 dev 2 的更新）<br><img data-src=\"006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg\" alt=\"alt\"></p>\n<p>切换到自己的开发分支 dev-1<br>选中 master 分支，右键，选择 将当前变更变基到 master<br><img data-src=\"006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg\" alt=\"alt\"></p>\n<p>如果有冲突则合并冲突，<br>点击左上角的加号，选择 继续变基<br><img data-src=\"006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg\" alt=\"alt\"></p>\n<p>此时我们的本地更新是基于最新的 master 分支<br><img data-src=\"006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg\" alt=\"alt\"></p>\n<p>最后’推送’我们的开发分支 dev-1 到远端<br>切换到 master 分支，点击 拉取，拉取 dev-1 的更新到 master 分支<br><img data-src=\"006tNbRwgy1fy69doxd6zj30ym0h00vp.png\" alt=\"alt\"></p>\n<p>再推送 master 分支，就保证了 git 分支的整洁<br><img data-src=\"006tNbRwgy1fy69dtpcenj30zk0fstbx.png\" alt=\"alt\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>git merge</code> vs <code>git rebase</code></p>\n<ol>\n<li>完成功能分支之后先不 merge，而是 <code>git checkout 主分支</code> 回到主干分支去 <code>git pull --rebase</code></li>\n<li>如果主干有更新，<code>git rebase 分支</code> 更新主分支的内容到功能分支来预检一下，看看在加入了最近别人的改动之后我的功能是否依然 OK（在这个过程中可能会有冲突处理，解决冲突之后使用 <code>git add .</code> 更新索引，更新完之后不需要执行 commit，只要执行 <code>git rebase --continue</code> 应用余下的补丁即可）</li>\n<li>一切就绪之后再次 <code>git fetch</code> 主干看看有没有变动（因为在第二步的进行期间没准又有人 push 了新的变化），有的话重复第二部</li>\n<li>合并功能分支到主干然后 push，收工。</li>\n</ol>\n<ul>\n<li>git 命令在线学习</li>\n<li>用 git 整合分支的时候，大家更常用的是变基操作 (git rebase) 还是合并操作 (git merge)，你们觉得哪个比较好？</li>\n<li>在 sourceTree 中使用 rebase （变基）</li>\n<li>Git - 使用 rebase 命令保持主分支树的整洁</li>\n<li>git 的 GUI 工具 Sourcetree 使用及命令行对比</li>\n</ul>\n<p>原始状态</p>\n<p><img data-src=\"006tNbRwgy1fy69b0529uj30sy0pg41h.jpg\" alt=\"alt\"></p>\n<p>假如我们要在 master 分支上进行开发，在远端的 master 分支上右键，检出 一个自己的开发分支 dev-1<br><img data-src=\"006tNbRwgy1fy69bjs148j30t20v2ae7.jpg\" alt=\"alt\"><br><img data-src=\"006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg\" alt=\"alt\"></p>\n<p>做一些开发，提交到本地，不要推送（push）到远端<br>切换到 master 分支，拉取远端的 master 更新，（这里另一个同事在 master 分支上提交了 dev 2 的更新）<br><img data-src=\"006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg\" alt=\"alt\"></p>\n<p>切换到自己的开发分支 dev-1<br>选中 master 分支，右键，选择 将当前变更变基到 master<br><img data-src=\"006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg\" alt=\"alt\"></p>\n<p>如果有冲突则合并冲突，<br>点击左上角的加号，选择 继续变基<br><img data-src=\"006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg\" alt=\"alt\"></p>\n<p>此时我们的本地更新是基于最新的 master 分支<br><img data-src=\"006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg\" alt=\"alt\"></p>\n<p>最后’推送’我们的开发分支 dev-1 到远端<br>切换到 master 分支，点击 拉取，拉取 dev-1 的更新到 master 分支<br><img data-src=\"006tNbRwgy1fy69doxd6zj30ym0h00vp.png\" alt=\"alt\"></p>\n<p>再推送 master 分支，就保证了 git 分支的整洁<br><img data-src=\"006tNbRwgy1fy69dtpcenj30zk0fstbx.png\" alt=\"alt\"></p>\n"},{"title":"创建SSH密钥对","type":"categories","layout":"post","external_link":{"enable":true},"date":"2020-04-11T02:54:43.000Z","_content":"\n\nSSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(passphrase)的使用，使得 SSH 的安全性更高一层。\n\nSSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。\n\nSSH 密钥的其使用原理很简单：用户将公钥添加到远程主机中，登录的时候，远程主机会向用户发送一段随即字符串，用户使用自己的私钥加密后，再发送到远程主机。远程主机使用本地存储的公钥进行解密，如果成功，证明用户时可信的，直接允许登录 shell ，不再要求密码。这样就保证了整个登录过程的安全，防止了中间人攻击。\n<!-- more -->\n# 生成密钥对\n\n## ssh-keygen 命令\n\n我们可以使用 _ssh-keygen_ 命令来生成密钥对：\n\n```\n$ ssh-keygen -t ecdsa -b 521 -C \"$(whoami)@$(hostname)-$(date -I)\"\nGenerating public/private ecdsa key pair.\nEnter file in which to save the key (/home/username/.ssh/id_ecdsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/username/.ssh/id_ecdsa.\nYour public key has been saved in /home/username/.ssh/id_ecdsa.pub.\nThe key fingerprint is:\ndd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2015-03-08\nThe key's randomart image is:\n+--[ECDSA  521]---+\n|     ..oB=.   .  |\n|    .    . . . . |\n|  .  .      . +  |\n| oo.o    . . =   |\n|o+.+.   S . . .  |\n|=.   . E         |\n| o    .          |\n|  .              |\n|                 |\n+-----------------+\n\n```\n\n其中可使用 _-t_ 指定加密算法，使用 _-b_ 自定生成密钥长度，使用 _-C_ 添加密钥对的说明comment。生成的密钥对默认存储在用户目录下的 _.ssh_ 目录中，私钥默认名称为 _id_***_ (即 id_ + 加密算法名称)。还可以使用 _-f_ 指定生成的私钥存储的文件全路径名称；也可以不使用 _-f_ 指定密钥文件路径，在密钥的创建过程中还会提示用户输入密钥文件全路径名称。私钥对应的公钥文件为_私钥文件全名称 \\+ .pub_。\n\n上面例子中创建了一对长度为512位的椭圆加密算法(ECDSA)加密的密钥对。创建 SSH 密钥对可选择多种加密算法，例如 _RSA_ 、 _DSA_ 、 _ECDSA_ 等。\n\n## 密码短语(Passphras)\n\n密码短语(passphras)是一连串的单词或文本组成，用来控制对电脑系统的访问。它的用法类似于密码(Password)，但是通常会比密码长度更长，这样就增加了破解的复杂度。密码短语不同于密码，它可以是有实际意义的一段话，便于用户记忆。\n\n密码短语默认可以不创建，但是这会导致不安全性。私钥是未经加密存储在电脑上的，电脑遗失或被窃取后，任何人拿到你的私钥后都可以随意访问 SSH 服务器；另外，电脑的 _root_ 用户有权限访问电脑上的任意文件，这也包括你的私钥文件。因此，为了提高安全性还是建议用户设置自己的密码短语。\n\n已经生成的密钥对也可以修改密码短语。假设使用的是 RSA 加密的密钥对，存储到默认路径，输入以下命令即可：\n\n```\n# ssh-keygen -f ~/.ssh/id_rsa -p\n\n```\n\n# SSH agent\n\nSSH agent 是 OpenSSH 或其它 SSH 程序提供的一个程序，提供了存储私钥的安全方法。如果用户的私钥使用了密码短语来加密的话，那么每一次使用 SSH密钥进行登录时，都需要用户输入正确的的密钥短语。而 SSH agent 程序能够将已经解密的私钥缓存起来，在需要的时候提供给 SSH 客户端，这样用户只需要在将私钥加入 SSH agent 缓存的时候输入一次密码短语就可以了。\n\n首先确保当前 SSH agent 可用：\n\n```\n# start the ssh-agent in the background\n$ eval \"$(ssh-agent -s)\"\nAgent pid 29393\n\n```\n\nssh-add\n-------\n\n添加 SSH 密钥到 SSH agent：\n\n```\n$ ssh-add ~/.ssh/id_rsa\nEnter passphrase for /home/username/.ssh/id_rsa:\nIdentity added: /home/username/.ssh/id_rsa (/home/username/.ssh/id_rsa)\n\n```\n\n## 查看 SSH agent 缓存密钥列表\n\n```\n$ ssh-add -l\n2048 b9:a7:f0:44:a5:47:79:a5:ff:9d:14:5c:d3:78:04:65 /home/username/.ssh/id_rsa (RSA)\n\n```\n\n## 测试连接\n\n将 SSH 公钥添加到 SSH 服务端后，就可以使用 SSH 来连接远程主机了。下面以 GitHub为例测试连接：\n\n```\n$ ssh -T git@github.com\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n\n```\n\n这说明连接成功了。\n\n# 参考\n\n[Generating SSH keys](https://help.github.com/articles/generating-ssh-keys/ \"generating ssh keys\")\n\n[Passphrase(维基百科)](http://en.wikipedia.org/wiki/Passphrase%20Passphrase)\n\n[SSH Keys(简体中文)](https://daemon369.github.io/ssh/2015/03/08/%22https://wiki.archlinux.org/index.php/SSH_Keys_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)%22 \"SSH Keys(简体中文)\")\n\n[ssh-agent](http://en.wikipedia.org/wiki/Ssh-agent%20ssh-agent)\n\n[Git多帐号配置](http://yeungeek.com/2014/06/26/Git%E5%A4%9A%E5%B8%90%E5%8F%B7%E9%85%8D%E7%BD%AE/%20Git%E5%A4%9A%E5%B8%90%E5%8F%B7%E9%85%8D%E7%BD%AE)\n","source":"_posts/创建SSH密钥对.md","raw":"---\ntitle: 创建SSH密钥对\ntype: categories\nlayout: post\nexternal_link:\n  enable: true\ndate: 2020-04-11 10:54:43\ntags:\n  - 全栈开发\n  - SSH\ncategories: SSH\n---\n\n\nSSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(passphrase)的使用，使得 SSH 的安全性更高一层。\n\nSSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。\n\nSSH 密钥的其使用原理很简单：用户将公钥添加到远程主机中，登录的时候，远程主机会向用户发送一段随即字符串，用户使用自己的私钥加密后，再发送到远程主机。远程主机使用本地存储的公钥进行解密，如果成功，证明用户时可信的，直接允许登录 shell ，不再要求密码。这样就保证了整个登录过程的安全，防止了中间人攻击。\n<!-- more -->\n# 生成密钥对\n\n## ssh-keygen 命令\n\n我们可以使用 _ssh-keygen_ 命令来生成密钥对：\n\n```\n$ ssh-keygen -t ecdsa -b 521 -C \"$(whoami)@$(hostname)-$(date -I)\"\nGenerating public/private ecdsa key pair.\nEnter file in which to save the key (/home/username/.ssh/id_ecdsa):\nEnter passphrase (empty for no passphrase):\nEnter same passphrase again:\nYour identification has been saved in /home/username/.ssh/id_ecdsa.\nYour public key has been saved in /home/username/.ssh/id_ecdsa.pub.\nThe key fingerprint is:\ndd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username@localhost-2015-03-08\nThe key's randomart image is:\n+--[ECDSA  521]---+\n|     ..oB=.   .  |\n|    .    . . . . |\n|  .  .      . +  |\n| oo.o    . . =   |\n|o+.+.   S . . .  |\n|=.   . E         |\n| o    .          |\n|  .              |\n|                 |\n+-----------------+\n\n```\n\n其中可使用 _-t_ 指定加密算法，使用 _-b_ 自定生成密钥长度，使用 _-C_ 添加密钥对的说明comment。生成的密钥对默认存储在用户目录下的 _.ssh_ 目录中，私钥默认名称为 _id_***_ (即 id_ + 加密算法名称)。还可以使用 _-f_ 指定生成的私钥存储的文件全路径名称；也可以不使用 _-f_ 指定密钥文件路径，在密钥的创建过程中还会提示用户输入密钥文件全路径名称。私钥对应的公钥文件为_私钥文件全名称 \\+ .pub_。\n\n上面例子中创建了一对长度为512位的椭圆加密算法(ECDSA)加密的密钥对。创建 SSH 密钥对可选择多种加密算法，例如 _RSA_ 、 _DSA_ 、 _ECDSA_ 等。\n\n## 密码短语(Passphras)\n\n密码短语(passphras)是一连串的单词或文本组成，用来控制对电脑系统的访问。它的用法类似于密码(Password)，但是通常会比密码长度更长，这样就增加了破解的复杂度。密码短语不同于密码，它可以是有实际意义的一段话，便于用户记忆。\n\n密码短语默认可以不创建，但是这会导致不安全性。私钥是未经加密存储在电脑上的，电脑遗失或被窃取后，任何人拿到你的私钥后都可以随意访问 SSH 服务器；另外，电脑的 _root_ 用户有权限访问电脑上的任意文件，这也包括你的私钥文件。因此，为了提高安全性还是建议用户设置自己的密码短语。\n\n已经生成的密钥对也可以修改密码短语。假设使用的是 RSA 加密的密钥对，存储到默认路径，输入以下命令即可：\n\n```\n# ssh-keygen -f ~/.ssh/id_rsa -p\n\n```\n\n# SSH agent\n\nSSH agent 是 OpenSSH 或其它 SSH 程序提供的一个程序，提供了存储私钥的安全方法。如果用户的私钥使用了密码短语来加密的话，那么每一次使用 SSH密钥进行登录时，都需要用户输入正确的的密钥短语。而 SSH agent 程序能够将已经解密的私钥缓存起来，在需要的时候提供给 SSH 客户端，这样用户只需要在将私钥加入 SSH agent 缓存的时候输入一次密码短语就可以了。\n\n首先确保当前 SSH agent 可用：\n\n```\n# start the ssh-agent in the background\n$ eval \"$(ssh-agent -s)\"\nAgent pid 29393\n\n```\n\nssh-add\n-------\n\n添加 SSH 密钥到 SSH agent：\n\n```\n$ ssh-add ~/.ssh/id_rsa\nEnter passphrase for /home/username/.ssh/id_rsa:\nIdentity added: /home/username/.ssh/id_rsa (/home/username/.ssh/id_rsa)\n\n```\n\n## 查看 SSH agent 缓存密钥列表\n\n```\n$ ssh-add -l\n2048 b9:a7:f0:44:a5:47:79:a5:ff:9d:14:5c:d3:78:04:65 /home/username/.ssh/id_rsa (RSA)\n\n```\n\n## 测试连接\n\n将 SSH 公钥添加到 SSH 服务端后，就可以使用 SSH 来连接远程主机了。下面以 GitHub为例测试连接：\n\n```\n$ ssh -T git@github.com\nHi username! You've successfully authenticated, but GitHub does not provide shell access.\n\n```\n\n这说明连接成功了。\n\n# 参考\n\n[Generating SSH keys](https://help.github.com/articles/generating-ssh-keys/ \"generating ssh keys\")\n\n[Passphrase(维基百科)](http://en.wikipedia.org/wiki/Passphrase%20Passphrase)\n\n[SSH Keys(简体中文)](https://daemon369.github.io/ssh/2015/03/08/%22https://wiki.archlinux.org/index.php/SSH_Keys_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)%22 \"SSH Keys(简体中文)\")\n\n[ssh-agent](http://en.wikipedia.org/wiki/Ssh-agent%20ssh-agent)\n\n[Git多帐号配置](http://yeungeek.com/2014/06/26/Git%E5%A4%9A%E5%B8%90%E5%8F%B7%E9%85%8D%E7%BD%AE/%20Git%E5%A4%9A%E5%B8%90%E5%8F%B7%E9%85%8D%E7%BD%AE)\n","slug":"创建SSH密钥对","published":1,"updated":"2020-04-17T08:47:12.009Z","comments":1,"photos":[],"link":"","_id":"ckbc2dr3n0001cjc30r761m18","content":"<p>SSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(passphrase)的使用，使得 SSH 的安全性更高一层。</p>\n<p>SSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。</p>\n<p>SSH 密钥的其使用原理很简单：用户将公钥添加到远程主机中，登录的时候，远程主机会向用户发送一段随即字符串，用户使用自己的私钥加密后，再发送到远程主机。远程主机使用本地存储的公钥进行解密，如果成功，证明用户时可信的，直接允许登录 shell ，不再要求密码。这样就保证了整个登录过程的安全，防止了中间人攻击。</p>\n<a id=\"more\"></a>\n<h1 id=\"生成密钥对\"><a href=\"#生成密钥对\" class=\"headerlink\" title=\"生成密钥对\"></a>生成密钥对</h1><h2 id=\"ssh-keygen-命令\"><a href=\"#ssh-keygen-命令\" class=\"headerlink\" title=\"ssh-keygen 命令\"></a>ssh-keygen 命令</h2><p>我们可以使用 <em>ssh-keygen</em> 命令来生成密钥对：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t ecdsa -b 521 -C <span class=\"string\">\"$(whoami)@$(hostname)-$(date -I)\"</span></span><br><span class=\"line\">Generating public/private ecdsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/home/username/.ssh/id_ecdsa):</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved in /home/username/.ssh/id_ecdsa.</span><br><span class=\"line\">Your public key has been saved in /home/username/.ssh/id_ecdsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username<span class=\"meta\">@localhost-2015-03-08</span></span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+--[ECDSA  521]---+</span><br><span class=\"line\">|<span class=\"string\">     ..oB=.   .  </span>|</span><br><span class=\"line\">|<span class=\"string\">    .    . . . . </span>|</span><br><span class=\"line\">|<span class=\"string\">  .  .      . +  </span>|</span><br><span class=\"line\">|<span class=\"string\"> oo.o    . . =   </span>|</span><br><span class=\"line\">|<span class=\"string\">o+.+.   S . . .  </span>|</span><br><span class=\"line\">|<span class=\"string\">=.   . E         </span>|</span><br><span class=\"line\">|<span class=\"string\"> o    .          </span>|</span><br><span class=\"line\">|<span class=\"string\">  .              </span>|</span><br><span class=\"line\">|<span class=\"string\">                 </span>|</span><br><span class=\"line\">+-----------------+</span><br></pre></td></tr></table></figure>\n\n<p>其中可使用 <em>-t</em> 指定加密算法，使用 <em>-b</em> 自定生成密钥长度，使用 <em>-C</em> 添加密钥对的说明comment。生成的密钥对默认存储在用户目录下的 <em>.ssh</em> 目录中，私钥默认名称为 <em>id</em>***_ (即 id_ + 加密算法名称)。还可以使用 <em>-f</em> 指定生成的私钥存储的文件全路径名称；也可以不使用 <em>-f</em> 指定密钥文件路径，在密钥的创建过程中还会提示用户输入密钥文件全路径名称。私钥对应的公钥文件为_私钥文件全名称 + .pub_。</p>\n<p>上面例子中创建了一对长度为512位的椭圆加密算法(ECDSA)加密的密钥对。创建 SSH 密钥对可选择多种加密算法，例如 <em>RSA</em> 、 <em>DSA</em> 、 <em>ECDSA</em> 等。</p>\n<h2 id=\"密码短语-Passphras\"><a href=\"#密码短语-Passphras\" class=\"headerlink\" title=\"密码短语(Passphras)\"></a>密码短语(Passphras)</h2><p>密码短语(passphras)是一连串的单词或文本组成，用来控制对电脑系统的访问。它的用法类似于密码(Password)，但是通常会比密码长度更长，这样就增加了破解的复杂度。密码短语不同于密码，它可以是有实际意义的一段话，便于用户记忆。</p>\n<p>密码短语默认可以不创建，但是这会导致不安全性。私钥是未经加密存储在电脑上的，电脑遗失或被窃取后，任何人拿到你的私钥后都可以随意访问 SSH 服务器；另外，电脑的 <em>root</em> 用户有权限访问电脑上的任意文件，这也包括你的私钥文件。因此，为了提高安全性还是建议用户设置自己的密码短语。</p>\n<p>已经生成的密钥对也可以修改密码短语。假设使用的是 RSA 加密的密钥对，存储到默认路径，输入以下命令即可：</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># ssh-keygen -f ~/.ssh/id_rsa -p</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SSH-agent\"><a href=\"#SSH-agent\" class=\"headerlink\" title=\"SSH agent\"></a>SSH agent</h1><p>SSH agent 是 OpenSSH 或其它 SSH 程序提供的一个程序，提供了存储私钥的安全方法。如果用户的私钥使用了密码短语来加密的话，那么每一次使用 SSH密钥进行登录时，都需要用户输入正确的的密钥短语。而 SSH agent 程序能够将已经解密的私钥缓存起来，在需要的时候提供给 SSH 客户端，这样用户只需要在将私钥加入 SSH agent 缓存的时候输入一次密码短语就可以了。</p>\n<p>首先确保当前 SSH agent 可用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start the ssh-agent in the background</span></span><br><span class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">Agent pid 29393</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh-add\"><a href=\"#ssh-add\" class=\"headerlink\" title=\"ssh-add\"></a>ssh-add</h2><p>添加 SSH 密钥到 SSH agent：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-<span class=\"builtin-name\">add</span> ~/.ssh/id_rsa</span><br><span class=\"line\">Enter passphrase <span class=\"keyword\">for</span> /home/username/.ssh/id_rsa:</span><br><span class=\"line\">Identity added: /home/username/.ssh/id_rsa (/home/username/.ssh/id_rsa)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看-SSH-agent-缓存密钥列表\"><a href=\"#查看-SSH-agent-缓存密钥列表\" class=\"headerlink\" title=\"查看 SSH agent 缓存密钥列表\"></a>查看 SSH agent 缓存密钥列表</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add -l</span><br><span class=\"line\"><span class=\"number\">2048</span> <span class=\"string\">b9:</span><span class=\"string\">a7:</span><span class=\"string\">f0:</span><span class=\"number\">44</span>:<span class=\"string\">a5:</span><span class=\"number\">47</span>:<span class=\"number\">79</span>:<span class=\"string\">a5:</span><span class=\"string\">ff:</span><span class=\"number\">9</span><span class=\"string\">d:</span><span class=\"number\">14</span>:<span class=\"number\">5</span><span class=\"string\">c:</span><span class=\"string\">d3:</span><span class=\"number\">78</span>:<span class=\"number\">04</span>:<span class=\"number\">65</span> <span class=\"regexp\">/home/</span>username<span class=\"regexp\">/.ssh/</span>id_rsa (RSA)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h2><p>将 SSH 公钥添加到 SSH 服务端后，就可以使用 SSH 来连接远程主机了。下面以 GitHub为例测试连接：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi username! You<span class=\"symbol\">'ve</span> successfully authenticated, but GitHub does <span class=\"keyword\">not</span> provide shell <span class=\"keyword\">access</span>.</span><br></pre></td></tr></table></figure>\n\n<p>这说明连接成功了。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvZ2VuZXJhdGluZy1zc2gta2V5cy8=\">Generating SSH keys<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXNzcGhyYXNlJTIwUGFzc3BocmFzZQ==\">Passphrase(维基百科)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWVtb24zNjkuZ2l0aHViLmlvL3NzaC8yMDE1LzAzLzA4LyUyMmh0dHBzOi8vd2lraS5hcmNobGludXgub3JnL2luZGV4LnBocC9TU0hfS2V5c18oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KSUyMg==\">SSH Keys(简体中文)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Tc2gtYWdlbnQlMjBzc2gtYWdlbnQ=\">ssh-agent<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3lldW5nZWVrLmNvbS8yMDE0LzA2LzI2L0dpdCVFNSVBNCU5QSVFNSVCOCU5MCVFNSU4RiVCNyVFOSU4NSU4RCVFNyVCRCVBRS8lMjBHaXQlRTUlQTQlOUElRTUlQjglOTAlRTUlOEYlQjclRTklODUlOEQlRTclQkQlQUU=\">Git多帐号配置<i class=\"fa fa-external-link-alt\"></i></span></p>\n","site":{"data":{}},"excerpt":"<p>SSH 密钥对可以让用户无需输入密码即可登录到 SSH 服务器中。由于登录的过程不需要密码，因此可以防止由于密码被拦截、破解造成的账户密码泄露。再加上密码短语(passphrase)的使用，使得 SSH 的安全性更高一层。</p>\n<p>SSH 密钥对总是一把公钥、一把私钥的成对出现；公钥可以自由的添加到远程 SSH 服务器中用来验证用户是否合法；私钥相当于自己的身份认证，需要妥善保存不能泄露。</p>\n<p>SSH 密钥的其使用原理很简单：用户将公钥添加到远程主机中，登录的时候，远程主机会向用户发送一段随即字符串，用户使用自己的私钥加密后，再发送到远程主机。远程主机使用本地存储的公钥进行解密，如果成功，证明用户时可信的，直接允许登录 shell ，不再要求密码。这样就保证了整个登录过程的安全，防止了中间人攻击。</p>","more":"<h1 id=\"生成密钥对\"><a href=\"#生成密钥对\" class=\"headerlink\" title=\"生成密钥对\"></a>生成密钥对</h1><h2 id=\"ssh-keygen-命令\"><a href=\"#ssh-keygen-命令\" class=\"headerlink\" title=\"ssh-keygen 命令\"></a>ssh-keygen 命令</h2><p>我们可以使用 <em>ssh-keygen</em> 命令来生成密钥对：</p>\n<figure class=\"highlight gherkin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t ecdsa -b 521 -C <span class=\"string\">\"$(whoami)@$(hostname)-$(date -I)\"</span></span><br><span class=\"line\">Generating public/private ecdsa key pair.</span><br><span class=\"line\">Enter file in which to save the key (/home/username/.ssh/id_ecdsa):</span><br><span class=\"line\">Enter passphrase (empty for no passphrase):</span><br><span class=\"line\">Enter same passphrase again:</span><br><span class=\"line\">Your identification has been saved in /home/username/.ssh/id_ecdsa.</span><br><span class=\"line\">Your public key has been saved in /home/username/.ssh/id_ecdsa.pub.</span><br><span class=\"line\">The key fingerprint is:</span><br><span class=\"line\">dd:15:ee:24:20:14:11:01:b8:72:a2:0f:99:4c:79:7f username<span class=\"meta\">@localhost-2015-03-08</span></span><br><span class=\"line\">The key's randomart image is:</span><br><span class=\"line\">+--[ECDSA  521]---+</span><br><span class=\"line\">|<span class=\"string\">     ..oB=.   .  </span>|</span><br><span class=\"line\">|<span class=\"string\">    .    . . . . </span>|</span><br><span class=\"line\">|<span class=\"string\">  .  .      . +  </span>|</span><br><span class=\"line\">|<span class=\"string\"> oo.o    . . =   </span>|</span><br><span class=\"line\">|<span class=\"string\">o+.+.   S . . .  </span>|</span><br><span class=\"line\">|<span class=\"string\">=.   . E         </span>|</span><br><span class=\"line\">|<span class=\"string\"> o    .          </span>|</span><br><span class=\"line\">|<span class=\"string\">  .              </span>|</span><br><span class=\"line\">|<span class=\"string\">                 </span>|</span><br><span class=\"line\">+-----------------+</span><br></pre></td></tr></table></figure>\n\n<p>其中可使用 <em>-t</em> 指定加密算法，使用 <em>-b</em> 自定生成密钥长度，使用 <em>-C</em> 添加密钥对的说明comment。生成的密钥对默认存储在用户目录下的 <em>.ssh</em> 目录中，私钥默认名称为 <em>id</em>***_ (即 id_ + 加密算法名称)。还可以使用 <em>-f</em> 指定生成的私钥存储的文件全路径名称；也可以不使用 <em>-f</em> 指定密钥文件路径，在密钥的创建过程中还会提示用户输入密钥文件全路径名称。私钥对应的公钥文件为_私钥文件全名称 + .pub_。</p>\n<p>上面例子中创建了一对长度为512位的椭圆加密算法(ECDSA)加密的密钥对。创建 SSH 密钥对可选择多种加密算法，例如 <em>RSA</em> 、 <em>DSA</em> 、 <em>ECDSA</em> 等。</p>\n<h2 id=\"密码短语-Passphras\"><a href=\"#密码短语-Passphras\" class=\"headerlink\" title=\"密码短语(Passphras)\"></a>密码短语(Passphras)</h2><p>密码短语(passphras)是一连串的单词或文本组成，用来控制对电脑系统的访问。它的用法类似于密码(Password)，但是通常会比密码长度更长，这样就增加了破解的复杂度。密码短语不同于密码，它可以是有实际意义的一段话，便于用户记忆。</p>\n<p>密码短语默认可以不创建，但是这会导致不安全性。私钥是未经加密存储在电脑上的，电脑遗失或被窃取后，任何人拿到你的私钥后都可以随意访问 SSH 服务器；另外，电脑的 <em>root</em> 用户有权限访问电脑上的任意文件，这也包括你的私钥文件。因此，为了提高安全性还是建议用户设置自己的密码短语。</p>\n<p>已经生成的密钥对也可以修改密码短语。假设使用的是 RSA 加密的密钥对，存储到默认路径，输入以下命令即可：</p>\n<figure class=\"highlight vala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># ssh-keygen -f ~/.ssh/id_rsa -p</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SSH-agent\"><a href=\"#SSH-agent\" class=\"headerlink\" title=\"SSH agent\"></a>SSH agent</h1><p>SSH agent 是 OpenSSH 或其它 SSH 程序提供的一个程序，提供了存储私钥的安全方法。如果用户的私钥使用了密码短语来加密的话，那么每一次使用 SSH密钥进行登录时，都需要用户输入正确的的密钥短语。而 SSH agent 程序能够将已经解密的私钥缓存起来，在需要的时候提供给 SSH 客户端，这样用户只需要在将私钥加入 SSH agent 缓存的时候输入一次密码短语就可以了。</p>\n<p>首先确保当前 SSH agent 可用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># start the ssh-agent in the background</span></span><br><span class=\"line\">$ <span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></span><br><span class=\"line\">Agent pid 29393</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ssh-add\"><a href=\"#ssh-add\" class=\"headerlink\" title=\"ssh-add\"></a>ssh-add</h2><p>添加 SSH 密钥到 SSH agent：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-<span class=\"builtin-name\">add</span> ~/.ssh/id_rsa</span><br><span class=\"line\">Enter passphrase <span class=\"keyword\">for</span> /home/username/.ssh/id_rsa:</span><br><span class=\"line\">Identity added: /home/username/.ssh/id_rsa (/home/username/.ssh/id_rsa)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看-SSH-agent-缓存密钥列表\"><a href=\"#查看-SSH-agent-缓存密钥列表\" class=\"headerlink\" title=\"查看 SSH agent 缓存密钥列表\"></a>查看 SSH agent 缓存密钥列表</h2><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-add -l</span><br><span class=\"line\"><span class=\"number\">2048</span> <span class=\"string\">b9:</span><span class=\"string\">a7:</span><span class=\"string\">f0:</span><span class=\"number\">44</span>:<span class=\"string\">a5:</span><span class=\"number\">47</span>:<span class=\"number\">79</span>:<span class=\"string\">a5:</span><span class=\"string\">ff:</span><span class=\"number\">9</span><span class=\"string\">d:</span><span class=\"number\">14</span>:<span class=\"number\">5</span><span class=\"string\">c:</span><span class=\"string\">d3:</span><span class=\"number\">78</span>:<span class=\"number\">04</span>:<span class=\"number\">65</span> <span class=\"regexp\">/home/</span>username<span class=\"regexp\">/.ssh/</span>id_rsa (RSA)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试连接\"><a href=\"#测试连接\" class=\"headerlink\" title=\"测试连接\"></a>测试连接</h2><p>将 SSH 公钥添加到 SSH 服务端后，就可以使用 SSH 来连接远程主机了。下面以 GitHub为例测试连接：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh -T git@github.com</span><br><span class=\"line\">Hi username! You<span class=\"symbol\">'ve</span> successfully authenticated, but GitHub does <span class=\"keyword\">not</span> provide shell <span class=\"keyword\">access</span>.</span><br></pre></td></tr></table></figure>\n\n<p>这说明连接成功了。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZWxwLmdpdGh1Yi5jb20vYXJ0aWNsZXMvZ2VuZXJhdGluZy1zc2gta2V5cy8=\">Generating SSH keys<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9QYXNzcGhyYXNlJTIwUGFzc3BocmFzZQ==\">Passphrase(维基百科)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWVtb24zNjkuZ2l0aHViLmlvL3NzaC8yMDE1LzAzLzA4LyUyMmh0dHBzOi8vd2lraS5hcmNobGludXgub3JnL2luZGV4LnBocC9TU0hfS2V5c18oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KSUyMg==\">SSH Keys(简体中文)<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Tc2gtYWdlbnQlMjBzc2gtYWdlbnQ=\">ssh-agent<i class=\"fa fa-external-link-alt\"></i></span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3lldW5nZWVrLmNvbS8yMDE0LzA2LzI2L0dpdCVFNSVBNCU5QSVFNSVCOCU5MCVFNSU4RiVCNyVFOSU4NSU4RCVFNyVCRCVBRS8lMjBHaXQlRTUlQTQlOUElRTUlQjglOTAlRTUlOEYlQjclRTklODUlOEQlRTclQkQlQUU=\">Git多帐号配置<i class=\"fa fa-external-link-alt\"></i></span></p>"},{"title":"SSH 简介","type":"categories","layout":"post","external_link":{"enable":true},"date":"2020-04-11T02:47:31.000Z","_content":"\nSSH(即 Secure Shell)，是一项创建在应用层和传输层基础上的安全协议，为计算机 Shell 提供安全的传输和使用环境。\n\n传统的网络服务程序，如FTP、POP、Telnet等本质上并不安全；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。\n\n而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。\n\nSSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。\n\n最初的 SSH 协议由芬兰一家公司的研究员Tatu Ylönen于1995年设计开发，但是由于版权和加密算法的等等的限制，很多人转而使用开源的自由软件 OpenSSH。\n<!-- more -->\n客户端安装 openssh-client 用以登录远程主机：\n\n```\nsudo apt-get install openssh-client\n\n```\n\n服务端安装 openssh-server 用以提供客户端登录：\n\n```\nsudo apt-get install openssh-server\n\n```\n\nSSH 提供了两种级别的安全认证，基于密码的安全认证和基于密钥的安全认证：\n\n基于密码的安全认证\n---------\n\n基于密码的安全认证，登录的时候需要提供账号和密码；远程主机将自己的公钥分发给登录客户端，客户端访问主机使用该公钥加密；远程主机使用自己的私钥解密数据。\n\n登录的流程如下：\n\n1. 远程主机收到用户登录请求，将自己的公钥发给用户\n2. 用户通过远程主机公钥的指纹确认主机的真实性，然后使用远程主机公钥将登录密码加密后，发送回远程主机\n3. 远程主机使用自己的私钥解码登录密码，验证密码正确后，允许用户登录\n\n### 用法\n\n假设需要以用户名 user 登录远程主机 host：\n\n如果本地用户名与远程用户名一致，可以省略用户名：\n\nSSH 默认端口号22，可以使用 p 参数来指定端口号：\n\n第一次登录到远程主机时，系统会出现如下提示：\n\n```\n$ ssh user@host\nThe authenticity of host 'host (***.***.***.***)' can't be established.\nRSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\nAre you sure you want to continue connecting (yes/no)?\n\n```\n\n这段话提示用户无法确认远程主机的真实性，只知道 RSA 公钥的指纹，询问用户是否继续。\n\n我们使用 ssh-keygen 工具可以生成 SSH 密钥对，其中公钥的长度可以很长，对用户来说不方便直接对比验证，因此对其进行了 MD5 计算，生成了一个128的指纹，这样再进行比较就比较容易了。\n\n那么这里就要求我们事先知道远程主机的公钥指纹，才可以确认主机的真实性。\n\n用户确认主机的真实性，输入 yes 继续连接：\n\n```\nWarning: Permanently added 'host,***.***.***.***' (RSA) to the list of known hosts.\n\n```\n\n然后输入密码：\n\n```\nPassword: (enter password)\n\n```\n\n密码正确，即可登录成功。\n\n当第一次登录成功后，远程主机的公钥会被保存到文件 $HOME/.ssh/known_hosts 中，下次再连接这台主机就会跳过警告，直接提示输入密码。\n\n每个SSH用户都有自己的known\\_hosts文件，此外系统也有一个这样的文件，通常是 /etc/ssh/ssh\\_known_hosts ，保存一些对所有用户都可信赖的远程主机的公钥。\n\n### 中间人攻击\n\n基于密码的安全认证无法避免中间人攻击：\n\n网络提供者(ISP、公共 wifi 提供者等，或其它形式拦截者)，拦截用户的登录请求，用自己的公钥伪造远程主机的公钥发送给用户，然后获取用户加密后的密码，用自己的私钥解密已获取用户密码，这样用户的账号密码就被盗取了。\n\n基于密钥的安全认证\n---------\n\n基于密钥的安全认证，客户端将将公钥上传到服务器。登录的时候，客户端向服务器发送登录请求；服务器收到请求后，向用户发送一段随机字符串；用户用自己的私钥加密后，再发送回服务器；服务器使用事先存储的公钥进行解密，如果解密成功，证明用户可信，允许登录。\n\n这种方式，在登录服务器的过程中，不需要上传密码，增加了安全性。\n\n密钥的生成可参看[创建 SSH 密钥对](https://daemon369.github.io/ssh/2015/03/08/generating-ssh-keys \"创建 SSH 密钥对\")。\n\n我们上传公钥到服务端，即将公钥内容附加到服务器用户目录下的 _$HOME/.ssh/authorized_keys_ 文件中：\n\n服务端首先需要安装 openssh-server 程序用以提供 ssh 登录服务，在服务器(Ubuntu 14.04 LTS)上查看服务是否打开：\n\n```\n$ service ssh status\nssh start/running, process 1201\n\n```\n\n检查 ssh 服务配置项\n\n```\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n\n```\n\n是否开启：\n\n```\n$ cat /etc/ssh/sshd_config | grep RSAAuthentication\nRSAAuthentication yes\n$ cat /etc/ssh/sshd_config | grep PubkeyAuthentication\nPubkeyAuthentication yes\n$ cat /etc/ssh/sshd_config | grep AuthorizedKeysFile\nAuthorizedKeysFile %h/.ssh/authorized_keys\n\n```\n\n上传公钥：\n\n重启远程主机 ssh 服务：\n\n```\n$ ssh user@host 'service ssh restart'\n# ubuntu\n\n$ ssh user@host '/etc/init.d/ssh restart'\n# debian\n\n```\n\n也可以使用更复杂的命令：\n\n```\nssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n\n```\n\n这个命令可以清晰的看到公钥的上传过程：\n\n1. 在远程主机用户目录下创建目录：~/.ssh\n2. 将本地主机文件 ~/.ssh/id\\_rsa.pub 拷贝到远程主机的文件 ~/.ssh/authorized\\_keys ，追加到文件末尾\n\n然后重启服务即可\n","source":"_posts/SSH-简介.md","raw":"---\ntitle: SSH 简介\ntype: categories\nlayout: post\nexternal_link:\n  enable: true\ndate: 2020-04-11 10:47:31\ntags:\n  - 全栈开发\n  - SSH\ncategories: SSH\n---\n\nSSH(即 Secure Shell)，是一项创建在应用层和传输层基础上的安全协议，为计算机 Shell 提供安全的传输和使用环境。\n\n传统的网络服务程序，如FTP、POP、Telnet等本质上并不安全；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。\n\n而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。\n\nSSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。\n\n最初的 SSH 协议由芬兰一家公司的研究员Tatu Ylönen于1995年设计开发，但是由于版权和加密算法的等等的限制，很多人转而使用开源的自由软件 OpenSSH。\n<!-- more -->\n客户端安装 openssh-client 用以登录远程主机：\n\n```\nsudo apt-get install openssh-client\n\n```\n\n服务端安装 openssh-server 用以提供客户端登录：\n\n```\nsudo apt-get install openssh-server\n\n```\n\nSSH 提供了两种级别的安全认证，基于密码的安全认证和基于密钥的安全认证：\n\n基于密码的安全认证\n---------\n\n基于密码的安全认证，登录的时候需要提供账号和密码；远程主机将自己的公钥分发给登录客户端，客户端访问主机使用该公钥加密；远程主机使用自己的私钥解密数据。\n\n登录的流程如下：\n\n1. 远程主机收到用户登录请求，将自己的公钥发给用户\n2. 用户通过远程主机公钥的指纹确认主机的真实性，然后使用远程主机公钥将登录密码加密后，发送回远程主机\n3. 远程主机使用自己的私钥解码登录密码，验证密码正确后，允许用户登录\n\n### 用法\n\n假设需要以用户名 user 登录远程主机 host：\n\n如果本地用户名与远程用户名一致，可以省略用户名：\n\nSSH 默认端口号22，可以使用 p 参数来指定端口号：\n\n第一次登录到远程主机时，系统会出现如下提示：\n\n```\n$ ssh user@host\nThe authenticity of host 'host (***.***.***.***)' can't be established.\nRSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\nAre you sure you want to continue connecting (yes/no)?\n\n```\n\n这段话提示用户无法确认远程主机的真实性，只知道 RSA 公钥的指纹，询问用户是否继续。\n\n我们使用 ssh-keygen 工具可以生成 SSH 密钥对，其中公钥的长度可以很长，对用户来说不方便直接对比验证，因此对其进行了 MD5 计算，生成了一个128的指纹，这样再进行比较就比较容易了。\n\n那么这里就要求我们事先知道远程主机的公钥指纹，才可以确认主机的真实性。\n\n用户确认主机的真实性，输入 yes 继续连接：\n\n```\nWarning: Permanently added 'host,***.***.***.***' (RSA) to the list of known hosts.\n\n```\n\n然后输入密码：\n\n```\nPassword: (enter password)\n\n```\n\n密码正确，即可登录成功。\n\n当第一次登录成功后，远程主机的公钥会被保存到文件 $HOME/.ssh/known_hosts 中，下次再连接这台主机就会跳过警告，直接提示输入密码。\n\n每个SSH用户都有自己的known\\_hosts文件，此外系统也有一个这样的文件，通常是 /etc/ssh/ssh\\_known_hosts ，保存一些对所有用户都可信赖的远程主机的公钥。\n\n### 中间人攻击\n\n基于密码的安全认证无法避免中间人攻击：\n\n网络提供者(ISP、公共 wifi 提供者等，或其它形式拦截者)，拦截用户的登录请求，用自己的公钥伪造远程主机的公钥发送给用户，然后获取用户加密后的密码，用自己的私钥解密已获取用户密码，这样用户的账号密码就被盗取了。\n\n基于密钥的安全认证\n---------\n\n基于密钥的安全认证，客户端将将公钥上传到服务器。登录的时候，客户端向服务器发送登录请求；服务器收到请求后，向用户发送一段随机字符串；用户用自己的私钥加密后，再发送回服务器；服务器使用事先存储的公钥进行解密，如果解密成功，证明用户可信，允许登录。\n\n这种方式，在登录服务器的过程中，不需要上传密码，增加了安全性。\n\n密钥的生成可参看[创建 SSH 密钥对](https://daemon369.github.io/ssh/2015/03/08/generating-ssh-keys \"创建 SSH 密钥对\")。\n\n我们上传公钥到服务端，即将公钥内容附加到服务器用户目录下的 _$HOME/.ssh/authorized_keys_ 文件中：\n\n服务端首先需要安装 openssh-server 程序用以提供 ssh 登录服务，在服务器(Ubuntu 14.04 LTS)上查看服务是否打开：\n\n```\n$ service ssh status\nssh start/running, process 1201\n\n```\n\n检查 ssh 服务配置项\n\n```\nRSAAuthentication yes\nPubkeyAuthentication yes\nAuthorizedKeysFile .ssh/authorized_keys\n\n```\n\n是否开启：\n\n```\n$ cat /etc/ssh/sshd_config | grep RSAAuthentication\nRSAAuthentication yes\n$ cat /etc/ssh/sshd_config | grep PubkeyAuthentication\nPubkeyAuthentication yes\n$ cat /etc/ssh/sshd_config | grep AuthorizedKeysFile\nAuthorizedKeysFile %h/.ssh/authorized_keys\n\n```\n\n上传公钥：\n\n重启远程主机 ssh 服务：\n\n```\n$ ssh user@host 'service ssh restart'\n# ubuntu\n\n$ ssh user@host '/etc/init.d/ssh restart'\n# debian\n\n```\n\n也可以使用更复杂的命令：\n\n```\nssh user@host 'mkdir -p .ssh && cat >> .ssh/authorized_keys' < ~/.ssh/id_rsa.pub\n\n```\n\n这个命令可以清晰的看到公钥的上传过程：\n\n1. 在远程主机用户目录下创建目录：~/.ssh\n2. 将本地主机文件 ~/.ssh/id\\_rsa.pub 拷贝到远程主机的文件 ~/.ssh/authorized\\_keys ，追加到文件末尾\n\n然后重启服务即可\n","slug":"SSH-简介","published":1,"updated":"2020-04-17T08:47:32.607Z","comments":1,"photos":[],"link":"","_id":"ckbc2dr450008cjc394twhwr4","content":"<p>SSH(即 Secure Shell)，是一项创建在应用层和传输层基础上的安全协议，为计算机 Shell 提供安全的传输和使用环境。</p>\n<p>传统的网络服务程序，如FTP、POP、Telnet等本质上并不安全；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。</p>\n<p>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。</p>\n<p>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。</p>\n<p>最初的 SSH 协议由芬兰一家公司的研究员Tatu Ylönen于1995年设计开发，但是由于版权和加密算法的等等的限制，很多人转而使用开源的自由软件 OpenSSH。</p>\n<a id=\"more\"></a>\n<p>客户端安装 openssh-client 用以登录远程主机：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install openssh-client</span><br></pre></td></tr></table></figure>\n\n<p>服务端安装 openssh-server 用以提供客户端登录：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install openssh-<span class=\"keyword\">server</span></span><br></pre></td></tr></table></figure>\n\n<p>SSH 提供了两种级别的安全认证，基于密码的安全认证和基于密钥的安全认证：</p>\n<h2 id=\"基于密码的安全认证\"><a href=\"#基于密码的安全认证\" class=\"headerlink\" title=\"基于密码的安全认证\"></a>基于密码的安全认证</h2><p>基于密码的安全认证，登录的时候需要提供账号和密码；远程主机将自己的公钥分发给登录客户端，客户端访问主机使用该公钥加密；远程主机使用自己的私钥解密数据。</p>\n<p>登录的流程如下：</p>\n<ol>\n<li>远程主机收到用户登录请求，将自己的公钥发给用户</li>\n<li>用户通过远程主机公钥的指纹确认主机的真实性，然后使用远程主机公钥将登录密码加密后，发送回远程主机</li>\n<li>远程主机使用自己的私钥解码登录密码，验证密码正确后，允许用户登录</li>\n</ol>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>假设需要以用户名 user 登录远程主机 host：</p>\n<p>如果本地用户名与远程用户名一致，可以省略用户名：</p>\n<p>SSH 默认端口号22，可以使用 p 参数来指定端口号：</p>\n<p>第一次登录到远程主机时，系统会出现如下提示：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br><span class=\"line\">The authenticity <span class=\"keyword\">of</span> host 'host <span class=\"comment\">(***.***.***.***)</span>' can't be established.</span><br><span class=\"line\">RSA key fingerprint <span class=\"keyword\">is</span> <span class=\"number\">98</span>:<span class=\"number\">2</span>e:d7:e0:de:<span class=\"number\">9</span>f:ac:<span class=\"number\">67</span>:<span class=\"number\">28</span>:c2:<span class=\"number\">42</span>:<span class=\"number\">2</span>d:<span class=\"number\">37</span>:<span class=\"number\">16</span>:<span class=\"number\">58</span>:<span class=\"number\">4</span>d.</span><br><span class=\"line\">Are you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n\n<p>这段话提示用户无法确认远程主机的真实性，只知道 RSA 公钥的指纹，询问用户是否继续。</p>\n<p>我们使用 ssh-keygen 工具可以生成 SSH 密钥对，其中公钥的长度可以很长，对用户来说不方便直接对比验证，因此对其进行了 MD5 计算，生成了一个128的指纹，这样再进行比较就比较容易了。</p>\n<p>那么这里就要求我们事先知道远程主机的公钥指纹，才可以确认主机的真实性。</p>\n<p>用户确认主机的真实性，输入 yes 继续连接：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Permanently added <span class=\"string\">'host,***.***.***.***'</span> (RSA) <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> list <span class=\"keyword\">of</span> known hosts.</span><br></pre></td></tr></table></figure>\n\n<p>然后输入密码：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Password</span>: (enter <span class=\"keyword\">password</span>)</span><br></pre></td></tr></table></figure>\n\n<p>密码正确，即可登录成功。</p>\n<p>当第一次登录成功后，远程主机的公钥会被保存到文件 $HOME/.ssh/known_hosts 中，下次再连接这台主机就会跳过警告，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是 /etc/ssh/ssh_known_hosts ，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h3 id=\"中间人攻击\"><a href=\"#中间人攻击\" class=\"headerlink\" title=\"中间人攻击\"></a>中间人攻击</h3><p>基于密码的安全认证无法避免中间人攻击：</p>\n<p>网络提供者(ISP、公共 wifi 提供者等，或其它形式拦截者)，拦截用户的登录请求，用自己的公钥伪造远程主机的公钥发送给用户，然后获取用户加密后的密码，用自己的私钥解密已获取用户密码，这样用户的账号密码就被盗取了。</p>\n<h2 id=\"基于密钥的安全认证\"><a href=\"#基于密钥的安全认证\" class=\"headerlink\" title=\"基于密钥的安全认证\"></a>基于密钥的安全认证</h2><p>基于密钥的安全认证，客户端将将公钥上传到服务器。登录的时候，客户端向服务器发送登录请求；服务器收到请求后，向用户发送一段随机字符串；用户用自己的私钥加密后，再发送回服务器；服务器使用事先存储的公钥进行解密，如果解密成功，证明用户可信，允许登录。</p>\n<p>这种方式，在登录服务器的过程中，不需要上传密码，增加了安全性。</p>\n<p>密钥的生成可参看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWVtb24zNjkuZ2l0aHViLmlvL3NzaC8yMDE1LzAzLzA4L2dlbmVyYXRpbmctc3NoLWtleXM=\">创建 SSH 密钥对<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p>我们上传公钥到服务端，即将公钥内容附加到服务器用户目录下的 <em>$HOME/.ssh/authorized_keys</em> 文件中：</p>\n<p>服务端首先需要安装 openssh-server 程序用以提供 ssh 登录服务，在服务器(Ubuntu 14.04 LTS)上查看服务是否打开：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"built_in\"> service </span>ssh status</span><br><span class=\"line\">ssh start/running, process 1201</span><br></pre></td></tr></table></figure>\n\n<p>检查 ssh 服务配置项</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">RSAAuthentication</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">PubkeyAuthentication</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">AuthorizedKeysFile</span> <span class=\"string\">.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure>\n\n<p>是否开启：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> /etc/ssh/sshd_config | <span class=\"keyword\">grep</span> RSAAuthentication</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">$ <span class=\"keyword\">cat</span> /etc/ssh/sshd_config | <span class=\"keyword\">grep</span> PubkeyAuthentication</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">$ <span class=\"keyword\">cat</span> /etc/ssh/sshd_config | <span class=\"keyword\">grep</span> AuthorizedKeysFile</span><br><span class=\"line\">AuthorizedKeysFile %h/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>上传公钥：</p>\n<p>重启远程主机 ssh 服务：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh user<span class=\"variable\">@host</span> <span class=\"string\">'service ssh restart'</span></span><br><span class=\"line\"><span class=\"comment\"># ubuntu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>ssh user<span class=\"variable\">@host</span> <span class=\"string\">'/etc/init.d/ssh restart'</span></span><br><span class=\"line\"><span class=\"comment\"># debian</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用更复杂的命令：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user<span class=\"variable\">@host</span> <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~<span class=\"regexp\">/.ssh/id</span>_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>这个命令可以清晰的看到公钥的上传过程：</p>\n<ol>\n<li>在远程主机用户目录下创建目录：~/.ssh</li>\n<li>将本地主机文件 ~/.ssh/id_rsa.pub 拷贝到远程主机的文件 ~/.ssh/authorized_keys ，追加到文件末尾</li>\n</ol>\n<p>然后重启服务即可</p>\n","site":{"data":{}},"excerpt":"<p>SSH(即 Secure Shell)，是一项创建在应用层和传输层基础上的安全协议，为计算机 Shell 提供安全的传输和使用环境。</p>\n<p>传统的网络服务程序，如FTP、POP、Telnet等本质上并不安全；因为它们在网络上用明文传送数据、用户帐号和用户口令，很容易受到中间人（man-in-the-middle）攻击方式的攻击。就是存在另一个人或者一台机器冒充真正的服务器接收用户传给服务器的数据，然后再冒充用户把数据传给真正的服务器。</p>\n<p>而SSH是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。利用SSH协议可以有效防止远程管理过程中的信息泄露问题。通过SSH可以对所有传输的数据进行加密，也能够防止DNS欺骗和IP欺骗。</p>\n<p>SSH之另一项优点为其传输的数据可以是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、POP、甚至为PPP提供一个安全的“通道”。</p>\n<p>最初的 SSH 协议由芬兰一家公司的研究员Tatu Ylönen于1995年设计开发，但是由于版权和加密算法的等等的限制，很多人转而使用开源的自由软件 OpenSSH。</p>","more":"<p>客户端安装 openssh-client 用以登录远程主机：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"builtin-name\">get</span> install openssh-client</span><br></pre></td></tr></table></figure>\n\n<p>服务端安装 openssh-server 用以提供客户端登录：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-<span class=\"keyword\">get</span> install openssh-<span class=\"keyword\">server</span></span><br></pre></td></tr></table></figure>\n\n<p>SSH 提供了两种级别的安全认证，基于密码的安全认证和基于密钥的安全认证：</p>\n<h2 id=\"基于密码的安全认证\"><a href=\"#基于密码的安全认证\" class=\"headerlink\" title=\"基于密码的安全认证\"></a>基于密码的安全认证</h2><p>基于密码的安全认证，登录的时候需要提供账号和密码；远程主机将自己的公钥分发给登录客户端，客户端访问主机使用该公钥加密；远程主机使用自己的私钥解密数据。</p>\n<p>登录的流程如下：</p>\n<ol>\n<li>远程主机收到用户登录请求，将自己的公钥发给用户</li>\n<li>用户通过远程主机公钥的指纹确认主机的真实性，然后使用远程主机公钥将登录密码加密后，发送回远程主机</li>\n<li>远程主机使用自己的私钥解码登录密码，验证密码正确后，允许用户登录</li>\n</ol>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>假设需要以用户名 user 登录远程主机 host：</p>\n<p>如果本地用户名与远程用户名一致，可以省略用户名：</p>\n<p>SSH 默认端口号22，可以使用 p 参数来指定端口号：</p>\n<p>第一次登录到远程主机时，系统会出现如下提示：</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br><span class=\"line\">The authenticity <span class=\"keyword\">of</span> host 'host <span class=\"comment\">(***.***.***.***)</span>' can't be established.</span><br><span class=\"line\">RSA key fingerprint <span class=\"keyword\">is</span> <span class=\"number\">98</span>:<span class=\"number\">2</span>e:d7:e0:de:<span class=\"number\">9</span>f:ac:<span class=\"number\">67</span>:<span class=\"number\">28</span>:c2:<span class=\"number\">42</span>:<span class=\"number\">2</span>d:<span class=\"number\">37</span>:<span class=\"number\">16</span>:<span class=\"number\">58</span>:<span class=\"number\">4</span>d.</span><br><span class=\"line\">Are you sure you want <span class=\"keyword\">to</span> <span class=\"keyword\">continue</span> connecting (yes/no)?</span><br></pre></td></tr></table></figure>\n\n<p>这段话提示用户无法确认远程主机的真实性，只知道 RSA 公钥的指纹，询问用户是否继续。</p>\n<p>我们使用 ssh-keygen 工具可以生成 SSH 密钥对，其中公钥的长度可以很长，对用户来说不方便直接对比验证，因此对其进行了 MD5 计算，生成了一个128的指纹，这样再进行比较就比较容易了。</p>\n<p>那么这里就要求我们事先知道远程主机的公钥指纹，才可以确认主机的真实性。</p>\n<p>用户确认主机的真实性，输入 yes 继续连接：</p>\n<figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Warning: Permanently added <span class=\"string\">'host,***.***.***.***'</span> (RSA) <span class=\"built_in\">to</span> <span class=\"keyword\">the</span> list <span class=\"keyword\">of</span> known hosts.</span><br></pre></td></tr></table></figure>\n\n<p>然后输入密码：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Password</span>: (enter <span class=\"keyword\">password</span>)</span><br></pre></td></tr></table></figure>\n\n<p>密码正确，即可登录成功。</p>\n<p>当第一次登录成功后，远程主机的公钥会被保存到文件 $HOME/.ssh/known_hosts 中，下次再连接这台主机就会跳过警告，直接提示输入密码。</p>\n<p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是 /etc/ssh/ssh_known_hosts ，保存一些对所有用户都可信赖的远程主机的公钥。</p>\n<h3 id=\"中间人攻击\"><a href=\"#中间人攻击\" class=\"headerlink\" title=\"中间人攻击\"></a>中间人攻击</h3><p>基于密码的安全认证无法避免中间人攻击：</p>\n<p>网络提供者(ISP、公共 wifi 提供者等，或其它形式拦截者)，拦截用户的登录请求，用自己的公钥伪造远程主机的公钥发送给用户，然后获取用户加密后的密码，用自己的私钥解密已获取用户密码，这样用户的账号密码就被盗取了。</p>\n<h2 id=\"基于密钥的安全认证\"><a href=\"#基于密钥的安全认证\" class=\"headerlink\" title=\"基于密钥的安全认证\"></a>基于密钥的安全认证</h2><p>基于密钥的安全认证，客户端将将公钥上传到服务器。登录的时候，客户端向服务器发送登录请求；服务器收到请求后，向用户发送一段随机字符串；用户用自己的私钥加密后，再发送回服务器；服务器使用事先存储的公钥进行解密，如果解密成功，证明用户可信，允许登录。</p>\n<p>这种方式，在登录服务器的过程中，不需要上传密码，增加了安全性。</p>\n<p>密钥的生成可参看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kYWVtb24zNjkuZ2l0aHViLmlvL3NzaC8yMDE1LzAzLzA4L2dlbmVyYXRpbmctc3NoLWtleXM=\">创建 SSH 密钥对<i class=\"fa fa-external-link-alt\"></i></span>。</p>\n<p>我们上传公钥到服务端，即将公钥内容附加到服务器用户目录下的 <em>$HOME/.ssh/authorized_keys</em> 文件中：</p>\n<p>服务端首先需要安装 openssh-server 程序用以提供 ssh 登录服务，在服务器(Ubuntu 14.04 LTS)上查看服务是否打开：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$<span class=\"built_in\"> service </span>ssh status</span><br><span class=\"line\">ssh start/running, process 1201</span><br></pre></td></tr></table></figure>\n\n<p>检查 ssh 服务配置项</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">RSAAuthentication</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">PubkeyAuthentication</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"string\">AuthorizedKeysFile</span> <span class=\"string\">.ssh/authorized_keys</span></span><br></pre></td></tr></table></figure>\n\n<p>是否开启：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"keyword\">cat</span> /etc/ssh/sshd_config | <span class=\"keyword\">grep</span> RSAAuthentication</span><br><span class=\"line\">RSAAuthentication yes</span><br><span class=\"line\">$ <span class=\"keyword\">cat</span> /etc/ssh/sshd_config | <span class=\"keyword\">grep</span> PubkeyAuthentication</span><br><span class=\"line\">PubkeyAuthentication yes</span><br><span class=\"line\">$ <span class=\"keyword\">cat</span> /etc/ssh/sshd_config | <span class=\"keyword\">grep</span> AuthorizedKeysFile</span><br><span class=\"line\">AuthorizedKeysFile %h/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>上传公钥：</p>\n<p>重启远程主机 ssh 服务：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh user<span class=\"variable\">@host</span> <span class=\"string\">'service ssh restart'</span></span><br><span class=\"line\"><span class=\"comment\"># ubuntu</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$ </span>ssh user<span class=\"variable\">@host</span> <span class=\"string\">'/etc/init.d/ssh restart'</span></span><br><span class=\"line\"><span class=\"comment\"># debian</span></span><br></pre></td></tr></table></figure>\n\n<p>也可以使用更复杂的命令：</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh user<span class=\"variable\">@host</span> <span class=\"string\">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~<span class=\"regexp\">/.ssh/id</span>_rsa.pub</span><br></pre></td></tr></table></figure>\n\n<p>这个命令可以清晰的看到公钥的上传过程：</p>\n<ol>\n<li>在远程主机用户目录下创建目录：~/.ssh</li>\n<li>将本地主机文件 ~/.ssh/id_rsa.pub 拷贝到远程主机的文件 ~/.ssh/authorized_keys ，追加到文件末尾</li>\n</ol>\n<p>然后重启服务即可</p>"},{"title":"前端面试题整理","date":"2020-04-17T06:34:38.000Z","author":"Mark","layout":"post","top":12,"external_link":{"enable":true},"_content":"\n### 前言\n\n> 本人并不是技术大牛(但是会一直朝着那个方向前进)，本文会分享一些本人在面试过程中遇到的一些比较有意思的前端面试题目，如有不对之处还请各位巨牛批评指正！\n<!-- more -->\n\n### Javascript\n\n#### Q: 使用promise封装一个readfile函数\n\n```javascript\nconst fs = require('fs')\nfunction pReadFile(filePath){\n  return new Promise(function(resolve,reject){\n  fs.readFile(filePath,'utf8',function(err,data){\n    if(err){\n      reject(err)\n    } else {\n      resolve(data)\n    }\n  })\n })\n}\npReadFile('./data/a.txt')\n  .then(function(data){\n    console.log(data)\n    return pReadFile('./data/b.txt')\n  })\n  .then(function(data){\n    console.log(data)\n    return pReadFile('./data/c.txt')\n  })\n  .then(function(data){\n    console.log(data)\n  })\n```\n\n#### Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd\n\n```javascript\nfunction str_ (str) {\n  if (str != '') {\n    const result = str[0];\n    for (const i = 1; i < str.length; i++) {\n      if (str[i] != str[i - 1]) {\n        result += str[i];\n      }\n    }\n  }\n  else result = '';\n  return result;\n}\n```\n\n#### Q: 正则将电话号码中间四位变成#号\n\n```javascript\n  // 方式 1： 正则分组\n  let phone = \"18180800880\"\n  let reg = /(\\d{3})\\d{4}(\\d{4})/\n  phone.replace(reg,\"$1****$2\")\n  // 181****0880\n\n  // 方式 2：字符串截取\n  phone.substr(0,3) + \"****\" + phone.substr(7);\n```\n\n#### Q: 查看下列代码运行结果\n\n```javascript\ntry {\n  setTimeout(()=> {\n    throw new Error('1')\n  },0)\n} catch(error) {\n  console.log(error)\n}\n```\n\n```javascript\n// 输出catch内容\n// 然后抛出异常\n```\n\n#### Q: 查看下列代码运行结果\n\n```javascript\nlet foo = function() { console.log(1) };\n(function foo() {\n  foo = 10  // 由于foo在函数中只为可读，因此赋值无效\n  console.log(foo)\n}())\n```\n\n#### Q: 数组拆解: flat: [1,[{a:1},3]] --> [1, 2, 3]\n\n- 方式 1，缺陷如果元素是对象会报错\n\n```javascript\nArray.prototype.flat = function() {\n  return this.toString().split(',').map(item => +item )\n}\n```\n\n- 方式 2，es6数组新扩展，参数是维度，可填写无穷大\n\n```javascript\n[1,[2,3]].flat(1) ==> [1,2,3]\n```\n\n- 方式 3，reduce 和 concat\n\n```javascript\nvar arr1 = [1,{sas: '222'},3,[1,2,3,4, [2,3,4]]];\n\nfunction flattenDeep(arr1) {\n  return arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);\n}\nflattenDeep(arr1);\n```\n\n#### Q: 写一个函数输出： ['a', 'b', 'c', 'd'] => { a: { b: { c: 'd' } } }\n\n```javascript\nfunction to_(arr) {\n  const _arr = arr.reverse()\n  if (!Array.isArray(_arr)) return {};\n  return _arr.reduce((item, cur, index, arr) => {\n    if (index === 0) {\n      item = {\n        [arr[index + 1]]: cur\n      };\n      return item\n    };\n    if (index === 1) return item;\n    item = { [cur]: item };\n    return item;\n  }, {})\n}\n```\n\n#### Q: 封装一个Array.filter方法\n\n- 1.使用Array.reduce方法封装，还有其他方法，希望大家帮忙补充！\n\n```javascript\nfunction Filter(arr, callback) {\n  return arr.reduce((item, cur, index, arr) => {\n    if (callback(cur, index, arr)) item.push(cur)\n    return item;\n  }, [])\n}\n```\n\n#### Q: 什么是防抖和节流？有什么区别？如何实现\n\n- 防抖\n\n```javascript\n// 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间\n// 思路：每次触发事件时都取消之前的延时调用方法\nfunction debounce(fn) {\n  let timeout = null; // 创建一个标记用来存放定时器的返回值\n  return function () {\n    clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉\n    timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数\n      fn.apply(this, arguments);\n    }, 500);\n  };\n}\nfunction sayHi() {\n  console.log('防抖成功');\n}\n\nvar inp = document.getElementById('inp');\ninp.addEventListener('input', debounce(sayHi)); // 防抖\n```\n\n- 节流\n\n```javascript\n// 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率\n// 思路：每次触发事件时都判断当前是否有等待执行的延时函数\n\nfunction throttle(fn) {\n  let canRun = true; // 通过闭包保存一个标记\n  return function () {\n    if (!canRun) return; // 在函数开头判断标记是否为true，不为true则return\n    canRun = false; // 立即设置为false\n    setTimeout(() => { // 将外部传入的函数的执行放在setTimeout中\n      fn.apply(this, arguments);\n      // 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉\n      canRun = true;\n    }, 500);\n  };\n}\nfunction sayHi(e) {\n  console.log(e.target.innerWidth, e.target.innerHeight);\n}\nwindow.addEventListener('resize', throttle(sayHi));\n```\n\n#### Q: 创建一个从1——5数组\n\n- 字面量\n\n```javascript\nconst arr = [1,2,3,4,5];\nvar arr = [1,2,3,4,5];\nlet arr = [1,2,3,4,5];\n```\n\n- 方法\n\n```javascript\nconst arr = Array.of(1,2,3,4,5)\nconst arr = Array.from('12345').map(e=> Number(e))\nconst arr = Array(5).map((e,index)=>{\n  return index + 1\n})\nconst arr = '12345'.split('').map(e=> Number(e))\nconst arr = Array(5).fill(0).map((e,i)=> i+ 1)\nconst arr = Array.from(Array(5))\narr.forEach((e,i)=>{\n  arr.fill(i + 1,i, i + 1)\n})\n```\n\n#### Q: 给定一个整数数组 `nums` 和一个目标值 `target` ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n\n- 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n```javascript\n// 给定 nums = [2, 7, 11, 15], target = 9\n\n// 因为 nums[0] + nums[1] = 2 + 7 = 9\n// 所以返回 [0, 1]\n\n// 第一种\nlet nums = [2, 7, 11, 15],\n      target = 26;\n\nfunction getSumIndex(arr1, sum) {\n  let i = 0;\n  while (i < arr1.length) {\n    const j = arr1.slice(i + 1).findIndex(item => arr1[i] + item === sum);\n    if (j !== -1) {\n      console.log([i, i + 1 + j]);\n      return [i, i + 1 + j];\n    } else {\n      i++;\n    }\n  }\n  console.log(\"[]\");\n  return [];\n}\n\n// 第二种\n\nvar getSumIndex = function(nums, target) {\n    let map = new Map()\n    for(let i = 0; i< nums.length; i++) {\n        let k = target-nums[i]\n        if(map.has(k)) {\n            return [map.get(k), i]\n        }\n        map.set(nums[i], i)\n    }\n    return [];\n};\n\n\ngetSumIndex(nums, target);\n```\n\n- 附leetcode地址：[leetcode](https://leetcode-cn.com/problems/two-sum/solution/qian-duan-jin-jie-suan-fa-liang-shu-zhi-he-by-user/)\n\n### CSS\n\n#### Q:弹性盒子中 flex: 0 1 auto 表示什么意思\n\n```text\n三个参数分别对应的是 flex-grow, flex-shrink 和 flex-basis，默认值为0 1 auto。\n  1.flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n  2.flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n  3.flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。\n```\n\n### webpack\n\n#### Q: webpack 中 loader 和 plugin 的区别是什么\n\n- 这里引用官方文档原文：\n\n```text\n  While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.\n```\n\n- 网友解释\n\n```text\n# loader:让webpack能够处理非js文件(自身职能理解js)，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n  例如：css-loader、style-loader、postcss-loader、sass-loader\n\n# plugins:从打包优化和压缩，一直到重新定义环境中的变量.\n  例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill\n\n# 相对于loader转换指定类型的模块功能，plugins能够被用于执行更广泛的任务比如打包优化、文件管理、环境注入等……\n\n# webpack 是由nodejs编写的前端资源加载/打包工具，由nodejs提供了强大的文件处理，IO能力。\n  loader: 是一个nodejs 函数模块， 传入resource file 或者sourceMap json 结果，读取文件，将文件处理为String 或者 Buffer 格式，然后传给compiler 或者下一个loader.\n  plugin: 是能够参与到compilation process的自定义函数，通过hook到每一个编译（compiler）中，触发关键事件或处理。\n\n# 如何自定义webpack插件：\n\n# JavaScript 命名函数\n  在插件函数prototype 上定义一个apply 方法\n  定义一个绑定到webpack 自身的hook\n  处理webpack内部特定数据\n  功能完成后调用webpack 提供的回调\n\n\n一、webpack的打包原理\n\n  识别入口文件\n  通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)\n  webpack做的就是分析代码，转换代码，编译代码，输出代码\n  最终形成打包后的代码\n二、什么是loader\n\n  loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行，第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码\n\n三、什么是plugin\n\n  在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。\n\n四、loader和plugin的区别\n\n  对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程\n  plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务\n```\n\n### 网络请求方面\n\n#### Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用\n\n- 三者的异同：上面的使用方式说好了，下面就唠唠三者之间的区别，这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别。生命周期：cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效localStorage：除非被手动清除，否则将会永久保存。\n- sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。\n- 存放数据大小：cookie：4KB左右\n- localStorage和sessionStorage：可以保存5MB的信息。\n- http请求：cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题\n- localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信\n- 易用性：cookie：需要程序员自己封装，源生的Cookie接口不友好\n- localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持\n- 应用场景：从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比storage更好用的。其他情况下，可以使用storage，就用storage。\n- storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。\n- localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。\n","source":"_posts/前端面试题整理.md","raw":"---\ntitle: 前端面试题整理\ndate: 2020-04-17 14:34:38\nauthor: \"Mark\"\nlayout: post\ncategories: 前端面试 #分类\ntop: 12\nexternal_link:\n  enable: true\ntags:\n  - 前端开发\n  - 面试题\n  - Javascript\n---\n\n### 前言\n\n> 本人并不是技术大牛(但是会一直朝着那个方向前进)，本文会分享一些本人在面试过程中遇到的一些比较有意思的前端面试题目，如有不对之处还请各位巨牛批评指正！\n<!-- more -->\n\n### Javascript\n\n#### Q: 使用promise封装一个readfile函数\n\n```javascript\nconst fs = require('fs')\nfunction pReadFile(filePath){\n  return new Promise(function(resolve,reject){\n  fs.readFile(filePath,'utf8',function(err,data){\n    if(err){\n      reject(err)\n    } else {\n      resolve(data)\n    }\n  })\n })\n}\npReadFile('./data/a.txt')\n  .then(function(data){\n    console.log(data)\n    return pReadFile('./data/b.txt')\n  })\n  .then(function(data){\n    console.log(data)\n    return pReadFile('./data/c.txt')\n  })\n  .then(function(data){\n    console.log(data)\n  })\n```\n\n#### Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd\n\n```javascript\nfunction str_ (str) {\n  if (str != '') {\n    const result = str[0];\n    for (const i = 1; i < str.length; i++) {\n      if (str[i] != str[i - 1]) {\n        result += str[i];\n      }\n    }\n  }\n  else result = '';\n  return result;\n}\n```\n\n#### Q: 正则将电话号码中间四位变成#号\n\n```javascript\n  // 方式 1： 正则分组\n  let phone = \"18180800880\"\n  let reg = /(\\d{3})\\d{4}(\\d{4})/\n  phone.replace(reg,\"$1****$2\")\n  // 181****0880\n\n  // 方式 2：字符串截取\n  phone.substr(0,3) + \"****\" + phone.substr(7);\n```\n\n#### Q: 查看下列代码运行结果\n\n```javascript\ntry {\n  setTimeout(()=> {\n    throw new Error('1')\n  },0)\n} catch(error) {\n  console.log(error)\n}\n```\n\n```javascript\n// 输出catch内容\n// 然后抛出异常\n```\n\n#### Q: 查看下列代码运行结果\n\n```javascript\nlet foo = function() { console.log(1) };\n(function foo() {\n  foo = 10  // 由于foo在函数中只为可读，因此赋值无效\n  console.log(foo)\n}())\n```\n\n#### Q: 数组拆解: flat: [1,[{a:1},3]] --> [1, 2, 3]\n\n- 方式 1，缺陷如果元素是对象会报错\n\n```javascript\nArray.prototype.flat = function() {\n  return this.toString().split(',').map(item => +item )\n}\n```\n\n- 方式 2，es6数组新扩展，参数是维度，可填写无穷大\n\n```javascript\n[1,[2,3]].flat(1) ==> [1,2,3]\n```\n\n- 方式 3，reduce 和 concat\n\n```javascript\nvar arr1 = [1,{sas: '222'},3,[1,2,3,4, [2,3,4]]];\n\nfunction flattenDeep(arr1) {\n  return arr1.reduce((acc, val) => Array.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);\n}\nflattenDeep(arr1);\n```\n\n#### Q: 写一个函数输出： ['a', 'b', 'c', 'd'] => { a: { b: { c: 'd' } } }\n\n```javascript\nfunction to_(arr) {\n  const _arr = arr.reverse()\n  if (!Array.isArray(_arr)) return {};\n  return _arr.reduce((item, cur, index, arr) => {\n    if (index === 0) {\n      item = {\n        [arr[index + 1]]: cur\n      };\n      return item\n    };\n    if (index === 1) return item;\n    item = { [cur]: item };\n    return item;\n  }, {})\n}\n```\n\n#### Q: 封装一个Array.filter方法\n\n- 1.使用Array.reduce方法封装，还有其他方法，希望大家帮忙补充！\n\n```javascript\nfunction Filter(arr, callback) {\n  return arr.reduce((item, cur, index, arr) => {\n    if (callback(cur, index, arr)) item.push(cur)\n    return item;\n  }, [])\n}\n```\n\n#### Q: 什么是防抖和节流？有什么区别？如何实现\n\n- 防抖\n\n```javascript\n// 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间\n// 思路：每次触发事件时都取消之前的延时调用方法\nfunction debounce(fn) {\n  let timeout = null; // 创建一个标记用来存放定时器的返回值\n  return function () {\n    clearTimeout(timeout); // 每当用户输入的时候把前一个 setTimeout clear 掉\n    timeout = setTimeout(() => { // 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数\n      fn.apply(this, arguments);\n    }, 500);\n  };\n}\nfunction sayHi() {\n  console.log('防抖成功');\n}\n\nvar inp = document.getElementById('inp');\ninp.addEventListener('input', debounce(sayHi)); // 防抖\n```\n\n- 节流\n\n```javascript\n// 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率\n// 思路：每次触发事件时都判断当前是否有等待执行的延时函数\n\nfunction throttle(fn) {\n  let canRun = true; // 通过闭包保存一个标记\n  return function () {\n    if (!canRun) return; // 在函数开头判断标记是否为true，不为true则return\n    canRun = false; // 立即设置为false\n    setTimeout(() => { // 将外部传入的函数的执行放在setTimeout中\n      fn.apply(this, arguments);\n      // 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉\n      canRun = true;\n    }, 500);\n  };\n}\nfunction sayHi(e) {\n  console.log(e.target.innerWidth, e.target.innerHeight);\n}\nwindow.addEventListener('resize', throttle(sayHi));\n```\n\n#### Q: 创建一个从1——5数组\n\n- 字面量\n\n```javascript\nconst arr = [1,2,3,4,5];\nvar arr = [1,2,3,4,5];\nlet arr = [1,2,3,4,5];\n```\n\n- 方法\n\n```javascript\nconst arr = Array.of(1,2,3,4,5)\nconst arr = Array.from('12345').map(e=> Number(e))\nconst arr = Array(5).map((e,index)=>{\n  return index + 1\n})\nconst arr = '12345'.split('').map(e=> Number(e))\nconst arr = Array(5).fill(0).map((e,i)=> i+ 1)\nconst arr = Array.from(Array(5))\narr.forEach((e,i)=>{\n  arr.fill(i + 1,i, i + 1)\n})\n```\n\n#### Q: 给定一个整数数组 `nums` 和一个目标值 `target` ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\n\n- 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。\n\n```javascript\n// 给定 nums = [2, 7, 11, 15], target = 9\n\n// 因为 nums[0] + nums[1] = 2 + 7 = 9\n// 所以返回 [0, 1]\n\n// 第一种\nlet nums = [2, 7, 11, 15],\n      target = 26;\n\nfunction getSumIndex(arr1, sum) {\n  let i = 0;\n  while (i < arr1.length) {\n    const j = arr1.slice(i + 1).findIndex(item => arr1[i] + item === sum);\n    if (j !== -1) {\n      console.log([i, i + 1 + j]);\n      return [i, i + 1 + j];\n    } else {\n      i++;\n    }\n  }\n  console.log(\"[]\");\n  return [];\n}\n\n// 第二种\n\nvar getSumIndex = function(nums, target) {\n    let map = new Map()\n    for(let i = 0; i< nums.length; i++) {\n        let k = target-nums[i]\n        if(map.has(k)) {\n            return [map.get(k), i]\n        }\n        map.set(nums[i], i)\n    }\n    return [];\n};\n\n\ngetSumIndex(nums, target);\n```\n\n- 附leetcode地址：[leetcode](https://leetcode-cn.com/problems/two-sum/solution/qian-duan-jin-jie-suan-fa-liang-shu-zhi-he-by-user/)\n\n### CSS\n\n#### Q:弹性盒子中 flex: 0 1 auto 表示什么意思\n\n```text\n三个参数分别对应的是 flex-grow, flex-shrink 和 flex-basis，默认值为0 1 auto。\n  1.flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。\n  2.flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。\n  3.flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。\n```\n\n### webpack\n\n#### Q: webpack 中 loader 和 plugin 的区别是什么\n\n- 这里引用官方文档原文：\n\n```text\n  While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.\n```\n\n- 网友解释\n\n```text\n# loader:让webpack能够处理非js文件(自身职能理解js)，然后你就可以利用 webpack 的打包能力，对它们进行处理。\n  例如：css-loader、style-loader、postcss-loader、sass-loader\n\n# plugins:从打包优化和压缩，一直到重新定义环境中的变量.\n  例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill\n\n# 相对于loader转换指定类型的模块功能，plugins能够被用于执行更广泛的任务比如打包优化、文件管理、环境注入等……\n\n# webpack 是由nodejs编写的前端资源加载/打包工具，由nodejs提供了强大的文件处理，IO能力。\n  loader: 是一个nodejs 函数模块， 传入resource file 或者sourceMap json 结果，读取文件，将文件处理为String 或者 Buffer 格式，然后传给compiler 或者下一个loader.\n  plugin: 是能够参与到compilation process的自定义函数，通过hook到每一个编译（compiler）中，触发关键事件或处理。\n\n# 如何自定义webpack插件：\n\n# JavaScript 命名函数\n  在插件函数prototype 上定义一个apply 方法\n  定义一个绑定到webpack 自身的hook\n  处理webpack内部特定数据\n  功能完成后调用webpack 提供的回调\n\n\n一、webpack的打包原理\n\n  识别入口文件\n  通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)\n  webpack做的就是分析代码，转换代码，编译代码，输出代码\n  最终形成打包后的代码\n二、什么是loader\n\n  loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行，第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码\n\n三、什么是plugin\n\n  在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。\n\n四、loader和plugin的区别\n\n  对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程\n  plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务\n```\n\n### 网络请求方面\n\n#### Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用\n\n- 三者的异同：上面的使用方式说好了，下面就唠唠三者之间的区别，这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别。生命周期：cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效localStorage：除非被手动清除，否则将会永久保存。\n- sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。\n- 存放数据大小：cookie：4KB左右\n- localStorage和sessionStorage：可以保存5MB的信息。\n- http请求：cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题\n- localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信\n- 易用性：cookie：需要程序员自己封装，源生的Cookie接口不友好\n- localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持\n- 应用场景：从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比storage更好用的。其他情况下，可以使用storage，就用storage。\n- storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。\n- localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。\n","slug":"前端面试题整理","published":1,"updated":"2020-05-26T10:06:35.491Z","comments":1,"photos":[],"link":"","_id":"ckbc2dr460009cjc34s3nas7s","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>本人并不是技术大牛(但是会一直朝着那个方向前进)，本文会分享一些本人在面试过程中遇到的一些比较有意思的前端面试题目，如有不对之处还请各位巨牛批评指正！</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h3><h4 id=\"Q-使用promise封装一个readfile函数\"><a href=\"#Q-使用promise封装一个readfile函数\" class=\"headerlink\" title=\"Q: 使用promise封装一个readfile函数\"></a>Q: 使用promise封装一个readfile函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">  fs.readFile(filePath,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pReadFile(<span class=\"string\">'./data/a.txt'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/b.txt'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/c.txt'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q：去除连续重复字符串？例：abcdaaabcd-输出abcdabcd\"><a href=\"#Q：去除连续重复字符串？例：abcdaaabcd-输出abcdabcd\" class=\"headerlink\" title=\"Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd\"></a>Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">str_</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str != <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = str[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i = <span class=\"number\">1</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[i] != str[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        result += str[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-正则将电话号码中间四位变成-号\"><a href=\"#Q-正则将电话号码中间四位变成-号\" class=\"headerlink\" title=\"Q: 正则将电话号码中间四位变成#号\"></a>Q: 正则将电话号码中间四位变成#号</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式 1： 正则分组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> phone = <span class=\"string\">\"18180800880\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d&#123;3&#125;)\\d&#123;4&#125;(\\d&#123;4&#125;)/</span></span><br><span class=\"line\">phone.replace(reg,<span class=\"string\">\"$1****$2\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 181****0880</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式 2：字符串截取</span></span><br><span class=\"line\">phone.substr(<span class=\"number\">0</span>,<span class=\"number\">3</span>) + <span class=\"string\">\"****\"</span> + phone.substr(<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-查看下列代码运行结果\"><a href=\"#Q-查看下列代码运行结果\" class=\"headerlink\" title=\"Q: 查看下列代码运行结果\"></a>Q: 查看下列代码运行结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出catch内容</span></span><br><span class=\"line\"><span class=\"comment\">// 然后抛出异常</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-查看下列代码运行结果-1\"><a href=\"#Q-查看下列代码运行结果-1\" class=\"headerlink\" title=\"Q: 查看下列代码运行结果\"></a>Q: 查看下列代码运行结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo = <span class=\"number\">10</span>  <span class=\"comment\">// 由于foo在函数中只为可读，因此赋值无效</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-数组拆解-flat-1-a-1-3-–-gt-1-2-3\"><a href=\"#Q-数组拆解-flat-1-a-1-3-–-gt-1-2-3\" class=\"headerlink\" title=\"Q: 数组拆解: flat: [1,[{a:1},3]] –&gt; [1, 2, 3]\"></a>Q: 数组拆解: flat: [1,[{a:1},3]] –&gt; [1, 2, 3]</h4><ul>\n<li>方式 1，缺陷如果元素是对象会报错</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.flat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.toString().split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> +item )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式 2，es6数组新扩展，参数是维度，可填写无穷大</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>]].flat(<span class=\"number\">1</span>) ==&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式 3，reduce 和 concat</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,&#123;<span class=\"attr\">sas</span>: <span class=\"string\">'222'</span>&#125;,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>, [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenDeep</span>(<span class=\"params\">arr1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr1.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> <span class=\"built_in\">Array</span>.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flattenDeep(arr1);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-写一个函数输出：-‘a’-‘b’-‘c’-‘d’-gt-a-b-c-‘d’\"><a href=\"#Q-写一个函数输出：-‘a’-‘b’-‘c’-‘d’-gt-a-b-c-‘d’\" class=\"headerlink\" title=\"Q: 写一个函数输出： [‘a’, ‘b’, ‘c’, ‘d’] =&gt; { a: { b: { c: ‘d’ } } }\"></a>Q: 写一个函数输出： [‘a’, ‘b’, ‘c’, ‘d’] =&gt; { a: { b: { c: ‘d’ } } }</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">to_</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _arr = arr.reverse()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(_arr)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _arr.reduce(<span class=\"function\">(<span class=\"params\">item, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      item = &#123;</span><br><span class=\"line\">        [arr[index + <span class=\"number\">1</span>]]: cur</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> item</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    item = &#123; [cur]: item &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">  &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-封装一个Array-filter方法\"><a href=\"#Q-封装一个Array-filter方法\" class=\"headerlink\" title=\"Q: 封装一个Array.filter方法\"></a>Q: 封装一个Array.filter方法</h4><ul>\n<li>1.使用Array.reduce方法封装，还有其他方法，希望大家帮忙补充！</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Filter</span>(<span class=\"params\">arr, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">item, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback(cur, index, arr)) item.push(cur)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-什么是防抖和节流？有什么区别？如何实现\"><a href=\"#Q-什么是防抖和节流？有什么区别？如何实现\" class=\"headerlink\" title=\"Q: 什么是防抖和节流？有什么区别？如何实现\"></a>Q: 什么是防抖和节流？有什么区别？如何实现</h4><ul>\n<li>防抖</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</span></span><br><span class=\"line\"><span class=\"comment\">// 思路：每次触发事件时都取消之前的延时调用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>; <span class=\"comment\">// 创建一个标记用来存放定时器的返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(timeout); <span class=\"comment\">// 每当用户输入的时候把前一个 setTimeout clear 掉</span></span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span></span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'防抖成功'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'inp'</span>);</span><br><span class=\"line\">inp.addEventListener(<span class=\"string\">'input'</span>, debounce(sayHi)); <span class=\"comment\">// 防抖</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>节流</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</span></span><br><span class=\"line\"><span class=\"comment\">// 思路：每次触发事件时都判断当前是否有等待执行的延时函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> canRun = <span class=\"literal\">true</span>; <span class=\"comment\">// 通过闭包保存一个标记</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canRun) <span class=\"keyword\">return</span>; <span class=\"comment\">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class=\"line\">    canRun = <span class=\"literal\">false</span>; <span class=\"comment\">// 立即设置为false</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class=\"line\">      canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.target.innerWidth, e.target.innerHeight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, throttle(sayHi));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-创建一个从1——5数组\"><a href=\"#Q-创建一个从1——5数组\" class=\"headerlink\" title=\"Q: 创建一个从1——5数组\"></a>Q: 创建一个从1——5数组</h4><ul>\n<li>字面量</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"string\">'12345'</span>).map(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span> <span class=\"built_in\">Number</span>(e))</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>).map(<span class=\"function\">(<span class=\"params\">e,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"string\">'12345'</span>.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span> <span class=\"built_in\">Number</span>(e))</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>).fill(<span class=\"number\">0</span>).map(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span> i+ <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  arr.fill(i + <span class=\"number\">1</span>,i, i + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-给定一个整数数组-nums-和一个目标值-target-，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\"><a href=\"#Q-给定一个整数数组-nums-和一个目标值-target-，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\" class=\"headerlink\" title=\"Q: 给定一个整数数组 nums 和一个目标值 target ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\"></a>Q: 给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code> ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</h4><ul>\n<li>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给定 nums = [2, 7, 11, 15], target = 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为 nums[0] + nums[1] = 2 + 7 = 9</span></span><br><span class=\"line\"><span class=\"comment\">// 所以返回 [0, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">      target = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSumIndex</span>(<span class=\"params\">arr1, sum</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; arr1.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> j = arr1.slice(i + <span class=\"number\">1</span>).findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> arr1[i] + item === sum);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log([i, i + <span class=\"number\">1</span> + j]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [i, i + <span class=\"number\">1</span> + j];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[]\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getSumIndex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = target-nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(k)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [map.get(k), i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.set(nums[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">getSumIndex(nums, target);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>附leetcode地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bS9zb2x1dGlvbi9xaWFuLWR1YW4tamluLWppZS1zdWFuLWZhLWxpYW5nLXNodS16aGktaGUtYnktdXNlci8=\">leetcode<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"Q-弹性盒子中-flex-0-1-auto-表示什么意思\"><a href=\"#Q-弹性盒子中-flex-0-1-auto-表示什么意思\" class=\"headerlink\" title=\"Q:弹性盒子中 flex: 0 1 auto 表示什么意思\"></a>Q:弹性盒子中 flex: 0 1 auto 表示什么意思</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三个参数分别对应的是 flex-grow, flex-shrink 和 flex-basis，默认值为0 1 auto。</span><br><span class=\"line\">  1.flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</span><br><span class=\"line\">  2.flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class=\"line\">  3.flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><h4 id=\"Q-webpack-中-loader-和-plugin-的区别是什么\"><a href=\"#Q-webpack-中-loader-和-plugin-的区别是什么\" class=\"headerlink\" title=\"Q: webpack 中 loader 和 plugin 的区别是什么\"></a>Q: webpack 中 loader 和 plugin 的区别是什么</h4><ul>\n<li>这里引用官方文档原文：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>网友解释</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># loader:让webpack能够处理非js文件(自身职能理解js)，然后你就可以利用 webpack 的打包能力，对它们进行处理。</span><br><span class=\"line\">  例如：css-loader、style-loader、postcss-loader、sass-loader</span><br><span class=\"line\"></span><br><span class=\"line\"># plugins:从打包优化和压缩，一直到重新定义环境中的变量.</span><br><span class=\"line\">  例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill</span><br><span class=\"line\"></span><br><span class=\"line\"># 相对于loader转换指定类型的模块功能，plugins能够被用于执行更广泛的任务比如打包优化、文件管理、环境注入等……</span><br><span class=\"line\"></span><br><span class=\"line\"># webpack 是由nodejs编写的前端资源加载&#x2F;打包工具，由nodejs提供了强大的文件处理，IO能力。</span><br><span class=\"line\">  loader: 是一个nodejs 函数模块， 传入resource file 或者sourceMap json 结果，读取文件，将文件处理为String 或者 Buffer 格式，然后传给compiler 或者下一个loader.</span><br><span class=\"line\">  plugin: 是能够参与到compilation process的自定义函数，通过hook到每一个编译（compiler）中，触发关键事件或处理。</span><br><span class=\"line\"></span><br><span class=\"line\"># 如何自定义webpack插件：</span><br><span class=\"line\"></span><br><span class=\"line\"># JavaScript 命名函数</span><br><span class=\"line\">  在插件函数prototype 上定义一个apply 方法</span><br><span class=\"line\">  定义一个绑定到webpack 自身的hook</span><br><span class=\"line\">  处理webpack内部特定数据</span><br><span class=\"line\">  功能完成后调用webpack 提供的回调</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">一、webpack的打包原理</span><br><span class=\"line\"></span><br><span class=\"line\">  识别入口文件</span><br><span class=\"line\">  通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)</span><br><span class=\"line\">  webpack做的就是分析代码，转换代码，编译代码，输出代码</span><br><span class=\"line\">  最终形成打包后的代码</span><br><span class=\"line\">二、什么是loader</span><br><span class=\"line\"></span><br><span class=\"line\">  loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行，第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码</span><br><span class=\"line\"></span><br><span class=\"line\">三、什么是plugin</span><br><span class=\"line\"></span><br><span class=\"line\">  在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。</span><br><span class=\"line\"></span><br><span class=\"line\">四、loader和plugin的区别</span><br><span class=\"line\"></span><br><span class=\"line\">  对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程</span><br><span class=\"line\">  plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络请求方面\"><a href=\"#网络请求方面\" class=\"headerlink\" title=\"网络请求方面\"></a>网络请求方面</h3><h4 id=\"Q-谈谈-cookie、localStorage-以及-sessionStorage-区别，以及cookie-为什么不建议用\"><a href=\"#Q-谈谈-cookie、localStorage-以及-sessionStorage-区别，以及cookie-为什么不建议用\" class=\"headerlink\" title=\"Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用\"></a>Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用</h4><ul>\n<li>三者的异同：上面的使用方式说好了，下面就唠唠三者之间的区别，这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别。生命周期：cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效localStorage：除非被手动清除，否则将会永久保存。</li>\n<li>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</li>\n<li>存放数据大小：cookie：4KB左右</li>\n<li>localStorage和sessionStorage：可以保存5MB的信息。</li>\n<li>http请求：cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</li>\n<li>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</li>\n<li>易用性：cookie：需要程序员自己封装，源生的Cookie接口不友好</li>\n<li>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</li>\n<li>应用场景：从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比storage更好用的。其他情况下，可以使用storage，就用storage。</li>\n<li>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</li>\n<li>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>本人并不是技术大牛(但是会一直朝着那个方向前进)，本文会分享一些本人在面试过程中遇到的一些比较有意思的前端面试题目，如有不对之处还请各位巨牛批评指正！</p>\n</blockquote>","more":"<h3 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a>Javascript</h3><h4 id=\"Q-使用promise封装一个readfile函数\"><a href=\"#Q-使用promise封装一个readfile函数\" class=\"headerlink\" title=\"Q: 使用promise封装一个readfile函数\"></a>Q: 使用promise封装一个readfile函数</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pReadFile</span>(<span class=\"params\">filePath</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve,reject</span>)</span>&#123;</span><br><span class=\"line\">  fs.readFile(filePath,<span class=\"string\">'utf8'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</span><br><span class=\"line\">      reject(err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"> &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">pReadFile(<span class=\"string\">'./data/a.txt'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/b.txt'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pReadFile(<span class=\"string\">'./data/c.txt'</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data)</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q：去除连续重复字符串？例：abcdaaabcd-输出abcdabcd\"><a href=\"#Q：去除连续重复字符串？例：abcdaaabcd-输出abcdabcd\" class=\"headerlink\" title=\"Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd\"></a>Q：去除连续重复字符串？例：abcdaaabcd 输出abcdabcd</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">str_</span> (<span class=\"params\">str</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str != <span class=\"string\">''</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = str[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> i = <span class=\"number\">1</span>; i &lt; str.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (str[i] != str[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">        result += str[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-正则将电话号码中间四位变成-号\"><a href=\"#Q-正则将电话号码中间四位变成-号\" class=\"headerlink\" title=\"Q: 正则将电话号码中间四位变成#号\"></a>Q: 正则将电话号码中间四位变成#号</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 方式 1： 正则分组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> phone = <span class=\"string\">\"18180800880\"</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> reg = <span class=\"regexp\">/(\\d&#123;3&#125;)\\d&#123;4&#125;(\\d&#123;4&#125;)/</span></span><br><span class=\"line\">phone.replace(reg,<span class=\"string\">\"$1****$2\"</span>)</span><br><span class=\"line\"><span class=\"comment\">// 181****0880</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 方式 2：字符串截取</span></span><br><span class=\"line\">phone.substr(<span class=\"number\">0</span>,<span class=\"number\">3</span>) + <span class=\"string\">\"****\"</span> + phone.substr(<span class=\"number\">7</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-查看下列代码运行结果\"><a href=\"#Q-查看下列代码运行结果\" class=\"headerlink\" title=\"Q: 查看下列代码运行结果\"></a>Q: 查看下列代码运行结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  setTimeout(<span class=\"function\"><span class=\"params\">()</span>=&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'1'</span>)</span><br><span class=\"line\">  &#125;,<span class=\"number\">0</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出catch内容</span></span><br><span class=\"line\"><span class=\"comment\">// 然后抛出异常</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-查看下列代码运行结果-1\"><a href=\"#Q-查看下列代码运行结果-1\" class=\"headerlink\" title=\"Q: 查看下列代码运行结果\"></a>Q: 查看下列代码运行结果</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> foo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>) &#125;;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  foo = <span class=\"number\">10</span>  <span class=\"comment\">// 由于foo在函数中只为可读，因此赋值无效</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(foo)</span><br><span class=\"line\">&#125;())</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-数组拆解-flat-1-a-1-3-–-gt-1-2-3\"><a href=\"#Q-数组拆解-flat-1-a-1-3-–-gt-1-2-3\" class=\"headerlink\" title=\"Q: 数组拆解: flat: [1,[{a:1},3]] –&gt; [1, 2, 3]\"></a>Q: 数组拆解: flat: [1,[{a:1},3]] –&gt; [1, 2, 3]</h4><ul>\n<li>方式 1，缺陷如果元素是对象会报错</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Array</span>.prototype.flat = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.toString().split(<span class=\"string\">','</span>).map(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> +item )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式 2，es6数组新扩展，参数是维度，可填写无穷大</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">1</span>,[<span class=\"number\">2</span>,<span class=\"number\">3</span>]].flat(<span class=\"number\">1</span>) ==&gt; [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>]</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方式 3，reduce 和 concat</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">1</span>,&#123;<span class=\"attr\">sas</span>: <span class=\"string\">'222'</span>&#125;,<span class=\"number\">3</span>,[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>, [<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>]]];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">flattenDeep</span>(<span class=\"params\">arr1</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr1.reduce(<span class=\"function\">(<span class=\"params\">acc, val</span>) =&gt;</span> <span class=\"built_in\">Array</span>.isArray(val) ? acc.concat(flattenDeep(val)) : acc.concat(val), []);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">flattenDeep(arr1);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-写一个函数输出：-‘a’-‘b’-‘c’-‘d’-gt-a-b-c-‘d’\"><a href=\"#Q-写一个函数输出：-‘a’-‘b’-‘c’-‘d’-gt-a-b-c-‘d’\" class=\"headerlink\" title=\"Q: 写一个函数输出： [‘a’, ‘b’, ‘c’, ‘d’] =&gt; { a: { b: { c: ‘d’ } } }\"></a>Q: 写一个函数输出： [‘a’, ‘b’, ‘c’, ‘d’] =&gt; { a: { b: { c: ‘d’ } } }</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">to_</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> _arr = arr.reverse()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.isArray(_arr)) <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _arr.reduce(<span class=\"function\">(<span class=\"params\">item, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      item = &#123;</span><br><span class=\"line\">        [arr[index + <span class=\"number\">1</span>]]: cur</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> item</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">    item = &#123; [cur]: item &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">  &#125;, &#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-封装一个Array-filter方法\"><a href=\"#Q-封装一个Array-filter方法\" class=\"headerlink\" title=\"Q: 封装一个Array.filter方法\"></a>Q: 封装一个Array.filter方法</h4><ul>\n<li>1.使用Array.reduce方法封装，还有其他方法，希望大家帮忙补充！</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Filter</span>(<span class=\"params\">arr, callback</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr.reduce(<span class=\"function\">(<span class=\"params\">item, cur, index, arr</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (callback(cur, index, arr)) item.push(cur)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item;</span><br><span class=\"line\">  &#125;, [])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-什么是防抖和节流？有什么区别？如何实现\"><a href=\"#Q-什么是防抖和节流？有什么区别？如何实现\" class=\"headerlink\" title=\"Q: 什么是防抖和节流？有什么区别？如何实现\"></a>Q: 什么是防抖和节流？有什么区别？如何实现</h4><ul>\n<li>防抖</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 触发高频事件后n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间</span></span><br><span class=\"line\"><span class=\"comment\">// 思路：每次触发事件时都取消之前的延时调用方法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> timeout = <span class=\"literal\">null</span>; <span class=\"comment\">// 创建一个标记用来存放定时器的返回值</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    clearTimeout(timeout); <span class=\"comment\">// 每当用户输入的时候把前一个 setTimeout clear 掉</span></span><br><span class=\"line\">    timeout = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span></span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'防抖成功'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> inp = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'inp'</span>);</span><br><span class=\"line\">inp.addEventListener(<span class=\"string\">'input'</span>, debounce(sayHi)); <span class=\"comment\">// 防抖</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>节流</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 高频事件触发，但在n秒内只会执行一次，所以节流会稀释函数的执行频率</span></span><br><span class=\"line\"><span class=\"comment\">// 思路：每次触发事件时都判断当前是否有等待执行的延时函数</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> canRun = <span class=\"literal\">true</span>; <span class=\"comment\">// 通过闭包保存一个标记</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!canRun) <span class=\"keyword\">return</span>; <span class=\"comment\">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class=\"line\">    canRun = <span class=\"literal\">false</span>; <span class=\"comment\">// 立即设置为false</span></span><br><span class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123; <span class=\"comment\">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class=\"line\">      fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class=\"line\">      canRun = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;, <span class=\"number\">500</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(e.target.innerWidth, e.target.innerHeight);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, throttle(sayHi));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-创建一个从1——5数组\"><a href=\"#Q-创建一个从1——5数组\" class=\"headerlink\" title=\"Q: 创建一个从1——5数组\"></a>Q: 创建一个从1——5数组</h4><ul>\n<li>字面量</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>方法</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"string\">'12345'</span>).map(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span> <span class=\"built_in\">Number</span>(e))</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>).map(<span class=\"function\">(<span class=\"params\">e,index</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> index + <span class=\"number\">1</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"string\">'12345'</span>.split(<span class=\"string\">''</span>).map(<span class=\"function\"><span class=\"params\">e</span>=&gt;</span> <span class=\"built_in\">Number</span>(e))</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>(<span class=\"number\">5</span>).fill(<span class=\"number\">0</span>).map(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span> i+ <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = <span class=\"built_in\">Array</span>.from(<span class=\"built_in\">Array</span>(<span class=\"number\">5</span>))</span><br><span class=\"line\">arr.forEach(<span class=\"function\">(<span class=\"params\">e,i</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  arr.fill(i + <span class=\"number\">1</span>,i, i + <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Q-给定一个整数数组-nums-和一个目标值-target-，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\"><a href=\"#Q-给定一个整数数组-nums-和一个目标值-target-，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\" class=\"headerlink\" title=\"Q: 给定一个整数数组 nums 和一个目标值 target ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标\"></a>Q: 给定一个整数数组 <code>nums</code> 和一个目标值 <code>target</code> ，请你在该数组中找出和为目标值的那两个整数，并返回他们的数组下标</h4><ul>\n<li>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给定 nums = [2, 7, 11, 15], target = 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 因为 nums[0] + nums[1] = 2 + 7 = 9</span></span><br><span class=\"line\"><span class=\"comment\">// 所以返回 [0, 1]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> nums = [<span class=\"number\">2</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>],</span><br><span class=\"line\">      target = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSumIndex</span>(<span class=\"params\">arr1, sum</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; arr1.length) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> j = arr1.slice(i + <span class=\"number\">1</span>).findIndex(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> arr1[i] + item === sum);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j !== <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log([i, i + <span class=\"number\">1</span> + j]);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> [i, i + <span class=\"number\">1</span> + j];</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"[]\"</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> getSumIndex = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nums, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>()</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i&lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> k = target-nums[i]</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(map.has(k)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [map.get(k), i]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map.set(nums[i], i)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">getSumIndex(nums, target);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>附leetcode地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvdHdvLXN1bS9zb2x1dGlvbi9xaWFuLWR1YW4tamluLWppZS1zdWFuLWZhLWxpYW5nLXNodS16aGktaGUtYnktdXNlci8=\">leetcode<i class=\"fa fa-external-link-alt\"></i></span></li>\n</ul>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><h4 id=\"Q-弹性盒子中-flex-0-1-auto-表示什么意思\"><a href=\"#Q-弹性盒子中-flex-0-1-auto-表示什么意思\" class=\"headerlink\" title=\"Q:弹性盒子中 flex: 0 1 auto 表示什么意思\"></a>Q:弹性盒子中 flex: 0 1 auto 表示什么意思</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三个参数分别对应的是 flex-grow, flex-shrink 和 flex-basis，默认值为0 1 auto。</span><br><span class=\"line\">  1.flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</span><br><span class=\"line\">  2.flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class=\"line\">  3.flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"webpack\"><a href=\"#webpack\" class=\"headerlink\" title=\"webpack\"></a>webpack</h3><h4 id=\"Q-webpack-中-loader-和-plugin-的区别是什么\"><a href=\"#Q-webpack-中-loader-和-plugin-的区别是什么\" class=\"headerlink\" title=\"Q: webpack 中 loader 和 plugin 的区别是什么\"></a>Q: webpack 中 loader 和 plugin 的区别是什么</h4><ul>\n<li>这里引用官方文档原文：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>网友解释</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># loader:让webpack能够处理非js文件(自身职能理解js)，然后你就可以利用 webpack 的打包能力，对它们进行处理。</span><br><span class=\"line\">  例如：css-loader、style-loader、postcss-loader、sass-loader</span><br><span class=\"line\"></span><br><span class=\"line\"># plugins:从打包优化和压缩，一直到重新定义环境中的变量.</span><br><span class=\"line\">  例如：uglify-webpack-plugin、clean-webpack-plugin、babel-polyfill</span><br><span class=\"line\"></span><br><span class=\"line\"># 相对于loader转换指定类型的模块功能，plugins能够被用于执行更广泛的任务比如打包优化、文件管理、环境注入等……</span><br><span class=\"line\"></span><br><span class=\"line\"># webpack 是由nodejs编写的前端资源加载&#x2F;打包工具，由nodejs提供了强大的文件处理，IO能力。</span><br><span class=\"line\">  loader: 是一个nodejs 函数模块， 传入resource file 或者sourceMap json 结果，读取文件，将文件处理为String 或者 Buffer 格式，然后传给compiler 或者下一个loader.</span><br><span class=\"line\">  plugin: 是能够参与到compilation process的自定义函数，通过hook到每一个编译（compiler）中，触发关键事件或处理。</span><br><span class=\"line\"></span><br><span class=\"line\"># 如何自定义webpack插件：</span><br><span class=\"line\"></span><br><span class=\"line\"># JavaScript 命名函数</span><br><span class=\"line\">  在插件函数prototype 上定义一个apply 方法</span><br><span class=\"line\">  定义一个绑定到webpack 自身的hook</span><br><span class=\"line\">  处理webpack内部特定数据</span><br><span class=\"line\">  功能完成后调用webpack 提供的回调</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">一、webpack的打包原理</span><br><span class=\"line\"></span><br><span class=\"line\">  识别入口文件</span><br><span class=\"line\">  通过逐层识别模块依赖(Commonjs、amd或者es6的import，webpack都会对其进行分析，来获取代码的依赖)</span><br><span class=\"line\">  webpack做的就是分析代码，转换代码，编译代码，输出代码</span><br><span class=\"line\">  最终形成打包后的代码</span><br><span class=\"line\">二、什么是loader</span><br><span class=\"line\"></span><br><span class=\"line\">  loader是文件加载器，能够加载资源文件，并对这些文件进行一些处理，诸如编译、压缩等，最终一起打包到指定的文件中处理一个文件可以使用多个loader，loader的执行顺序和配置中的顺序是相反的，即最后一个loader最先执行，第一个loader最后执行，第一个执行的loader接收源文件内容作为参数，其它loader接收前一个执行的loader的返回值作为参数，最后执行的loader会返回此模块的JavaScript源码</span><br><span class=\"line\"></span><br><span class=\"line\">三、什么是plugin</span><br><span class=\"line\"></span><br><span class=\"line\">  在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果。</span><br><span class=\"line\"></span><br><span class=\"line\">四、loader和plugin的区别</span><br><span class=\"line\"></span><br><span class=\"line\">  对于loader，它是一个转换器，将A文件进行编译形成B文件，这里操作的是文件，比如将A.scss转换为A.css，单纯的文件转换过程</span><br><span class=\"line\">  plugin是一个扩展器，它丰富了webpack本身，针对是loader结束后，webpack打包的整个过程，它并不直接操作文件，而是基于事件机制工作，会监听webpack打包过程中的某些节点，执行广泛的任务</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"网络请求方面\"><a href=\"#网络请求方面\" class=\"headerlink\" title=\"网络请求方面\"></a>网络请求方面</h3><h4 id=\"Q-谈谈-cookie、localStorage-以及-sessionStorage-区别，以及cookie-为什么不建议用\"><a href=\"#Q-谈谈-cookie、localStorage-以及-sessionStorage-区别，以及cookie-为什么不建议用\" class=\"headerlink\" title=\"Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用\"></a>Q: 谈谈 cookie、localStorage 以及 sessionStorage 区别，以及cookie 为什么不建议用</h4><ul>\n<li>三者的异同：上面的使用方式说好了，下面就唠唠三者之间的区别，这个问题其实很多大厂面试的时候也都会问到，所以可以注意一下这几个之间的区别。生命周期：cookie：可设置失效时间，没有设置的话，默认是关闭浏览器后失效localStorage：除非被手动清除，否则将会永久保存。</li>\n<li>sessionStorage： 仅在当前网页会话下有效，关闭页面或浏览器后就会被清除。</li>\n<li>存放数据大小：cookie：4KB左右</li>\n<li>localStorage和sessionStorage：可以保存5MB的信息。</li>\n<li>http请求：cookie：每次都会携带在HTTP头中，如果使用cookie保存过多数据会带来性能问题</li>\n<li>localStorage和sessionStorage：仅在客户端（即浏览器）中保存，不参与和服务器的通信</li>\n<li>易用性：cookie：需要程序员自己封装，源生的Cookie接口不友好</li>\n<li>localStorage和sessionStorage：源生接口可以接受，亦可再次封装来对Object和Array有更好的支持</li>\n<li>应用场景：从安全性来说，因为每次http请求都会携带cookie信息，这样无形中浪费了带宽，所以cookie应该尽可能少的使用，另外cookie还需要指定作用域，不可以跨域调用，限制比较多。但是用来识别用户登录来说，cookie还是比storage更好用的。其他情况下，可以使用storage，就用storage。</li>\n<li>storage在存储数据的大小上面秒杀了cookie，现在基本上很少使用cookie了，因为更大总是更好的，哈哈哈你们懂得。</li>\n<li>localStorage和sessionStorage唯一的差别一个是永久保存在浏览器里面，一个是关闭网页就清除了信息。localStorage可以用来夸页面传递参数，sessionStorage用来保存一些临时的数据，防止用户刷新页面之后丢失了一些参数。</li>\n</ul>"}],"PostAsset":[{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69dtpcenj30zk0fstbx.jpg","slug":"006tNbRwgy1fy69dtpcenj30zk0fstbx.jpg","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69b0529uj30sy0pg41h.jpg","slug":"006tNbRwgy1fy69b0529uj30sy0pg41h.jpg","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69bjs148j30t20v2ae7.jpg","slug":"006tNbRwgy1fy69bjs148j30t20v2ae7.jpg","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg","slug":"006tNbRwgy1fy69c5ndkcj30u40r2diy.jpg","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg","slug":"006tNbRwgy1fy69cyad02j30zk0ec0xz.jpg","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg","slug":"006tNbRwgy1fy69dg5ei0j30zk0g4434.jpg","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg","slug":"006tNbRwgy1fy69dkjpc8j30uo0h20vf.jpg","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg","slug":"006tNbRwgy1fy69daffwqj30ta0mm0wn.jpg","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0},{"_id":"source/_posts/sourceTree-使用rebase操作/006tNbRwgy1fy69doxd6zj30ym0h00vp.png","slug":"006tNbRwgy1fy69doxd6zj30ym0h00vp.png","post":"ckbc2dr3h0000cjc31hp02iep","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck8q1pzxx0001bhc38zy583bz","category_id":"ck8q1pzy30007bhc3bu4pexqt","_id":"ck8q1pzy8000hbhc37hz1a3y4"},{"post_id":"ck8q1pzy7000ebhc3c36xfns3","category_id":"ck8q1pzy30007bhc3bu4pexqt","_id":"ck8q1pzyb000mbhc376z49xck"},{"post_id":"ck8q1pzy00004bhc3gshk1jox","category_id":"ck8q1pzy30007bhc3bu4pexqt","_id":"ck8q1pzyc000rbhc3f3yw15lj"},{"post_id":"ck8q1pzy8000fbhc3705cgjb9","category_id":"ck8q1pzy30007bhc3bu4pexqt","_id":"ck8q1pzyd000ubhc3dytbax0x"},{"post_id":"ck8q1pzy10005bhc3652cboj6","category_id":"ck8q1pzy30007bhc3bu4pexqt","_id":"ck8q1pzyf000ybhc3b3ct6d0y"},{"post_id":"ck8q1pzyb000qbhc36usa2k85","category_id":"ck8q1pzy30007bhc3bu4pexqt","_id":"ck8q1pzyf0010bhc3h22mcnqd"},{"post_id":"ck8q1pzy20006bhc34drndpq6","category_id":"ck8q1pzy30007bhc3bu4pexqt","_id":"ck8q1pzyg0013bhc3hjodfqj7"},{"post_id":"ck8q1pzy40009bhc32137aiy9","category_id":"ck8q1pzyd000vbhc38rfh5i89","_id":"ck8q1pzyl0018bhc31p032wz4"},{"post_id":"ck8q1pzy4000abhc347yx1box","category_id":"ck8q1pzyd000vbhc38rfh5i89","_id":"ck8q1pzyn001dbhc31rjwbmfl"},{"post_id":"ck8q1pzy9000jbhc3hwmwdqn9","category_id":"ck8q1pzyl0017bhc3es6n2nqp","_id":"ck8q1pzyn001gbhc3d53nht3d"},{"post_id":"ck8q1pzya000lbhc37r7ygl2n","category_id":"ck8q1pzyn001ebhc3a0a64pi4","_id":"ck8q1pzyo001lbhc3ftmi8hpd"},{"post_id":"ck8q1pzyd000tbhc38hioehkw","category_id":"ck8q1pzyd000vbhc38rfh5i89","_id":"ck8q1pzyp001pbhc339dkd3xw"},{"post_id":"ck8q1pzye000xbhc3591bd7rx","category_id":"ck8q1pzyo001kbhc3ap9k2ujh","_id":"ck8q1pzyp001sbhc36eluh9hu"},{"post_id":"ck8q1pzyf000zbhc3huus7kqy","category_id":"ck8q1pzyp001qbhc38qhz8i4a","_id":"ck8q1pzyq001wbhc38cp9adms"},{"post_id":"ck8q1pzyg0012bhc3gvmn462l","category_id":"ck8q1pzyp001tbhc37wtoc6sz","_id":"ck8q1pzyr0021bhc346nc4hqx"},{"post_id":"ck8q1pzyh0016bhc37clz0i4a","category_id":"ck8q1pzyq001xbhc3hbo69ld4","_id":"ck8q1pzyt0024bhc33pha3gw7"},{"post_id":"ck8q1pzyl001abhc30ygrhzb2","category_id":"ck8q1pzyr0022bhc351ffbbwp","_id":"ck8q1pzyu0027bhc33c9h4bi0"},{"post_id":"ck8q1q00r0049bhc3bi67b84g","category_id":"ck8q1pzy30007bhc3bu4pexqt","_id":"ck8q1q00s004bbhc33pv7g2ub"},{"post_id":"ckbc2dr3n0001cjc30r761m18","category_id":"ckbc2dr3p0002cjc3b1ng179r","_id":"ckbc2dr3w0005cjc3fig7cc2y"},{"post_id":"ckbc2dr450008cjc394twhwr4","category_id":"ckbc2dr3p0002cjc3b1ng179r","_id":"ckbc2dr47000ccjc3c4472j1z"},{"post_id":"ckbc2dr460009cjc34s3nas7s","category_id":"ck8q1pzxy0002bhc331ob97j7","_id":"ckbc2dr47000ecjc3htvh8a2d"},{"post_id":"ck8v0gcj100009zc344yqd814","category_id":"ckbc2dr3p0002cjc3b1ng179r","_id":"ckbc2dr4p000jcjc3698pdvfs"},{"post_id":"ckbc2dr3h0000cjc31hp02iep","category_id":"ck8q1pzxy0002bhc331ob97j7","_id":"ckbc3pwvq0001rcc328evablq"}],"PostTag":[{"post_id":"ck8q1pzxx0001bhc38zy583bz","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzyh0015bhc36j9zc1b0"},{"post_id":"ck8q1pzxx0001bhc38zy583bz","tag_id":"ck8q1pzyb000pbhc3doq2cw3v","_id":"ck8q1pzyl0019bhc361a6bcef"},{"post_id":"ck8q1pzxx0001bhc38zy583bz","tag_id":"ck8q1pzye000wbhc34txcbban","_id":"ck8q1pzym001cbhc3cbe6epf1"},{"post_id":"ck8q1pzy00004bhc3gshk1jox","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzyo001jbhc30ou32zrx"},{"post_id":"ck8q1pzy00004bhc3gshk1jox","tag_id":"ck8q1pzyb000pbhc3doq2cw3v","_id":"ck8q1pzyo001mbhc398dt7p4a"},{"post_id":"ck8q1pzy00004bhc3gshk1jox","tag_id":"ck8q1pzyn001fbhc38vhbhyyl","_id":"ck8q1pzyp001obhc3cpxo4x5g"},{"post_id":"ck8q1pzy10005bhc3652cboj6","tag_id":"ck8q1pzyo001ibhc32le3gtxx","_id":"ck8q1pzyq001vbhc37g96cyme"},{"post_id":"ck8q1pzy10005bhc3652cboj6","tag_id":"ck8q1pzyo001nbhc34oki3djf","_id":"ck8q1pzyq001ybhc3d6lg4ba9"},{"post_id":"ck8q1pzy10005bhc3652cboj6","tag_id":"ck8q1pzyp001rbhc3hgrc2moa","_id":"ck8q1pzyq0020bhc3ew6ecjq1"},{"post_id":"ck8q1pzy20006bhc34drndpq6","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzyu0026bhc3ghktev2z"},{"post_id":"ck8q1pzy20006bhc34drndpq6","tag_id":"ck8q1pzyb000pbhc3doq2cw3v","_id":"ck8q1pzyu0028bhc3egaodgsg"},{"post_id":"ck8q1pzy20006bhc34drndpq6","tag_id":"ck8q1pzyq001zbhc33zzg5d3c","_id":"ck8q1pzyu002abhc31b5lbrrt"},{"post_id":"ck8q1pzy20006bhc34drndpq6","tag_id":"ck8q1pzyr0023bhc3dnpsdtw1","_id":"ck8q1pzyu002bbhc3adwxgnib"},{"post_id":"ck8q1pzy40009bhc32137aiy9","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzyv002dbhc32fi6e3i8"},{"post_id":"ck8q1pzy40009bhc32137aiy9","tag_id":"ck8q1pzyb000pbhc3doq2cw3v","_id":"ck8q1pzyv002ebhc3gqwf5wew"},{"post_id":"ck8q1pzy40009bhc32137aiy9","tag_id":"ck8q1pzyu0029bhc34r185ucm","_id":"ck8q1pzyv002gbhc396yfbnqb"},{"post_id":"ck8q1pzy4000abhc347yx1box","tag_id":"ck8q1pzyu002cbhc30pnx6arx","_id":"ck8q1pzyw002jbhc3gwfm6tzy"},{"post_id":"ck8q1pzy4000abhc347yx1box","tag_id":"ck8q1pzyv002fbhc36atj6j8s","_id":"ck8q1pzyw002kbhc3ems0bcjz"},{"post_id":"ck8q1pzy4000abhc347yx1box","tag_id":"ck8q1pzyp001rbhc3hgrc2moa","_id":"ck8q1pzyw002mbhc38uqegedp"},{"post_id":"ck8q1pzy7000ebhc3c36xfns3","tag_id":"ck8q1pzyv002ibhc363vk6j1l","_id":"ck8q1pzyx002pbhc34h5600gg"},{"post_id":"ck8q1pzy7000ebhc3c36xfns3","tag_id":"ck8q1pzyw002lbhc31ddedjwu","_id":"ck8q1pzyx002qbhc3hipoca69"},{"post_id":"ck8q1pzy7000ebhc3c36xfns3","tag_id":"ck8q1pzyp001rbhc3hgrc2moa","_id":"ck8q1pzyx002sbhc34fmcb84e"},{"post_id":"ck8q1pzy8000fbhc3705cgjb9","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzyy002vbhc38p0ifwkl"},{"post_id":"ck8q1pzy8000fbhc3705cgjb9","tag_id":"ck8q1pzyb000pbhc3doq2cw3v","_id":"ck8q1pzyy002wbhc30ux6ep5x"},{"post_id":"ck8q1pzy8000fbhc3705cgjb9","tag_id":"ck8q1pzyx002rbhc3dztcby1k","_id":"ck8q1pzyy002ybhc3g1pn1cn7"},{"post_id":"ck8q1pzy8000fbhc3705cgjb9","tag_id":"ck8q1pzyx002tbhc3dmd71hnk","_id":"ck8q1pzyy002zbhc32ab0eml7"},{"post_id":"ck8q1pzy9000jbhc3hwmwdqn9","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzyz0031bhc33xo9ezpw"},{"post_id":"ck8q1pzy9000jbhc3hwmwdqn9","tag_id":"ck8q1pzyy002ubhc32uav84v4","_id":"ck8q1pzyz0032bhc35kvf4ugf"},{"post_id":"ck8q1pzy9000jbhc3hwmwdqn9","tag_id":"ck8q1pzyy002xbhc34ahl3zzg","_id":"ck8q1pzyz0034bhc37jnk200i"},{"post_id":"ck8q1pzya000lbhc37r7ygl2n","tag_id":"ck8q1pzyy0030bhc30yvcfkkc","_id":"ck8q1pzz00038bhc3fy6tgl6g"},{"post_id":"ck8q1pzya000lbhc37r7ygl2n","tag_id":"ck8q1pzyz0033bhc39c2ebhzq","_id":"ck8q1pzz10039bhc332us2uz2"},{"post_id":"ck8q1pzya000lbhc37r7ygl2n","tag_id":"ck8q1pzyx002rbhc3dztcby1k","_id":"ck8q1pzz1003bbhc33nclanxs"},{"post_id":"ck8q1pzya000lbhc37r7ygl2n","tag_id":"ck8q1pzz00036bhc3as7422ag","_id":"ck8q1pzz1003cbhc3cauu21qg"},{"post_id":"ck8q1pzyb000qbhc36usa2k85","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzz1003ebhc3cd7pbr6i"},{"post_id":"ck8q1pzyb000qbhc36usa2k85","tag_id":"ck8q1pzz00037bhc38rjt4s47","_id":"ck8q1pzz1003fbhc3cmce431w"},{"post_id":"ck8q1pzyb000qbhc36usa2k85","tag_id":"ck8q1pzz1003abhc36k1u748i","_id":"ck8q1pzz2003hbhc36ldc5ax0"},{"post_id":"ck8q1pzyd000tbhc38hioehkw","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzz2003ibhc3336wfbyz"},{"post_id":"ck8q1pzyd000tbhc38hioehkw","tag_id":"ck8q1pzyu0029bhc34r185ucm","_id":"ck8q1pzz3003kbhc3fbmoget6"},{"post_id":"ck8q1pzye000xbhc3591bd7rx","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzz3003lbhc3e9dm2nhu"},{"post_id":"ck8q1pzye000xbhc3591bd7rx","tag_id":"ck8q1pzz1003gbhc3646s0dri","_id":"ck8q1pzz3003nbhc33k7bam3g"},{"post_id":"ck8q1pzyf000zbhc3huus7kqy","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzz3003pbhc31p3s8tqr"},{"post_id":"ck8q1pzyf000zbhc3huus7kqy","tag_id":"ck8q1pzz2003jbhc3hrg99zfa","_id":"ck8q1pzz3003qbhc325zeeepv"},{"post_id":"ck8q1pzyf000zbhc3huus7kqy","tag_id":"ck8q1pzz3003mbhc38u78c4tf","_id":"ck8q1pzz4003sbhc3fjhc30gy"},{"post_id":"ck8q1pzyg0012bhc3gvmn462l","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1pzz4003ubhc3esib202h"},{"post_id":"ck8q1pzyg0012bhc3gvmn462l","tag_id":"ck8q1pzz3003obhc30pld1v4a","_id":"ck8q1pzz4003vbhc342sra1a5"},{"post_id":"ck8q1pzyg0012bhc3gvmn462l","tag_id":"ck8q1pzz1003gbhc3646s0dri","_id":"ck8q1pzz5003xbhc35ha3cp2p"},{"post_id":"ck8q1pzyh0016bhc37clz0i4a","tag_id":"ck8q1pzz4003tbhc3g5pd37il","_id":"ck8q1pzz5003zbhc30hhmf2uv"},{"post_id":"ck8q1pzyh0016bhc37clz0i4a","tag_id":"ck8q1pzz4003wbhc3dfhxedt9","_id":"ck8q1pzz50040bhc3ave1bljs"},{"post_id":"ck8q1pzyl001abhc30ygrhzb2","tag_id":"ck8q1pzz5003ybhc3h67sevy2","_id":"ck8q1pzz60043bhc3endtg94b"},{"post_id":"ck8q1pzyl001abhc30ygrhzb2","tag_id":"ck8q1pzz50041bhc382rubief","_id":"ck8q1pzz60044bhc36r2q47hx"},{"post_id":"ck8q1pzyl001abhc30ygrhzb2","tag_id":"ck8q1pzz60042bhc37exl7ung","_id":"ck8q1pzz60045bhc3hcweb162"},{"post_id":"ck8q1q00r0049bhc3bi67b84g","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ck8q1q00t004cbhc356eaejpj"},{"post_id":"ck8q1q00r0049bhc3bi67b84g","tag_id":"ck8q1pzyb000pbhc3doq2cw3v","_id":"ck8q1q00t004dbhc3df13dldm"},{"post_id":"ck8q1q00r0049bhc3bi67b84g","tag_id":"ck8q1q00s004abhc37hcg4x4l","_id":"ck8q1q00t004ebhc3ccx2634f"},{"post_id":"ckbc2dr3n0001cjc30r761m18","tag_id":"ckbc2dr3u0003cjc3byyx3s1i","_id":"ckbc2dr3w0006cjc31iex0qjb"},{"post_id":"ckbc2dr3n0001cjc30r761m18","tag_id":"ckbc2dr3v0004cjc30chddmzl","_id":"ckbc2dr3w0007cjc32ssp6t9r"},{"post_id":"ckbc2dr450008cjc394twhwr4","tag_id":"ckbc2dr3u0003cjc3byyx3s1i","_id":"ckbc2dr46000acjc3dnaw4g79"},{"post_id":"ckbc2dr450008cjc394twhwr4","tag_id":"ckbc2dr3v0004cjc30chddmzl","_id":"ckbc2dr47000bcjc37hvy0dta"},{"post_id":"ckbc2dr460009cjc34s3nas7s","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ckbc2dr47000dcjc3etnw54s0"},{"post_id":"ckbc2dr460009cjc34s3nas7s","tag_id":"ck8q1pzy30008bhc3el5a75w6","_id":"ckbc2dr47000fcjc33ryv31wr"},{"post_id":"ckbc2dr460009cjc34s3nas7s","tag_id":"ck8q1pzy5000dbhc3cfqzd7wx","_id":"ckbc2dr47000gcjc396b1ezcm"},{"post_id":"ck8v0gcj100009zc344yqd814","tag_id":"ckbc2dr3u0003cjc3byyx3s1i","_id":"ckbc2dr4m000hcjc3hv7ocj7l"},{"post_id":"ck8v0gcj100009zc344yqd814","tag_id":"ckbc2dr3v0004cjc30chddmzl","_id":"ckbc2dr4o000icjc3hswm2733"},{"post_id":"ckbc2dr3h0000cjc31hp02iep","tag_id":"ck8q1pzxz0003bhc36y7k0l9d","_id":"ckbc3pwvq0002rcc3c7cz5zgl"},{"post_id":"ckbc2dr3h0000cjc31hp02iep","tag_id":"ckbc3pwvp0000rcc31u2zasmv","_id":"ckbc3pwvr0003rcc36i2lcrvm"},{"post_id":"ckbc2dr3h0000cjc31hp02iep","tag_id":"ck8q1pzz3003mbhc38u78c4tf","_id":"ckbc3pwvr0004rcc3bkexhnq2"}],"Tag":[{"name":"前端开发","_id":"ck8q1pzxz0003bhc36y7k0l9d"},{"name":"面试题","_id":"ck8q1pzy30008bhc3el5a75w6"},{"name":"Javascript","_id":"ck8q1pzy5000dbhc3cfqzd7wx"},{"name":"JavaScript","_id":"ck8q1pzyb000pbhc3doq2cw3v"},{"name":"JS时间处理","_id":"ck8q1pzye000wbhc34txcbban"},{"name":"翻译","_id":"ck8q1pzyn001fbhc38vhbhyyl"},{"name":"模块化","_id":"ck8q1pzyo001ibhc32le3gtxx"},{"name":"规范","_id":"ck8q1pzyo001nbhc34oki3djf"},{"name":"JS","_id":"ck8q1pzyp001rbhc3hgrc2moa"},{"name":"NPM","_id":"ck8q1pzyq001zbhc33zzg5d3c"},{"name":"NodeJs","_id":"ck8q1pzyr0023bhc3dnpsdtw1"},{"name":"Vue","_id":"ck8q1pzyu0029bhc34r185ucm"},{"name":"vue","_id":"ck8q1pzyu002cbhc30pnx6arx"},{"name":"vuex","_id":"ck8q1pzyv002fbhc36atj6j8s"},{"name":"Webpack3.10","_id":"ck8q1pzyv002ibhc363vk6j1l"},{"name":"语法","_id":"ck8q1pzyw002lbhc31ddedjwu"},{"name":"VSCode","_id":"ck8q1pzyx002rbhc3dztcby1k"},{"name":"ESLint","_id":"ck8q1pzyx002tbhc3dmd71hnk"},{"name":"Mac","_id":"ck8q1pzyy002ubhc32uav84v4"},{"name":"软件","_id":"ck8q1pzyy002xbhc34ahl3zzg"},{"name":"系统底层","_id":"ck8q1pzyy0030bhc30yvcfkkc"},{"name":"Shell","_id":"ck8q1pzyz0033bhc39c2ebhzq"},{"name":"脚本操作","_id":"ck8q1pzz00036bhc3as7422ag"},{"name":"stylus","_id":"ck8q1pzz00037bhc38rjt4s47"},{"name":"css","_id":"ck8q1pzz1003abhc36k1u748i"},{"name":"Markdown","_id":"ck8q1pzz1003gbhc3646s0dri"},{"name":"sourceTree","_id":"ck8q1pzz2003jbhc3hrg99zfa"},{"name":"git","_id":"ck8q1pzz3003mbhc38u78c4tf"},{"name":"掘金","_id":"ck8q1pzz3003obhc30pld1v4a"},{"name":"windows","_id":"ck8q1pzz4003tbhc3g5pd37il"},{"name":"linux","_id":"ck8q1pzz4003wbhc3dfhxedt9"},{"name":"网络传输协议","_id":"ck8q1pzz5003ybhc3h67sevy2"},{"name":"TCP/IP协议族","_id":"ck8q1pzz50041bhc382rubief"},{"name":"HTTP/HTTPS","_id":"ck8q1pzz60042bhc37exl7ung"},{"name":"ES6语法","_id":"ck8q1q00s004abhc37hcg4x4l"},{"name":"全栈开发","_id":"ckbc2dr3u0003cjc3byyx3s1i"},{"name":"SSH","_id":"ckbc2dr3v0004cjc30chddmzl"},{"name":"分支策略","_id":"ckbc2xrbp000lcjc32f6w4zrr"},{"name":"分支策略管理","_id":"ckbc31gue00000yc3fag31ynu"},{"name":"git 多人协作开发","_id":"ckbc3pwvp0000rcc31u2zasmv"}]}}